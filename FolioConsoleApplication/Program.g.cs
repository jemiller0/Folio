using FolioLibrary;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using NJsonSchema;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Mail;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using Configuration = FolioLibrary.Configuration;
using Group = FolioLibrary.Group;

namespace FolioConsoleApplication
{
    partial class Program4
    {
        public static bool api;
        private static bool compress;
        public static string connectionString;
        private static string emailAddress = ConfigurationManager.AppSettings["emailAddress"];
        private static string emailName = ConfigurationManager.AppSettings["emailName"];
        private static bool force;
        private readonly static JsonSerializer localTimeJsonSerializer = new JsonSerializer { Formatting = Formatting.Indented, DateTimeZoneHandling = DateTimeZoneHandling.Local };
        private readonly static JsonSerializer universalTimeJsonSerializer = new JsonSerializer { Formatting = Formatting.Indented, DateTimeZoneHandling = DateTimeZoneHandling.Utc, DateFormatString = "yyyy-MM-ddTHH:mm:ss.fff+00:00" };
        public static string orderBy;
        private static int? skip;
        private static string smtpHost = ConfigurationManager.AppSettings["smtpHost"];
        private static int? take;
        public readonly static TraceSource traceSource = new TraceSource("FolioConsoleApplication", SourceLevels.Information);
        public static string userId;
        public static bool universalTime;
        public static bool validate;
        public static bool whatIf;

        static int Main(string[] args)
        {
            var s = Stopwatch.StartNew();
            try
            {
                Console.OutputEncoding = Encoding.UTF8;
                var count = args.Any(s3 => s3.Equals("-Count", StringComparison.OrdinalIgnoreCase));
                var query = args.Any(s3 => s3.Equals("-Query", StringComparison.OrdinalIgnoreCase));
                var tracePath = args.SkipWhile(s3 => !s3.Equals("-TracePath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var verbose = args.Any(s3 => s3.Equals("-Verbose", StringComparison.OrdinalIgnoreCase));
                var warning = args.Any(s3 => s3.Equals("-Warning", StringComparison.OrdinalIgnoreCase)) || query;
                traceSource.Listeners.Add(new TextWriterTraceListener(Console.Error) { TraceOutputOptions = TraceOptions.DateTime | TraceOptions.ThreadId });
                if (tracePath != null) traceSource.Listeners.Add(new TextWriterTraceListener(new StreamWriter(tracePath, true) { AutoFlush = true }) { TraceOutputOptions = TraceOptions.DateTime | TraceOptions.ThreadId });
                FolioBulkCopyContext.traceSource.Listeners.AddRange(traceSource.Listeners);
                FolioDapperContext.traceSource.Listeners.AddRange(traceSource.Listeners);
                FolioServiceClient.traceSource.Listeners.AddRange(traceSource.Listeners);
                traceSource.Switch.Level = FolioBulkCopyContext.traceSource.Switch.Level = FolioDapperContext.traceSource.Switch.Level = FolioServiceClient.traceSource.Switch.Level = verbose ? SourceLevels.Verbose : warning ? SourceLevels.Warning : SourceLevels.Information;
                traceSource.TraceEvent(TraceEventType.Information, 0, "Starting");
                Initialize();
                if (args.Length == 0)
                {
                    traceSource.TraceEvent(TraceEventType.Critical, 0, "Usage: folio [-All] [-Api] [-Compress] [-Connection <string>] [-ConnectionString <string>] [-Delete] [-Disable] [-Force] [-Load] [-OrderBy <string>] [-Path <string>] [-Query] [-Save] [-Select <string>] [-Skip <int>] [-Take <int>] [-Threads <int>] [-Update] [-Validate] [-Verbose] [-Warning] [-WhatIf] [-Where <string>] [-AllAgreements] [-AllCirculation] [-AllConfiguration] [-AllFees] [-AllFinance] [-AllInventory] [-AllInvoices] [-AllLogin] [-AllNotes] [-AllOrders] [-AllOrganizations] [-AllPermissions] [-AllSource] [-AllTemplates] [-AllUsers] [-AcquisitionMethods] [-AcquisitionMethodsPath <string>] [-AcquisitionMethodsWhere <string>] [-AcquisitionsUnits] [-AcquisitionsUnitsPath <string>] [-AcquisitionsUnitsWhere <string>] [-ActualCostRecords] [-ActualCostRecordsPath <string>] [-ActualCostRecordsWhere <string>] [-AddressTypes] [-AddressTypesPath <string>] [-AddressTypesWhere <string>] [-Agreements] [-AgreementsPath <string>] [-AgreementsWhere <string>] [-AgreementItems] [-AgreementItemsPath <string>] [-AgreementItemsWhere <string>] [-Alerts] [-AlertsPath <string>] [-AlertsWhere <string>] [-AlternativeTitleTypes] [-AlternativeTitleTypesPath <string>] [-AlternativeTitleTypesWhere <string>] [-BatchGroups] [-BatchGroupsPath <string>] [-BatchGroupsWhere <string>] [-Blocks] [-BlocksPath <string>] [-BlocksWhere <string>] [-BlockConditions] [-BlockConditionsPath <string>] [-BlockConditionsWhere <string>] [-BlockLimits] [-BlockLimitsPath <string>] [-BlockLimitsWhere <string>] [-BoundWithParts] [-BoundWithPartsPath <string>] [-BoundWithPartsWhere <string>] [-Budgets] [-BudgetsPath <string>] [-BudgetsWhere <string>] [-BudgetExpenseClasses] [-BudgetExpenseClassesPath <string>] [-BudgetExpenseClassesWhere <string>] [-BudgetGroups] [-BudgetGroupsPath <string>] [-BudgetGroupsWhere <string>] [-CallNumberTypes] [-CallNumberTypesPath <string>] [-CallNumberTypesWhere <string>] [-Campuses] [-CampusesPath <string>] [-CampusesWhere <string>] [-CancellationReasons] [-CancellationReasonsPath <string>] [-CancellationReasonsWhere <string>] [-Categories] [-CategoriesPath <string>] [-CategoriesWhere <string>] [-CheckIns] [-CheckInsPath <string>] [-CheckInsWhere <string>] [-CirculationRules] [-CirculationRulesPath <string>] [-CirculationRulesWhere <string>] [-ClassificationTypes] [-ClassificationTypesPath <string>] [-ClassificationTypesWhere <string>] [-CloseReasons] [-CloseReasonsPath <string>] [-CloseReasonsWhere <string>] [-Comments] [-CommentsPath <string>] [-CommentsWhere <string>] [-Configurations] [-ConfigurationsPath <string>] [-ConfigurationsWhere <string>] [-Contacts] [-ContactsPath <string>] [-ContactsWhere <string>] [-ContributorNameTypes] [-ContributorNameTypesPath <string>] [-ContributorNameTypesWhere <string>] [-ContributorTypes] [-ContributorTypesPath <string>] [-ContributorTypesWhere <string>] [-CustomFields] [-CustomFieldsPath <string>] [-CustomFieldsWhere <string>] [-Departments] [-DepartmentsPath <string>] [-DepartmentsWhere <string>] [-ElectronicAccessRelationships] [-ElectronicAccessRelationshipsPath <string>] [-ElectronicAccessRelationshipsWhere <string>] [-ExpenseClasses] [-ExpenseClassesPath <string>] [-ExpenseClassesWhere <string>] [-Fees] [-FeesPath <string>] [-FeesWhere <string>] [-FeeTypes] [-FeeTypesPath <string>] [-FeeTypesWhere <string>] [-FinanceGroups] [-FinanceGroupsPath <string>] [-FinanceGroupsWhere <string>] [-FiscalYears] [-FiscalYearsPath <string>] [-FiscalYearsWhere <string>] [-FixedDueDateSchedules] [-FixedDueDateSchedulesPath <string>] [-FixedDueDateSchedulesWhere <string>] [-Funds] [-FundsPath <string>] [-FundsWhere <string>] [-FundTypes] [-FundTypesPath <string>] [-FundTypesWhere <string>] [-Groups] [-GroupsPath <string>] [-GroupsWhere <string>] [-Holdings] [-HoldingsPath <string>] [-HoldingsWhere <string>] [-HoldingNoteTypes] [-HoldingNoteTypesPath <string>] [-HoldingNoteTypesWhere <string>] [-HoldingTypes] [-HoldingTypesPath <string>] [-HoldingTypesWhere <string>] [-HridSettings] [-HridSettingsPath <string>] [-HridSettingsWhere <string>] [-IdTypes] [-IdTypesPath <string>] [-IdTypesWhere <string>] [-IllPolicies] [-IllPoliciesPath <string>] [-IllPoliciesWhere <string>] [-Instances] [-InstancesPath <string>] [-InstancesWhere <string>] [-InstanceFormats] [-InstanceFormatsPath <string>] [-InstanceFormatsWhere <string>] [-InstanceNoteTypes] [-InstanceNoteTypesPath <string>] [-InstanceNoteTypesWhere <string>] [-InstanceRelationships] [-InstanceRelationshipsPath <string>] [-InstanceRelationshipsWhere <string>] [-InstanceRelationshipTypes] [-InstanceRelationshipTypesPath <string>] [-InstanceRelationshipTypesWhere <string>] [-InstanceStatuses] [-InstanceStatusesPath <string>] [-InstanceStatusesWhere <string>] [-InstanceTypes] [-InstanceTypesPath <string>] [-InstanceTypesWhere <string>] [-Institutions] [-InstitutionsPath <string>] [-InstitutionsWhere <string>] [-Interfaces] [-InterfacesPath <string>] [-InterfacesWhere <string>] [-InterfaceCredentials] [-InterfaceCredentialsPath <string>] [-InterfaceCredentialsWhere <string>] [-Invoices] [-InvoicesPath <string>] [-InvoicesWhere <string>] [-InvoiceItems] [-InvoiceItemsPath <string>] [-InvoiceItemsWhere <string>] [-Items] [-ItemsPath <string>] [-ItemsWhere <string>] [-ItemDamagedStatuses] [-ItemDamagedStatusesPath <string>] [-ItemDamagedStatusesWhere <string>] [-ItemNoteTypes] [-ItemNoteTypesPath <string>] [-ItemNoteTypesWhere <string>] [-Ledgers] [-LedgersPath <string>] [-LedgersWhere <string>] [-Libraries] [-LibrariesPath <string>] [-LibrariesWhere <string>] [-Loans] [-LoansPath <string>] [-LoansWhere <string>] [-LoanEvents] [-LoanEventsPath <string>] [-LoanEventsWhere <string>] [-LoanPolicies] [-LoanPoliciesPath <string>] [-LoanPoliciesWhere <string>] [-LoanTypes] [-LoanTypesPath <string>] [-LoanTypesWhere <string>] [-Locations] [-LocationsPath <string>] [-LocationsWhere <string>] [-Logins] [-LoginsPath <string>] [-LoginsWhere <string>] [-LostItemFeePolicies] [-LostItemFeePoliciesPath <string>] [-LostItemFeePoliciesWhere <string>] [-ManualBlockTemplates] [-ManualBlockTemplatesPath <string>] [-ManualBlockTemplatesWhere <string>] [-MaterialTypes] [-MaterialTypesPath <string>] [-MaterialTypesWhere <string>] [-ModeOfIssuances] [-ModeOfIssuancesPath <string>] [-ModeOfIssuancesWhere <string>] [-NatureOfContentTerms] [-NatureOfContentTermsPath <string>] [-NatureOfContentTermsWhere <string>] [-Notes] [-NotesPath <string>] [-NotesWhere <string>] [-NoteTypes] [-NoteTypesPath <string>] [-NoteTypesWhere <string>] [-Orders] [-OrdersPath <string>] [-OrdersWhere <string>] [-OrderInvoices] [-OrderInvoicesPath <string>] [-OrderInvoicesWhere <string>] [-OrderItems] [-OrderItemsPath <string>] [-OrderItemsWhere <string>] [-OrderTemplates] [-OrderTemplatesPath <string>] [-OrderTemplatesWhere <string>] [-Organizations] [-OrganizationsPath <string>] [-OrganizationsWhere <string>] [-OverdueFinePolicies] [-OverdueFinePoliciesPath <string>] [-OverdueFinePoliciesWhere <string>] [-Owners] [-OwnersPath <string>] [-OwnersWhere <string>] [-PatronActionSessions] [-PatronActionSessionsPath <string>] [-PatronActionSessionsWhere <string>] [-PatronNoticePolicies] [-PatronNoticePoliciesPath <string>] [-PatronNoticePoliciesWhere <string>] [-Payments] [-PaymentsPath <string>] [-PaymentsWhere <string>] [-PaymentMethods] [-PaymentMethodsPath <string>] [-PaymentMethodsWhere <string>] [-Permissions] [-PermissionsPath <string>] [-PermissionsWhere <string>] [-PermissionsUsers] [-PermissionsUsersPath <string>] [-PermissionsUsersWhere <string>] [-PrecedingSucceedingTitles] [-PrecedingSucceedingTitlesPath <string>] [-PrecedingSucceedingTitlesWhere <string>] [-Prefixes] [-PrefixesPath <string>] [-PrefixesWhere <string>] [-Proxies] [-ProxiesPath <string>] [-ProxiesWhere <string>] [-Receivings] [-ReceivingsPath <string>] [-ReceivingsWhere <string>] [-Records] [-RecordsPath <string>] [-RecordsWhere <string>] [-ReferenceDatas] [-ReferenceDatasPath <string>] [-ReferenceDatasWhere <string>] [-RefundReasons] [-RefundReasonsPath <string>] [-RefundReasonsWhere <string>] [-ReportingCodes] [-ReportingCodesPath <string>] [-ReportingCodesWhere <string>] [-Requests] [-RequestsPath <string>] [-RequestsWhere <string>] [-RequestPolicies] [-RequestPoliciesPath <string>] [-RequestPoliciesWhere <string>] [-Rollovers] [-RolloversPath <string>] [-RolloversWhere <string>] [-RolloverBudgets] [-RolloverBudgetsPath <string>] [-RolloverBudgetsWhere <string>] [-RolloverErrors] [-RolloverErrorsPath <string>] [-RolloverErrorsWhere <string>] [-RolloverProgresses] [-RolloverProgressesPath <string>] [-RolloverProgressesWhere <string>] [-ScheduledNotices] [-ScheduledNoticesPath <string>] [-ScheduledNoticesWhere <string>] [-ServicePoints] [-ServicePointsPath <string>] [-ServicePointsWhere <string>] [-ServicePointUsers] [-ServicePointUsersPath <string>] [-ServicePointUsersWhere <string>] [-Snapshots] [-SnapshotsPath <string>] [-SnapshotsWhere <string>] [-Sources] [-SourcesPath <string>] [-SourcesWhere <string>] [-StaffSlips] [-StaffSlipsPath <string>] [-StaffSlipsWhere <string>] [-StatisticalCodes] [-StatisticalCodesPath <string>] [-StatisticalCodesWhere <string>] [-StatisticalCodeTypes] [-StatisticalCodeTypesPath <string>] [-StatisticalCodeTypesWhere <string>] [-Suffixes] [-SuffixesPath <string>] [-SuffixesWhere <string>] [-Templates] [-TemplatesPath <string>] [-TemplatesWhere <string>] [-Titles] [-TitlesPath <string>] [-TitlesWhere <string>] [-Transactions] [-TransactionsPath <string>] [-TransactionsWhere <string>] [-TransferAccounts] [-TransferAccountsPath <string>] [-TransferAccountsWhere <string>] [-TransferCriterias] [-TransferCriteriasPath <string>] [-TransferCriteriasWhere <string>] [-Users] [-UsersPath <string>] [-UsersWhere <string>] [-UserAcquisitionsUnits] [-UserAcquisitionsUnitsPath <string>] [-UserAcquisitionsUnitsWhere <string>] [-UserRequestPreferences] [-UserRequestPreferencesPath <string>] [-UserRequestPreferencesWhere <string>] [-UserSummaries] [-UserSummariesPath <string>] [-UserSummariesWhere <string>] [-Vouchers] [-VouchersPath <string>] [-VouchersWhere <string>] [-VoucherItems] [-VoucherItemsPath <string>] [-VoucherItemsWhere <string>] [-WaiveReasons] [-WaiveReasonsPath <string>] [-WaiveReasonsWhere <string>]");
                    return -1;
                }
                var all = args.Any(s3 => s3.Equals("-All", StringComparison.OrdinalIgnoreCase));
                api = args.Any(s3 => s3.Equals("-Api", StringComparison.OrdinalIgnoreCase));
                compress = args.Any(s3 => s3.Equals("-Compress", StringComparison.OrdinalIgnoreCase));
                var connection = args.SkipWhile(s3 => !s3.Equals("-Connection", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                connectionString = args.SkipWhile(s3 => !s3.Equals("-ConnectionString", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault() ?? ConfigurationManager.ConnectionStrings[connection]?.ConnectionString ?? ConfigurationManager.ConnectionStrings[api ? "FolioServiceClient" : "FolioContext"]?.ConnectionString ?? ConfigurationManager.ConnectionStrings[api ? "FolioContext" : "FolioServiceClient"]?.ConnectionString;
                if (connectionString == null) throw new ArgumentNullException(nameof(connectionString));
                traceSource.TraceEvent(TraceEventType.Verbose, 0, Regex.Replace(connectionString, "(password=).+", "$1…", RegexOptions.IgnoreCase));
                api = connectionString.StartsWith("http");
                var delete = args.Any(s3 => s3.Equals("-Delete", StringComparison.OrdinalIgnoreCase));
                var disable = args.Any(s3 => s3.Equals("-Disable", StringComparison.OrdinalIgnoreCase));
                force = args.Any(s3 => s3.Equals("-Force", StringComparison.OrdinalIgnoreCase));
                var import = args.Any(s3 => s3.Equals("-Import", StringComparison.OrdinalIgnoreCase));
                var load = args.Any(s3 => s3.Equals("-Load", StringComparison.OrdinalIgnoreCase));
                var merge = args.Any(s3 => s3.Equals("-Merge", StringComparison.OrdinalIgnoreCase));
                if (args.Any(s3 => s3.Equals("-NoDateTimeParse", StringComparison.OrdinalIgnoreCase))) FolioDapperContext.LocalTimeJsonSerializationSettings.DateParseHandling = DateParseHandling.None;
                orderBy = args.SkipWhile(s3 => !s3.Equals("-OrderBy", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var path = args.SkipWhile(s3 => !s3.Equals("-Path", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault() ?? ".";
                var save = args.Any(s3 => s3.Equals("-Save", StringComparison.OrdinalIgnoreCase));
                var select = args.SkipWhile(s3 => !s3.Equals("-Select", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                skip = int.TryParse(args.SkipWhile(s3 => !s3.Equals("-Skip", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault(), out int i) ? (int?)i : null;
                var source = args.SkipWhile(s3 => !s3.Equals("-Source", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                take = int.TryParse(args.SkipWhile(s3 => !s3.Equals("-Take", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault(), out i) ? (int?)i : null;
                var threads = int.TryParse(args.SkipWhile(s3 => !s3.Equals("-Threads", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault(), out i) ? (int?)i : null;
                universalTime = args.Any(s3 => s3.Equals("-UniversalTime", StringComparison.OrdinalIgnoreCase) || s3.Equals("-Utc", StringComparison.OrdinalIgnoreCase));
                var update = args.Any(s3 => s3.Equals("-Update", StringComparison.OrdinalIgnoreCase));
                validate = args.Any(s3 => s3.Equals("-Validate", StringComparison.OrdinalIgnoreCase));
                whatIf = args.Any(s3 => s3.Equals("-WhatIf", StringComparison.OrdinalIgnoreCase));
                var where = args.SkipWhile(s3 => !s3.Equals("-Where", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var allAgreements = args.Any(s3 => s3.Equals("-AllAgreements", StringComparison.OrdinalIgnoreCase));
                var allCirculation = args.Any(s3 => s3.Equals("-AllCirculation", StringComparison.OrdinalIgnoreCase));
                var allConfiguration = args.Any(s3 => s3.Equals("-AllConfiguration", StringComparison.OrdinalIgnoreCase));
                var allFees = args.Any(s3 => s3.Equals("-AllFees", StringComparison.OrdinalIgnoreCase));
                var allFinance = args.Any(s3 => s3.Equals("-AllFinance", StringComparison.OrdinalIgnoreCase));
                var allInventory = args.Any(s3 => s3.Equals("-AllInventory", StringComparison.OrdinalIgnoreCase));
                var allInvoices = args.Any(s3 => s3.Equals("-AllInvoices", StringComparison.OrdinalIgnoreCase));
                var allLogin = args.Any(s3 => s3.Equals("-AllLogin", StringComparison.OrdinalIgnoreCase));
                var allNotes = args.Any(s3 => s3.Equals("-AllNotes", StringComparison.OrdinalIgnoreCase));
                var allOrders = args.Any(s3 => s3.Equals("-AllOrders", StringComparison.OrdinalIgnoreCase));
                var allOrganizations = args.Any(s3 => s3.Equals("-AllOrganizations", StringComparison.OrdinalIgnoreCase));
                var allPermissions = args.Any(s3 => s3.Equals("-AllPermissions", StringComparison.OrdinalIgnoreCase));
                var allSource = args.Any(s3 => s3.Equals("-AllSource", StringComparison.OrdinalIgnoreCase));
                var allTemplates = args.Any(s3 => s3.Equals("-AllTemplates", StringComparison.OrdinalIgnoreCase));
                var allUsers = args.Any(s3 => s3.Equals("-AllUsers", StringComparison.OrdinalIgnoreCase));
                var acquisitionMethods = args.Any(s3 => s3.Equals("-AcquisitionMethods", StringComparison.OrdinalIgnoreCase));
                var acquisitionsUnits = args.Any(s3 => s3.Equals("-AcquisitionsUnits", StringComparison.OrdinalIgnoreCase));
                var actualCostRecords = args.Any(s3 => s3.Equals("-ActualCostRecords", StringComparison.OrdinalIgnoreCase));
                var addressTypes = args.Any(s3 => s3.Equals("-AddressTypes", StringComparison.OrdinalIgnoreCase));
                var agreements = args.Any(s3 => s3.Equals("-Agreements", StringComparison.OrdinalIgnoreCase));
                var agreementItems = args.Any(s3 => s3.Equals("-AgreementItems", StringComparison.OrdinalIgnoreCase));
                var alerts = args.Any(s3 => s3.Equals("-Alerts", StringComparison.OrdinalIgnoreCase));
                var alternativeTitleTypes = args.Any(s3 => s3.Equals("-AlternativeTitleTypes", StringComparison.OrdinalIgnoreCase));
                var batchGroups = args.Any(s3 => s3.Equals("-BatchGroups", StringComparison.OrdinalIgnoreCase));
                var blocks = args.Any(s3 => s3.Equals("-Blocks", StringComparison.OrdinalIgnoreCase));
                var blockConditions = args.Any(s3 => s3.Equals("-BlockConditions", StringComparison.OrdinalIgnoreCase));
                var blockLimits = args.Any(s3 => s3.Equals("-BlockLimits", StringComparison.OrdinalIgnoreCase));
                var boundWithParts = args.Any(s3 => s3.Equals("-BoundWithParts", StringComparison.OrdinalIgnoreCase));
                var budgets = args.Any(s3 => s3.Equals("-Budgets", StringComparison.OrdinalIgnoreCase));
                var budgetExpenseClasses = args.Any(s3 => s3.Equals("-BudgetExpenseClasses", StringComparison.OrdinalIgnoreCase));
                var budgetGroups = args.Any(s3 => s3.Equals("-BudgetGroups", StringComparison.OrdinalIgnoreCase));
                var callNumberTypes = args.Any(s3 => s3.Equals("-CallNumberTypes", StringComparison.OrdinalIgnoreCase));
                var campuses = args.Any(s3 => s3.Equals("-Campuses", StringComparison.OrdinalIgnoreCase));
                var cancellationReasons = args.Any(s3 => s3.Equals("-CancellationReasons", StringComparison.OrdinalIgnoreCase));
                var categories = args.Any(s3 => s3.Equals("-Categories", StringComparison.OrdinalIgnoreCase));
                var checkIns = args.Any(s3 => s3.Equals("-CheckIns", StringComparison.OrdinalIgnoreCase));
                var circulationRules = args.Any(s3 => s3.Equals("-CirculationRules", StringComparison.OrdinalIgnoreCase));
                var classificationTypes = args.Any(s3 => s3.Equals("-ClassificationTypes", StringComparison.OrdinalIgnoreCase));
                var closeReasons = args.Any(s3 => s3.Equals("-CloseReasons", StringComparison.OrdinalIgnoreCase));
                var comments = args.Any(s3 => s3.Equals("-Comments", StringComparison.OrdinalIgnoreCase));
                var configurations = args.Any(s3 => s3.Equals("-Configurations", StringComparison.OrdinalIgnoreCase));
                var contacts = args.Any(s3 => s3.Equals("-Contacts", StringComparison.OrdinalIgnoreCase));
                var contributorNameTypes = args.Any(s3 => s3.Equals("-ContributorNameTypes", StringComparison.OrdinalIgnoreCase));
                var contributorTypes = args.Any(s3 => s3.Equals("-ContributorTypes", StringComparison.OrdinalIgnoreCase));
                var customFields = args.Any(s3 => s3.Equals("-CustomFields", StringComparison.OrdinalIgnoreCase));
                var departments = args.Any(s3 => s3.Equals("-Departments", StringComparison.OrdinalIgnoreCase));
                var electronicAccessRelationships = args.Any(s3 => s3.Equals("-ElectronicAccessRelationships", StringComparison.OrdinalIgnoreCase));
                var expenseClasses = args.Any(s3 => s3.Equals("-ExpenseClasses", StringComparison.OrdinalIgnoreCase));
                var fees = args.Any(s3 => s3.Equals("-Fees", StringComparison.OrdinalIgnoreCase));
                var feeTypes = args.Any(s3 => s3.Equals("-FeeTypes", StringComparison.OrdinalIgnoreCase));
                var financeGroups = args.Any(s3 => s3.Equals("-FinanceGroups", StringComparison.OrdinalIgnoreCase));
                var fiscalYears = args.Any(s3 => s3.Equals("-FiscalYears", StringComparison.OrdinalIgnoreCase));
                var fixedDueDateSchedules = args.Any(s3 => s3.Equals("-FixedDueDateSchedules", StringComparison.OrdinalIgnoreCase));
                var funds = args.Any(s3 => s3.Equals("-Funds", StringComparison.OrdinalIgnoreCase));
                var fundTypes = args.Any(s3 => s3.Equals("-FundTypes", StringComparison.OrdinalIgnoreCase));
                var groups = args.Any(s3 => s3.Equals("-Groups", StringComparison.OrdinalIgnoreCase));
                var holdings = args.Any(s3 => s3.Equals("-Holdings", StringComparison.OrdinalIgnoreCase));
                var holdingNoteTypes = args.Any(s3 => s3.Equals("-HoldingNoteTypes", StringComparison.OrdinalIgnoreCase));
                var holdingTypes = args.Any(s3 => s3.Equals("-HoldingTypes", StringComparison.OrdinalIgnoreCase));
                var hridSettings = args.Any(s3 => s3.Equals("-HridSettings", StringComparison.OrdinalIgnoreCase));
                var idTypes = args.Any(s3 => s3.Equals("-IdTypes", StringComparison.OrdinalIgnoreCase));
                var illPolicies = args.Any(s3 => s3.Equals("-IllPolicies", StringComparison.OrdinalIgnoreCase));
                var instances = args.Any(s3 => s3.Equals("-Instances", StringComparison.OrdinalIgnoreCase));
                var instanceFormats = args.Any(s3 => s3.Equals("-InstanceFormats", StringComparison.OrdinalIgnoreCase));
                var instanceNoteTypes = args.Any(s3 => s3.Equals("-InstanceNoteTypes", StringComparison.OrdinalIgnoreCase));
                var instanceRelationships = args.Any(s3 => s3.Equals("-InstanceRelationships", StringComparison.OrdinalIgnoreCase));
                var instanceRelationshipTypes = args.Any(s3 => s3.Equals("-InstanceRelationshipTypes", StringComparison.OrdinalIgnoreCase));
                var instanceStatuses = args.Any(s3 => s3.Equals("-InstanceStatuses", StringComparison.OrdinalIgnoreCase));
                var instanceTypes = args.Any(s3 => s3.Equals("-InstanceTypes", StringComparison.OrdinalIgnoreCase));
                var institutions = args.Any(s3 => s3.Equals("-Institutions", StringComparison.OrdinalIgnoreCase));
                var interfaces = args.Any(s3 => s3.Equals("-Interfaces", StringComparison.OrdinalIgnoreCase));
                var interfaceCredentials = args.Any(s3 => s3.Equals("-InterfaceCredentials", StringComparison.OrdinalIgnoreCase));
                var invoices = args.Any(s3 => s3.Equals("-Invoices", StringComparison.OrdinalIgnoreCase));
                var invoiceItems = args.Any(s3 => s3.Equals("-InvoiceItems", StringComparison.OrdinalIgnoreCase));
                var items = args.Any(s3 => s3.Equals("-Items", StringComparison.OrdinalIgnoreCase));
                var itemDamagedStatuses = args.Any(s3 => s3.Equals("-ItemDamagedStatuses", StringComparison.OrdinalIgnoreCase));
                var itemNoteTypes = args.Any(s3 => s3.Equals("-ItemNoteTypes", StringComparison.OrdinalIgnoreCase));
                var ledgers = args.Any(s3 => s3.Equals("-Ledgers", StringComparison.OrdinalIgnoreCase));
                var libraries = args.Any(s3 => s3.Equals("-Libraries", StringComparison.OrdinalIgnoreCase));
                var loans = args.Any(s3 => s3.Equals("-Loans", StringComparison.OrdinalIgnoreCase));
                var loanEvents = args.Any(s3 => s3.Equals("-LoanEvents", StringComparison.OrdinalIgnoreCase));
                var loanPolicies = args.Any(s3 => s3.Equals("-LoanPolicies", StringComparison.OrdinalIgnoreCase));
                var loanTypes = args.Any(s3 => s3.Equals("-LoanTypes", StringComparison.OrdinalIgnoreCase));
                var locations = args.Any(s3 => s3.Equals("-Locations", StringComparison.OrdinalIgnoreCase));
                var logins = args.Any(s3 => s3.Equals("-Logins", StringComparison.OrdinalIgnoreCase));
                var lostItemFeePolicies = args.Any(s3 => s3.Equals("-LostItemFeePolicies", StringComparison.OrdinalIgnoreCase));
                var manualBlockTemplates = args.Any(s3 => s3.Equals("-ManualBlockTemplates", StringComparison.OrdinalIgnoreCase));
                var materialTypes = args.Any(s3 => s3.Equals("-MaterialTypes", StringComparison.OrdinalIgnoreCase));
                var modeOfIssuances = args.Any(s3 => s3.Equals("-ModeOfIssuances", StringComparison.OrdinalIgnoreCase));
                var natureOfContentTerms = args.Any(s3 => s3.Equals("-NatureOfContentTerms", StringComparison.OrdinalIgnoreCase));
                var notes = args.Any(s3 => s3.Equals("-Notes", StringComparison.OrdinalIgnoreCase));
                var noteTypes = args.Any(s3 => s3.Equals("-NoteTypes", StringComparison.OrdinalIgnoreCase));
                var orders = args.Any(s3 => s3.Equals("-Orders", StringComparison.OrdinalIgnoreCase));
                var orderInvoices = args.Any(s3 => s3.Equals("-OrderInvoices", StringComparison.OrdinalIgnoreCase));
                var orderItems = args.Any(s3 => s3.Equals("-OrderItems", StringComparison.OrdinalIgnoreCase));
                var orderTemplates = args.Any(s3 => s3.Equals("-OrderTemplates", StringComparison.OrdinalIgnoreCase));
                var organizations = args.Any(s3 => s3.Equals("-Organizations", StringComparison.OrdinalIgnoreCase));
                var overdueFinePolicies = args.Any(s3 => s3.Equals("-OverdueFinePolicies", StringComparison.OrdinalIgnoreCase));
                var owners = args.Any(s3 => s3.Equals("-Owners", StringComparison.OrdinalIgnoreCase));
                var patronActionSessions = args.Any(s3 => s3.Equals("-PatronActionSessions", StringComparison.OrdinalIgnoreCase));
                var patronNoticePolicies = args.Any(s3 => s3.Equals("-PatronNoticePolicies", StringComparison.OrdinalIgnoreCase));
                var payments = args.Any(s3 => s3.Equals("-Payments", StringComparison.OrdinalIgnoreCase));
                var paymentMethods = args.Any(s3 => s3.Equals("-PaymentMethods", StringComparison.OrdinalIgnoreCase));
                var permissions = args.Any(s3 => s3.Equals("-Permissions", StringComparison.OrdinalIgnoreCase));
                var permissionsUsers = args.Any(s3 => s3.Equals("-PermissionsUsers", StringComparison.OrdinalIgnoreCase));
                var precedingSucceedingTitles = args.Any(s3 => s3.Equals("-PrecedingSucceedingTitles", StringComparison.OrdinalIgnoreCase));
                var prefixes = args.Any(s3 => s3.Equals("-Prefixes", StringComparison.OrdinalIgnoreCase));
                var proxies = args.Any(s3 => s3.Equals("-Proxies", StringComparison.OrdinalIgnoreCase));
                var receivings = args.Any(s3 => s3.Equals("-Receivings", StringComparison.OrdinalIgnoreCase));
                var records = args.Any(s3 => s3.Equals("-Records", StringComparison.OrdinalIgnoreCase));
                var referenceDatas = args.Any(s3 => s3.Equals("-ReferenceDatas", StringComparison.OrdinalIgnoreCase));
                var refundReasons = args.Any(s3 => s3.Equals("-RefundReasons", StringComparison.OrdinalIgnoreCase));
                var reportingCodes = args.Any(s3 => s3.Equals("-ReportingCodes", StringComparison.OrdinalIgnoreCase));
                var requests = args.Any(s3 => s3.Equals("-Requests", StringComparison.OrdinalIgnoreCase));
                var requestPolicies = args.Any(s3 => s3.Equals("-RequestPolicies", StringComparison.OrdinalIgnoreCase));
                var rollovers = args.Any(s3 => s3.Equals("-Rollovers", StringComparison.OrdinalIgnoreCase));
                var rolloverBudgets = args.Any(s3 => s3.Equals("-RolloverBudgets", StringComparison.OrdinalIgnoreCase));
                var rolloverErrors = args.Any(s3 => s3.Equals("-RolloverErrors", StringComparison.OrdinalIgnoreCase));
                var rolloverProgresses = args.Any(s3 => s3.Equals("-RolloverProgresses", StringComparison.OrdinalIgnoreCase));
                var scheduledNotices = args.Any(s3 => s3.Equals("-ScheduledNotices", StringComparison.OrdinalIgnoreCase));
                var servicePoints = args.Any(s3 => s3.Equals("-ServicePoints", StringComparison.OrdinalIgnoreCase));
                var servicePointUsers = args.Any(s3 => s3.Equals("-ServicePointUsers", StringComparison.OrdinalIgnoreCase));
                var snapshots = args.Any(s3 => s3.Equals("-Snapshots", StringComparison.OrdinalIgnoreCase));
                var sources = args.Any(s3 => s3.Equals("-Sources", StringComparison.OrdinalIgnoreCase));
                var staffSlips = args.Any(s3 => s3.Equals("-StaffSlips", StringComparison.OrdinalIgnoreCase));
                var statisticalCodes = args.Any(s3 => s3.Equals("-StatisticalCodes", StringComparison.OrdinalIgnoreCase));
                var statisticalCodeTypes = args.Any(s3 => s3.Equals("-StatisticalCodeTypes", StringComparison.OrdinalIgnoreCase));
                var suffixes = args.Any(s3 => s3.Equals("-Suffixes", StringComparison.OrdinalIgnoreCase));
                var templates = args.Any(s3 => s3.Equals("-Templates", StringComparison.OrdinalIgnoreCase));
                var titles = args.Any(s3 => s3.Equals("-Titles", StringComparison.OrdinalIgnoreCase));
                var transactions = args.Any(s3 => s3.Equals("-Transactions", StringComparison.OrdinalIgnoreCase));
                var transferAccounts = args.Any(s3 => s3.Equals("-TransferAccounts", StringComparison.OrdinalIgnoreCase));
                var transferCriterias = args.Any(s3 => s3.Equals("-TransferCriterias", StringComparison.OrdinalIgnoreCase));
                var users = args.Any(s3 => s3.Equals("-Users", StringComparison.OrdinalIgnoreCase));
                var userAcquisitionsUnits = args.Any(s3 => s3.Equals("-UserAcquisitionsUnits", StringComparison.OrdinalIgnoreCase));
                var userRequestPreferences = args.Any(s3 => s3.Equals("-UserRequestPreferences", StringComparison.OrdinalIgnoreCase));
                var userSummaries = args.Any(s3 => s3.Equals("-UserSummaries", StringComparison.OrdinalIgnoreCase));
                var vouchers = args.Any(s3 => s3.Equals("-Vouchers", StringComparison.OrdinalIgnoreCase));
                var voucherItems = args.Any(s3 => s3.Equals("-VoucherItems", StringComparison.OrdinalIgnoreCase));
                var waiveReasons = args.Any(s3 => s3.Equals("-WaiveReasons", StringComparison.OrdinalIgnoreCase));
                var acquisitionMethodsPath = args.SkipWhile(s3 => !s3.Equals("-AcquisitionMethodsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var acquisitionsUnitsPath = args.SkipWhile(s3 => !s3.Equals("-AcquisitionsUnitsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var actualCostRecordsPath = args.SkipWhile(s3 => !s3.Equals("-ActualCostRecordsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var addressTypesPath = args.SkipWhile(s3 => !s3.Equals("-AddressTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var agreementsPath = args.SkipWhile(s3 => !s3.Equals("-AgreementsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var agreementItemsPath = args.SkipWhile(s3 => !s3.Equals("-AgreementItemsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var alertsPath = args.SkipWhile(s3 => !s3.Equals("-AlertsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var alternativeTitleTypesPath = args.SkipWhile(s3 => !s3.Equals("-AlternativeTitleTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var batchGroupsPath = args.SkipWhile(s3 => !s3.Equals("-BatchGroupsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var blocksPath = args.SkipWhile(s3 => !s3.Equals("-BlocksPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var blockConditionsPath = args.SkipWhile(s3 => !s3.Equals("-BlockConditionsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var blockLimitsPath = args.SkipWhile(s3 => !s3.Equals("-BlockLimitsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var boundWithPartsPath = args.SkipWhile(s3 => !s3.Equals("-BoundWithPartsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var budgetsPath = args.SkipWhile(s3 => !s3.Equals("-BudgetsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var budgetExpenseClassesPath = args.SkipWhile(s3 => !s3.Equals("-BudgetExpenseClassesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var budgetGroupsPath = args.SkipWhile(s3 => !s3.Equals("-BudgetGroupsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var callNumberTypesPath = args.SkipWhile(s3 => !s3.Equals("-CallNumberTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var campusesPath = args.SkipWhile(s3 => !s3.Equals("-CampusesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var cancellationReasonsPath = args.SkipWhile(s3 => !s3.Equals("-CancellationReasonsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var categoriesPath = args.SkipWhile(s3 => !s3.Equals("-CategoriesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var checkInsPath = args.SkipWhile(s3 => !s3.Equals("-CheckInsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var circulationRulesPath = args.SkipWhile(s3 => !s3.Equals("-CirculationRulesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var classificationTypesPath = args.SkipWhile(s3 => !s3.Equals("-ClassificationTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var closeReasonsPath = args.SkipWhile(s3 => !s3.Equals("-CloseReasonsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var commentsPath = args.SkipWhile(s3 => !s3.Equals("-CommentsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var configurationsPath = args.SkipWhile(s3 => !s3.Equals("-ConfigurationsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var contactsPath = args.SkipWhile(s3 => !s3.Equals("-ContactsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var contributorNameTypesPath = args.SkipWhile(s3 => !s3.Equals("-ContributorNameTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var contributorTypesPath = args.SkipWhile(s3 => !s3.Equals("-ContributorTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var customFieldsPath = args.SkipWhile(s3 => !s3.Equals("-CustomFieldsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var departmentsPath = args.SkipWhile(s3 => !s3.Equals("-DepartmentsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var electronicAccessRelationshipsPath = args.SkipWhile(s3 => !s3.Equals("-ElectronicAccessRelationshipsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var expenseClassesPath = args.SkipWhile(s3 => !s3.Equals("-ExpenseClassesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var feesPath = args.SkipWhile(s3 => !s3.Equals("-FeesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var feeTypesPath = args.SkipWhile(s3 => !s3.Equals("-FeeTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var financeGroupsPath = args.SkipWhile(s3 => !s3.Equals("-FinanceGroupsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fiscalYearsPath = args.SkipWhile(s3 => !s3.Equals("-FiscalYearsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fixedDueDateSchedulesPath = args.SkipWhile(s3 => !s3.Equals("-FixedDueDateSchedulesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fundsPath = args.SkipWhile(s3 => !s3.Equals("-FundsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fundTypesPath = args.SkipWhile(s3 => !s3.Equals("-FundTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var groupsPath = args.SkipWhile(s3 => !s3.Equals("-GroupsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var holdingsPath = args.SkipWhile(s3 => !s3.Equals("-HoldingsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var holdingNoteTypesPath = args.SkipWhile(s3 => !s3.Equals("-HoldingNoteTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var holdingTypesPath = args.SkipWhile(s3 => !s3.Equals("-HoldingTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var hridSettingsPath = args.SkipWhile(s3 => !s3.Equals("-HridSettingsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var idTypesPath = args.SkipWhile(s3 => !s3.Equals("-IdTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var illPoliciesPath = args.SkipWhile(s3 => !s3.Equals("-IllPoliciesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instancesPath = args.SkipWhile(s3 => !s3.Equals("-InstancesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceFormatsPath = args.SkipWhile(s3 => !s3.Equals("-InstanceFormatsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceNoteTypesPath = args.SkipWhile(s3 => !s3.Equals("-InstanceNoteTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceRelationshipsPath = args.SkipWhile(s3 => !s3.Equals("-InstanceRelationshipsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceRelationshipTypesPath = args.SkipWhile(s3 => !s3.Equals("-InstanceRelationshipTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceStatusesPath = args.SkipWhile(s3 => !s3.Equals("-InstanceStatusesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceTypesPath = args.SkipWhile(s3 => !s3.Equals("-InstanceTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var institutionsPath = args.SkipWhile(s3 => !s3.Equals("-InstitutionsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var interfacesPath = args.SkipWhile(s3 => !s3.Equals("-InterfacesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var interfaceCredentialsPath = args.SkipWhile(s3 => !s3.Equals("-InterfaceCredentialsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var invoicesPath = args.SkipWhile(s3 => !s3.Equals("-InvoicesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var invoiceItemsPath = args.SkipWhile(s3 => !s3.Equals("-InvoiceItemsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var itemsPath = args.SkipWhile(s3 => !s3.Equals("-ItemsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var itemDamagedStatusesPath = args.SkipWhile(s3 => !s3.Equals("-ItemDamagedStatusesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var itemNoteTypesPath = args.SkipWhile(s3 => !s3.Equals("-ItemNoteTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var ledgersPath = args.SkipWhile(s3 => !s3.Equals("-LedgersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var librariesPath = args.SkipWhile(s3 => !s3.Equals("-LibrariesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loansPath = args.SkipWhile(s3 => !s3.Equals("-LoansPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loanEventsPath = args.SkipWhile(s3 => !s3.Equals("-LoanEventsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loanPoliciesPath = args.SkipWhile(s3 => !s3.Equals("-LoanPoliciesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loanTypesPath = args.SkipWhile(s3 => !s3.Equals("-LoanTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var locationsPath = args.SkipWhile(s3 => !s3.Equals("-LocationsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loginsPath = args.SkipWhile(s3 => !s3.Equals("-LoginsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var lostItemFeePoliciesPath = args.SkipWhile(s3 => !s3.Equals("-LostItemFeePoliciesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var manualBlockTemplatesPath = args.SkipWhile(s3 => !s3.Equals("-ManualBlockTemplatesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var materialTypesPath = args.SkipWhile(s3 => !s3.Equals("-MaterialTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var modeOfIssuancesPath = args.SkipWhile(s3 => !s3.Equals("-ModeOfIssuancesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var natureOfContentTermsPath = args.SkipWhile(s3 => !s3.Equals("-NatureOfContentTermsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var notesPath = args.SkipWhile(s3 => !s3.Equals("-NotesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var noteTypesPath = args.SkipWhile(s3 => !s3.Equals("-NoteTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var ordersPath = args.SkipWhile(s3 => !s3.Equals("-OrdersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var orderInvoicesPath = args.SkipWhile(s3 => !s3.Equals("-OrderInvoicesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var orderItemsPath = args.SkipWhile(s3 => !s3.Equals("-OrderItemsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var orderTemplatesPath = args.SkipWhile(s3 => !s3.Equals("-OrderTemplatesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var organizationsPath = args.SkipWhile(s3 => !s3.Equals("-OrganizationsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var overdueFinePoliciesPath = args.SkipWhile(s3 => !s3.Equals("-OverdueFinePoliciesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var ownersPath = args.SkipWhile(s3 => !s3.Equals("-OwnersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var patronActionSessionsPath = args.SkipWhile(s3 => !s3.Equals("-PatronActionSessionsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var patronNoticePoliciesPath = args.SkipWhile(s3 => !s3.Equals("-PatronNoticePoliciesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var paymentsPath = args.SkipWhile(s3 => !s3.Equals("-PaymentsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var paymentMethodsPath = args.SkipWhile(s3 => !s3.Equals("-PaymentMethodsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var permissionsPath = args.SkipWhile(s3 => !s3.Equals("-PermissionsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var permissionsUsersPath = args.SkipWhile(s3 => !s3.Equals("-PermissionsUsersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var precedingSucceedingTitlesPath = args.SkipWhile(s3 => !s3.Equals("-PrecedingSucceedingTitlesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var prefixesPath = args.SkipWhile(s3 => !s3.Equals("-PrefixesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var proxiesPath = args.SkipWhile(s3 => !s3.Equals("-ProxiesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var receivingsPath = args.SkipWhile(s3 => !s3.Equals("-ReceivingsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var recordsPath = args.SkipWhile(s3 => !s3.Equals("-RecordsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var referenceDatasPath = args.SkipWhile(s3 => !s3.Equals("-ReferenceDatasPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var refundReasonsPath = args.SkipWhile(s3 => !s3.Equals("-RefundReasonsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var reportingCodesPath = args.SkipWhile(s3 => !s3.Equals("-ReportingCodesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var requestsPath = args.SkipWhile(s3 => !s3.Equals("-RequestsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var requestPoliciesPath = args.SkipWhile(s3 => !s3.Equals("-RequestPoliciesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloversPath = args.SkipWhile(s3 => !s3.Equals("-RolloversPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloverBudgetsPath = args.SkipWhile(s3 => !s3.Equals("-RolloverBudgetsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloverErrorsPath = args.SkipWhile(s3 => !s3.Equals("-RolloverErrorsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloverProgressesPath = args.SkipWhile(s3 => !s3.Equals("-RolloverProgressesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var scheduledNoticesPath = args.SkipWhile(s3 => !s3.Equals("-ScheduledNoticesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var servicePointsPath = args.SkipWhile(s3 => !s3.Equals("-ServicePointsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var servicePointUsersPath = args.SkipWhile(s3 => !s3.Equals("-ServicePointUsersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var snapshotsPath = args.SkipWhile(s3 => !s3.Equals("-SnapshotsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var sourcesPath = args.SkipWhile(s3 => !s3.Equals("-SourcesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var staffSlipsPath = args.SkipWhile(s3 => !s3.Equals("-StaffSlipsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var statisticalCodesPath = args.SkipWhile(s3 => !s3.Equals("-StatisticalCodesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var statisticalCodeTypesPath = args.SkipWhile(s3 => !s3.Equals("-StatisticalCodeTypesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var suffixesPath = args.SkipWhile(s3 => !s3.Equals("-SuffixesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var templatesPath = args.SkipWhile(s3 => !s3.Equals("-TemplatesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var titlesPath = args.SkipWhile(s3 => !s3.Equals("-TitlesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var transactionsPath = args.SkipWhile(s3 => !s3.Equals("-TransactionsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var transferAccountsPath = args.SkipWhile(s3 => !s3.Equals("-TransferAccountsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var transferCriteriasPath = args.SkipWhile(s3 => !s3.Equals("-TransferCriteriasPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var usersPath = args.SkipWhile(s3 => !s3.Equals("-UsersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var userAcquisitionsUnitsPath = args.SkipWhile(s3 => !s3.Equals("-UserAcquisitionsUnitsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var userRequestPreferencesPath = args.SkipWhile(s3 => !s3.Equals("-UserRequestPreferencesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var userSummariesPath = args.SkipWhile(s3 => !s3.Equals("-UserSummariesPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var vouchersPath = args.SkipWhile(s3 => !s3.Equals("-VouchersPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var voucherItemsPath = args.SkipWhile(s3 => !s3.Equals("-VoucherItemsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var waiveReasonsPath = args.SkipWhile(s3 => !s3.Equals("-WaiveReasonsPath", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                if (acquisitionMethods && acquisitionMethodsPath == null || acquisitionMethodsPath == ".") acquisitionMethodsPath = $"{(path != null ? $"{path}/" : "")}acquisitionmethods.json";
                if (acquisitionsUnits && acquisitionsUnitsPath == null || acquisitionsUnitsPath == ".") acquisitionsUnitsPath = $"{(path != null ? $"{path}/" : "")}acquisitionsunits.json";
                if (actualCostRecords && actualCostRecordsPath == null || actualCostRecordsPath == ".") actualCostRecordsPath = $"{(path != null ? $"{path}/" : "")}actualcostrecords.json";
                if (addressTypes && addressTypesPath == null || addressTypesPath == ".") addressTypesPath = $"{(path != null ? $"{path}/" : "")}addresstypes.json";
                if (agreements && agreementsPath == null || agreementsPath == ".") agreementsPath = $"{(path != null ? $"{path}/" : "")}agreements.json";
                if (agreementItems && agreementItemsPath == null || agreementItemsPath == ".") agreementItemsPath = $"{(path != null ? $"{path}/" : "")}agreementitems.json";
                if (alerts && alertsPath == null || alertsPath == ".") alertsPath = $"{(path != null ? $"{path}/" : "")}alerts.json";
                if (alternativeTitleTypes && alternativeTitleTypesPath == null || alternativeTitleTypesPath == ".") alternativeTitleTypesPath = $"{(path != null ? $"{path}/" : "")}alternativetitletypes.json";
                if (batchGroups && batchGroupsPath == null || batchGroupsPath == ".") batchGroupsPath = $"{(path != null ? $"{path}/" : "")}batchgroups.json";
                if (blocks && blocksPath == null || blocksPath == ".") blocksPath = $"{(path != null ? $"{path}/" : "")}blocks.json";
                if (blockConditions && blockConditionsPath == null || blockConditionsPath == ".") blockConditionsPath = $"{(path != null ? $"{path}/" : "")}blockconditions.json";
                if (blockLimits && blockLimitsPath == null || blockLimitsPath == ".") blockLimitsPath = $"{(path != null ? $"{path}/" : "")}blocklimits.json";
                if (boundWithParts && boundWithPartsPath == null || boundWithPartsPath == ".") boundWithPartsPath = $"{(path != null ? $"{path}/" : "")}boundwithparts.json";
                if (budgets && budgetsPath == null || budgetsPath == ".") budgetsPath = $"{(path != null ? $"{path}/" : "")}budgets.json";
                if (budgetExpenseClasses && budgetExpenseClassesPath == null || budgetExpenseClassesPath == ".") budgetExpenseClassesPath = $"{(path != null ? $"{path}/" : "")}budgetexpenseclasses.json";
                if (budgetGroups && budgetGroupsPath == null || budgetGroupsPath == ".") budgetGroupsPath = $"{(path != null ? $"{path}/" : "")}budgetgroups.json";
                if (callNumberTypes && callNumberTypesPath == null || callNumberTypesPath == ".") callNumberTypesPath = $"{(path != null ? $"{path}/" : "")}callnumbertypes.json";
                if (campuses && campusesPath == null || campusesPath == ".") campusesPath = $"{(path != null ? $"{path}/" : "")}campuses.json";
                if (cancellationReasons && cancellationReasonsPath == null || cancellationReasonsPath == ".") cancellationReasonsPath = $"{(path != null ? $"{path}/" : "")}cancellationreasons.json";
                if (categories && categoriesPath == null || categoriesPath == ".") categoriesPath = $"{(path != null ? $"{path}/" : "")}categories.json";
                if (checkIns && checkInsPath == null || checkInsPath == ".") checkInsPath = $"{(path != null ? $"{path}/" : "")}checkins.json";
                if (circulationRules && circulationRulesPath == null || circulationRulesPath == ".") circulationRulesPath = $"{(path != null ? $"{path}/" : "")}circulationrules.json";
                if (classificationTypes && classificationTypesPath == null || classificationTypesPath == ".") classificationTypesPath = $"{(path != null ? $"{path}/" : "")}classificationtypes.json";
                if (closeReasons && closeReasonsPath == null || closeReasonsPath == ".") closeReasonsPath = $"{(path != null ? $"{path}/" : "")}closereasons.json";
                if (comments && commentsPath == null || commentsPath == ".") commentsPath = $"{(path != null ? $"{path}/" : "")}comments.json";
                if (configurations && configurationsPath == null || configurationsPath == ".") configurationsPath = $"{(path != null ? $"{path}/" : "")}configurations.json";
                if (contacts && contactsPath == null || contactsPath == ".") contactsPath = $"{(path != null ? $"{path}/" : "")}contacts.json";
                if (contributorNameTypes && contributorNameTypesPath == null || contributorNameTypesPath == ".") contributorNameTypesPath = $"{(path != null ? $"{path}/" : "")}contributornametypes.json";
                if (contributorTypes && contributorTypesPath == null || contributorTypesPath == ".") contributorTypesPath = $"{(path != null ? $"{path}/" : "")}contributortypes.json";
                if (customFields && customFieldsPath == null || customFieldsPath == ".") customFieldsPath = $"{(path != null ? $"{path}/" : "")}customfields.json";
                if (departments && departmentsPath == null || departmentsPath == ".") departmentsPath = $"{(path != null ? $"{path}/" : "")}departments.json";
                if (electronicAccessRelationships && electronicAccessRelationshipsPath == null || electronicAccessRelationshipsPath == ".") electronicAccessRelationshipsPath = $"{(path != null ? $"{path}/" : "")}electronicaccessrelationships.json";
                if (expenseClasses && expenseClassesPath == null || expenseClassesPath == ".") expenseClassesPath = $"{(path != null ? $"{path}/" : "")}expenseclasses.json";
                if (fees && feesPath == null || feesPath == ".") feesPath = $"{(path != null ? $"{path}/" : "")}fees.json";
                if (feeTypes && feeTypesPath == null || feeTypesPath == ".") feeTypesPath = $"{(path != null ? $"{path}/" : "")}feetypes.json";
                if (financeGroups && financeGroupsPath == null || financeGroupsPath == ".") financeGroupsPath = $"{(path != null ? $"{path}/" : "")}financegroups.json";
                if (fiscalYears && fiscalYearsPath == null || fiscalYearsPath == ".") fiscalYearsPath = $"{(path != null ? $"{path}/" : "")}fiscalyears.json";
                if (fixedDueDateSchedules && fixedDueDateSchedulesPath == null || fixedDueDateSchedulesPath == ".") fixedDueDateSchedulesPath = $"{(path != null ? $"{path}/" : "")}fixedduedateschedules.json";
                if (funds && fundsPath == null || fundsPath == ".") fundsPath = $"{(path != null ? $"{path}/" : "")}funds.json";
                if (fundTypes && fundTypesPath == null || fundTypesPath == ".") fundTypesPath = $"{(path != null ? $"{path}/" : "")}fundtypes.json";
                if (groups && groupsPath == null || groupsPath == ".") groupsPath = $"{(path != null ? $"{path}/" : "")}groups.json";
                if (holdings && holdingsPath == null || holdingsPath == ".") holdingsPath = $"{(path != null ? $"{path}/" : "")}holdings.json";
                if (holdingNoteTypes && holdingNoteTypesPath == null || holdingNoteTypesPath == ".") holdingNoteTypesPath = $"{(path != null ? $"{path}/" : "")}holdingnotetypes.json";
                if (holdingTypes && holdingTypesPath == null || holdingTypesPath == ".") holdingTypesPath = $"{(path != null ? $"{path}/" : "")}holdingtypes.json";
                if (hridSettings && hridSettingsPath == null || hridSettingsPath == ".") hridSettingsPath = $"{(path != null ? $"{path}/" : "")}hridsettings.json";
                if (idTypes && idTypesPath == null || idTypesPath == ".") idTypesPath = $"{(path != null ? $"{path}/" : "")}idtypes.json";
                if (illPolicies && illPoliciesPath == null || illPoliciesPath == ".") illPoliciesPath = $"{(path != null ? $"{path}/" : "")}illpolicies.json";
                if (instances && instancesPath == null || instancesPath == ".") instancesPath = $"{(path != null ? $"{path}/" : "")}instances.json";
                if (instanceFormats && instanceFormatsPath == null || instanceFormatsPath == ".") instanceFormatsPath = $"{(path != null ? $"{path}/" : "")}instanceformats.json";
                if (instanceNoteTypes && instanceNoteTypesPath == null || instanceNoteTypesPath == ".") instanceNoteTypesPath = $"{(path != null ? $"{path}/" : "")}instancenotetypes.json";
                if (instanceRelationships && instanceRelationshipsPath == null || instanceRelationshipsPath == ".") instanceRelationshipsPath = $"{(path != null ? $"{path}/" : "")}instancerelationships.json";
                if (instanceRelationshipTypes && instanceRelationshipTypesPath == null || instanceRelationshipTypesPath == ".") instanceRelationshipTypesPath = $"{(path != null ? $"{path}/" : "")}instancerelationshiptypes.json";
                if (instanceStatuses && instanceStatusesPath == null || instanceStatusesPath == ".") instanceStatusesPath = $"{(path != null ? $"{path}/" : "")}instancestatuses.json";
                if (instanceTypes && instanceTypesPath == null || instanceTypesPath == ".") instanceTypesPath = $"{(path != null ? $"{path}/" : "")}instancetypes.json";
                if (institutions && institutionsPath == null || institutionsPath == ".") institutionsPath = $"{(path != null ? $"{path}/" : "")}institutions.json";
                if (interfaces && interfacesPath == null || interfacesPath == ".") interfacesPath = $"{(path != null ? $"{path}/" : "")}interfaces.json";
                if (interfaceCredentials && interfaceCredentialsPath == null || interfaceCredentialsPath == ".") interfaceCredentialsPath = $"{(path != null ? $"{path}/" : "")}interfacecredentials.json";
                if (invoices && invoicesPath == null || invoicesPath == ".") invoicesPath = $"{(path != null ? $"{path}/" : "")}invoices.json";
                if (invoiceItems && invoiceItemsPath == null || invoiceItemsPath == ".") invoiceItemsPath = $"{(path != null ? $"{path}/" : "")}invoiceitems.json";
                if (items && itemsPath == null || itemsPath == ".") itemsPath = $"{(path != null ? $"{path}/" : "")}items.json";
                if (itemDamagedStatuses && itemDamagedStatusesPath == null || itemDamagedStatusesPath == ".") itemDamagedStatusesPath = $"{(path != null ? $"{path}/" : "")}itemdamagedstatuses.json";
                if (itemNoteTypes && itemNoteTypesPath == null || itemNoteTypesPath == ".") itemNoteTypesPath = $"{(path != null ? $"{path}/" : "")}itemnotetypes.json";
                if (ledgers && ledgersPath == null || ledgersPath == ".") ledgersPath = $"{(path != null ? $"{path}/" : "")}ledgers.json";
                if (libraries && librariesPath == null || librariesPath == ".") librariesPath = $"{(path != null ? $"{path}/" : "")}libraries.json";
                if (loans && loansPath == null || loansPath == ".") loansPath = $"{(path != null ? $"{path}/" : "")}loans.json";
                if (loanEvents && loanEventsPath == null || loanEventsPath == ".") loanEventsPath = $"{(path != null ? $"{path}/" : "")}loanevents.json";
                if (loanPolicies && loanPoliciesPath == null || loanPoliciesPath == ".") loanPoliciesPath = $"{(path != null ? $"{path}/" : "")}loanpolicies.json";
                if (loanTypes && loanTypesPath == null || loanTypesPath == ".") loanTypesPath = $"{(path != null ? $"{path}/" : "")}loantypes.json";
                if (locations && locationsPath == null || locationsPath == ".") locationsPath = $"{(path != null ? $"{path}/" : "")}locations.json";
                if (logins && loginsPath == null || loginsPath == ".") loginsPath = $"{(path != null ? $"{path}/" : "")}logins.json";
                if (lostItemFeePolicies && lostItemFeePoliciesPath == null || lostItemFeePoliciesPath == ".") lostItemFeePoliciesPath = $"{(path != null ? $"{path}/" : "")}lostitemfeepolicies.json";
                if (manualBlockTemplates && manualBlockTemplatesPath == null || manualBlockTemplatesPath == ".") manualBlockTemplatesPath = $"{(path != null ? $"{path}/" : "")}manualblocktemplates.json";
                if (materialTypes && materialTypesPath == null || materialTypesPath == ".") materialTypesPath = $"{(path != null ? $"{path}/" : "")}materialtypes.json";
                if (modeOfIssuances && modeOfIssuancesPath == null || modeOfIssuancesPath == ".") modeOfIssuancesPath = $"{(path != null ? $"{path}/" : "")}modeofissuances.json";
                if (natureOfContentTerms && natureOfContentTermsPath == null || natureOfContentTermsPath == ".") natureOfContentTermsPath = $"{(path != null ? $"{path}/" : "")}natureofcontentterms.json";
                if (notes && notesPath == null || notesPath == ".") notesPath = $"{(path != null ? $"{path}/" : "")}notes.json";
                if (noteTypes && noteTypesPath == null || noteTypesPath == ".") noteTypesPath = $"{(path != null ? $"{path}/" : "")}notetypes.json";
                if (orders && ordersPath == null || ordersPath == ".") ordersPath = $"{(path != null ? $"{path}/" : "")}orders.json";
                if (orderInvoices && orderInvoicesPath == null || orderInvoicesPath == ".") orderInvoicesPath = $"{(path != null ? $"{path}/" : "")}orderinvoices.json";
                if (orderItems && orderItemsPath == null || orderItemsPath == ".") orderItemsPath = $"{(path != null ? $"{path}/" : "")}orderitems.json";
                if (orderTemplates && orderTemplatesPath == null || orderTemplatesPath == ".") orderTemplatesPath = $"{(path != null ? $"{path}/" : "")}ordertemplates.json";
                if (organizations && organizationsPath == null || organizationsPath == ".") organizationsPath = $"{(path != null ? $"{path}/" : "")}organizations.json";
                if (overdueFinePolicies && overdueFinePoliciesPath == null || overdueFinePoliciesPath == ".") overdueFinePoliciesPath = $"{(path != null ? $"{path}/" : "")}overduefinepolicies.json";
                if (owners && ownersPath == null || ownersPath == ".") ownersPath = $"{(path != null ? $"{path}/" : "")}owners.json";
                if (patronActionSessions && patronActionSessionsPath == null || patronActionSessionsPath == ".") patronActionSessionsPath = $"{(path != null ? $"{path}/" : "")}patronactionsessions.json";
                if (patronNoticePolicies && patronNoticePoliciesPath == null || patronNoticePoliciesPath == ".") patronNoticePoliciesPath = $"{(path != null ? $"{path}/" : "")}patronnoticepolicies.json";
                if (payments && paymentsPath == null || paymentsPath == ".") paymentsPath = $"{(path != null ? $"{path}/" : "")}payments.json";
                if (paymentMethods && paymentMethodsPath == null || paymentMethodsPath == ".") paymentMethodsPath = $"{(path != null ? $"{path}/" : "")}paymentmethods.json";
                if (permissions && permissionsPath == null || permissionsPath == ".") permissionsPath = $"{(path != null ? $"{path}/" : "")}permissions.json";
                if (permissionsUsers && permissionsUsersPath == null || permissionsUsersPath == ".") permissionsUsersPath = $"{(path != null ? $"{path}/" : "")}permissionsusers.json";
                if (precedingSucceedingTitles && precedingSucceedingTitlesPath == null || precedingSucceedingTitlesPath == ".") precedingSucceedingTitlesPath = $"{(path != null ? $"{path}/" : "")}precedingsucceedingtitles.json";
                if (prefixes && prefixesPath == null || prefixesPath == ".") prefixesPath = $"{(path != null ? $"{path}/" : "")}prefixes.json";
                if (proxies && proxiesPath == null || proxiesPath == ".") proxiesPath = $"{(path != null ? $"{path}/" : "")}proxies.json";
                if (receivings && receivingsPath == null || receivingsPath == ".") receivingsPath = $"{(path != null ? $"{path}/" : "")}receivings.json";
                if (records && recordsPath == null || recordsPath == ".") recordsPath = $"{(path != null ? $"{path}/" : "")}records.json";
                if (referenceDatas && referenceDatasPath == null || referenceDatasPath == ".") referenceDatasPath = $"{(path != null ? $"{path}/" : "")}referencedatas.json";
                if (refundReasons && refundReasonsPath == null || refundReasonsPath == ".") refundReasonsPath = $"{(path != null ? $"{path}/" : "")}refundreasons.json";
                if (reportingCodes && reportingCodesPath == null || reportingCodesPath == ".") reportingCodesPath = $"{(path != null ? $"{path}/" : "")}reportingcodes.json";
                if (requests && requestsPath == null || requestsPath == ".") requestsPath = $"{(path != null ? $"{path}/" : "")}requests.json";
                if (requestPolicies && requestPoliciesPath == null || requestPoliciesPath == ".") requestPoliciesPath = $"{(path != null ? $"{path}/" : "")}requestpolicies.json";
                if (rollovers && rolloversPath == null || rolloversPath == ".") rolloversPath = $"{(path != null ? $"{path}/" : "")}rollovers.json";
                if (rolloverBudgets && rolloverBudgetsPath == null || rolloverBudgetsPath == ".") rolloverBudgetsPath = $"{(path != null ? $"{path}/" : "")}rolloverbudgets.json";
                if (rolloverErrors && rolloverErrorsPath == null || rolloverErrorsPath == ".") rolloverErrorsPath = $"{(path != null ? $"{path}/" : "")}rollovererrors.json";
                if (rolloverProgresses && rolloverProgressesPath == null || rolloverProgressesPath == ".") rolloverProgressesPath = $"{(path != null ? $"{path}/" : "")}rolloverprogresses.json";
                if (scheduledNotices && scheduledNoticesPath == null || scheduledNoticesPath == ".") scheduledNoticesPath = $"{(path != null ? $"{path}/" : "")}schedulednotices.json";
                if (servicePoints && servicePointsPath == null || servicePointsPath == ".") servicePointsPath = $"{(path != null ? $"{path}/" : "")}servicepoints.json";
                if (servicePointUsers && servicePointUsersPath == null || servicePointUsersPath == ".") servicePointUsersPath = $"{(path != null ? $"{path}/" : "")}servicepointusers.json";
                if (snapshots && snapshotsPath == null || snapshotsPath == ".") snapshotsPath = $"{(path != null ? $"{path}/" : "")}snapshots.json";
                if (sources && sourcesPath == null || sourcesPath == ".") sourcesPath = $"{(path != null ? $"{path}/" : "")}sources.json";
                if (staffSlips && staffSlipsPath == null || staffSlipsPath == ".") staffSlipsPath = $"{(path != null ? $"{path}/" : "")}staffslips.json";
                if (statisticalCodes && statisticalCodesPath == null || statisticalCodesPath == ".") statisticalCodesPath = $"{(path != null ? $"{path}/" : "")}statisticalcodes.json";
                if (statisticalCodeTypes && statisticalCodeTypesPath == null || statisticalCodeTypesPath == ".") statisticalCodeTypesPath = $"{(path != null ? $"{path}/" : "")}statisticalcodetypes.json";
                if (suffixes && suffixesPath == null || suffixesPath == ".") suffixesPath = $"{(path != null ? $"{path}/" : "")}suffixes.json";
                if (templates && templatesPath == null || templatesPath == ".") templatesPath = $"{(path != null ? $"{path}/" : "")}templates.json";
                if (titles && titlesPath == null || titlesPath == ".") titlesPath = $"{(path != null ? $"{path}/" : "")}titles.json";
                if (transactions && transactionsPath == null || transactionsPath == ".") transactionsPath = $"{(path != null ? $"{path}/" : "")}transactions.json";
                if (transferAccounts && transferAccountsPath == null || transferAccountsPath == ".") transferAccountsPath = $"{(path != null ? $"{path}/" : "")}transferaccounts.json";
                if (transferCriterias && transferCriteriasPath == null || transferCriteriasPath == ".") transferCriteriasPath = $"{(path != null ? $"{path}/" : "")}transfercriterias.json";
                if (users && usersPath == null || usersPath == ".") usersPath = $"{(path != null ? $"{path}/" : "")}users.json";
                if (userAcquisitionsUnits && userAcquisitionsUnitsPath == null || userAcquisitionsUnitsPath == ".") userAcquisitionsUnitsPath = $"{(path != null ? $"{path}/" : "")}useracquisitionsunits.json";
                if (userRequestPreferences && userRequestPreferencesPath == null || userRequestPreferencesPath == ".") userRequestPreferencesPath = $"{(path != null ? $"{path}/" : "")}userrequestpreferences.json";
                if (userSummaries && userSummariesPath == null || userSummariesPath == ".") userSummariesPath = $"{(path != null ? $"{path}/" : "")}usersummaries.json";
                if (vouchers && vouchersPath == null || vouchersPath == ".") vouchersPath = $"{(path != null ? $"{path}/" : "")}vouchers.json";
                if (voucherItems && voucherItemsPath == null || voucherItemsPath == ".") voucherItemsPath = $"{(path != null ? $"{path}/" : "")}voucheritems.json";
                if (waiveReasons && waiveReasonsPath == null || waiveReasonsPath == ".") waiveReasonsPath = $"{(path != null ? $"{path}/" : "")}waivereasons.json";
                var acquisitionMethodsWhere = args.SkipWhile(s3 => !s3.Equals("-AcquisitionMethodsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var acquisitionsUnitsWhere = args.SkipWhile(s3 => !s3.Equals("-AcquisitionsUnitsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var actualCostRecordsWhere = args.SkipWhile(s3 => !s3.Equals("-ActualCostRecordsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var addressTypesWhere = args.SkipWhile(s3 => !s3.Equals("-AddressTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var agreementsWhere = args.SkipWhile(s3 => !s3.Equals("-AgreementsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var agreementItemsWhere = args.SkipWhile(s3 => !s3.Equals("-AgreementItemsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var alertsWhere = args.SkipWhile(s3 => !s3.Equals("-AlertsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var alternativeTitleTypesWhere = args.SkipWhile(s3 => !s3.Equals("-AlternativeTitleTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var batchGroupsWhere = args.SkipWhile(s3 => !s3.Equals("-BatchGroupsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var blocksWhere = args.SkipWhile(s3 => !s3.Equals("-BlocksWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var blockConditionsWhere = args.SkipWhile(s3 => !s3.Equals("-BlockConditionsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var blockLimitsWhere = args.SkipWhile(s3 => !s3.Equals("-BlockLimitsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var boundWithPartsWhere = args.SkipWhile(s3 => !s3.Equals("-BoundWithPartsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var budgetsWhere = args.SkipWhile(s3 => !s3.Equals("-BudgetsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var budgetExpenseClassesWhere = args.SkipWhile(s3 => !s3.Equals("-BudgetExpenseClassesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var budgetGroupsWhere = args.SkipWhile(s3 => !s3.Equals("-BudgetGroupsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var callNumberTypesWhere = args.SkipWhile(s3 => !s3.Equals("-CallNumberTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var campusesWhere = args.SkipWhile(s3 => !s3.Equals("-CampusesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var cancellationReasonsWhere = args.SkipWhile(s3 => !s3.Equals("-CancellationReasonsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var categoriesWhere = args.SkipWhile(s3 => !s3.Equals("-CategoriesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var checkInsWhere = args.SkipWhile(s3 => !s3.Equals("-CheckInsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var circulationRulesWhere = args.SkipWhile(s3 => !s3.Equals("-CirculationRulesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var classificationTypesWhere = args.SkipWhile(s3 => !s3.Equals("-ClassificationTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var closeReasonsWhere = args.SkipWhile(s3 => !s3.Equals("-CloseReasonsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var commentsWhere = args.SkipWhile(s3 => !s3.Equals("-CommentsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var configurationsWhere = args.SkipWhile(s3 => !s3.Equals("-ConfigurationsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var contactsWhere = args.SkipWhile(s3 => !s3.Equals("-ContactsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var contributorNameTypesWhere = args.SkipWhile(s3 => !s3.Equals("-ContributorNameTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var contributorTypesWhere = args.SkipWhile(s3 => !s3.Equals("-ContributorTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var customFieldsWhere = args.SkipWhile(s3 => !s3.Equals("-CustomFieldsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var departmentsWhere = args.SkipWhile(s3 => !s3.Equals("-DepartmentsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var electronicAccessRelationshipsWhere = args.SkipWhile(s3 => !s3.Equals("-ElectronicAccessRelationshipsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var expenseClassesWhere = args.SkipWhile(s3 => !s3.Equals("-ExpenseClassesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var feesWhere = args.SkipWhile(s3 => !s3.Equals("-FeesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var feeTypesWhere = args.SkipWhile(s3 => !s3.Equals("-FeeTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var financeGroupsWhere = args.SkipWhile(s3 => !s3.Equals("-FinanceGroupsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fiscalYearsWhere = args.SkipWhile(s3 => !s3.Equals("-FiscalYearsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fixedDueDateSchedulesWhere = args.SkipWhile(s3 => !s3.Equals("-FixedDueDateSchedulesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fundsWhere = args.SkipWhile(s3 => !s3.Equals("-FundsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var fundTypesWhere = args.SkipWhile(s3 => !s3.Equals("-FundTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var groupsWhere = args.SkipWhile(s3 => !s3.Equals("-GroupsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var holdingsWhere = args.SkipWhile(s3 => !s3.Equals("-HoldingsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var holdingNoteTypesWhere = args.SkipWhile(s3 => !s3.Equals("-HoldingNoteTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var holdingTypesWhere = args.SkipWhile(s3 => !s3.Equals("-HoldingTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var hridSettingsWhere = args.SkipWhile(s3 => !s3.Equals("-HridSettingsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var idTypesWhere = args.SkipWhile(s3 => !s3.Equals("-IdTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var illPoliciesWhere = args.SkipWhile(s3 => !s3.Equals("-IllPoliciesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instancesWhere = args.SkipWhile(s3 => !s3.Equals("-InstancesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceFormatsWhere = args.SkipWhile(s3 => !s3.Equals("-InstanceFormatsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceNoteTypesWhere = args.SkipWhile(s3 => !s3.Equals("-InstanceNoteTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceRelationshipsWhere = args.SkipWhile(s3 => !s3.Equals("-InstanceRelationshipsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceRelationshipTypesWhere = args.SkipWhile(s3 => !s3.Equals("-InstanceRelationshipTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceStatusesWhere = args.SkipWhile(s3 => !s3.Equals("-InstanceStatusesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var instanceTypesWhere = args.SkipWhile(s3 => !s3.Equals("-InstanceTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var institutionsWhere = args.SkipWhile(s3 => !s3.Equals("-InstitutionsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var interfacesWhere = args.SkipWhile(s3 => !s3.Equals("-InterfacesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var interfaceCredentialsWhere = args.SkipWhile(s3 => !s3.Equals("-InterfaceCredentialsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var invoicesWhere = args.SkipWhile(s3 => !s3.Equals("-InvoicesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var invoiceItemsWhere = args.SkipWhile(s3 => !s3.Equals("-InvoiceItemsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var itemsWhere = args.SkipWhile(s3 => !s3.Equals("-ItemsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var itemDamagedStatusesWhere = args.SkipWhile(s3 => !s3.Equals("-ItemDamagedStatusesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var itemNoteTypesWhere = args.SkipWhile(s3 => !s3.Equals("-ItemNoteTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var ledgersWhere = args.SkipWhile(s3 => !s3.Equals("-LedgersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var librariesWhere = args.SkipWhile(s3 => !s3.Equals("-LibrariesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loansWhere = args.SkipWhile(s3 => !s3.Equals("-LoansWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loanEventsWhere = args.SkipWhile(s3 => !s3.Equals("-LoanEventsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loanPoliciesWhere = args.SkipWhile(s3 => !s3.Equals("-LoanPoliciesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loanTypesWhere = args.SkipWhile(s3 => !s3.Equals("-LoanTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var locationsWhere = args.SkipWhile(s3 => !s3.Equals("-LocationsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var loginsWhere = args.SkipWhile(s3 => !s3.Equals("-LoginsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var lostItemFeePoliciesWhere = args.SkipWhile(s3 => !s3.Equals("-LostItemFeePoliciesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var manualBlockTemplatesWhere = args.SkipWhile(s3 => !s3.Equals("-ManualBlockTemplatesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var materialTypesWhere = args.SkipWhile(s3 => !s3.Equals("-MaterialTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var modeOfIssuancesWhere = args.SkipWhile(s3 => !s3.Equals("-ModeOfIssuancesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var natureOfContentTermsWhere = args.SkipWhile(s3 => !s3.Equals("-NatureOfContentTermsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var notesWhere = args.SkipWhile(s3 => !s3.Equals("-NotesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var noteTypesWhere = args.SkipWhile(s3 => !s3.Equals("-NoteTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var ordersWhere = args.SkipWhile(s3 => !s3.Equals("-OrdersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var orderInvoicesWhere = args.SkipWhile(s3 => !s3.Equals("-OrderInvoicesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var orderItemsWhere = args.SkipWhile(s3 => !s3.Equals("-OrderItemsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var orderTemplatesWhere = args.SkipWhile(s3 => !s3.Equals("-OrderTemplatesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var organizationsWhere = args.SkipWhile(s3 => !s3.Equals("-OrganizationsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var overdueFinePoliciesWhere = args.SkipWhile(s3 => !s3.Equals("-OverdueFinePoliciesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var ownersWhere = args.SkipWhile(s3 => !s3.Equals("-OwnersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var patronActionSessionsWhere = args.SkipWhile(s3 => !s3.Equals("-PatronActionSessionsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var patronNoticePoliciesWhere = args.SkipWhile(s3 => !s3.Equals("-PatronNoticePoliciesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var paymentsWhere = args.SkipWhile(s3 => !s3.Equals("-PaymentsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var paymentMethodsWhere = args.SkipWhile(s3 => !s3.Equals("-PaymentMethodsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var permissionsWhere = args.SkipWhile(s3 => !s3.Equals("-PermissionsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var permissionsUsersWhere = args.SkipWhile(s3 => !s3.Equals("-PermissionsUsersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var precedingSucceedingTitlesWhere = args.SkipWhile(s3 => !s3.Equals("-PrecedingSucceedingTitlesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var prefixesWhere = args.SkipWhile(s3 => !s3.Equals("-PrefixesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var proxiesWhere = args.SkipWhile(s3 => !s3.Equals("-ProxiesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var receivingsWhere = args.SkipWhile(s3 => !s3.Equals("-ReceivingsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var recordsWhere = args.SkipWhile(s3 => !s3.Equals("-RecordsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var referenceDatasWhere = args.SkipWhile(s3 => !s3.Equals("-ReferenceDatasWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var refundReasonsWhere = args.SkipWhile(s3 => !s3.Equals("-RefundReasonsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var reportingCodesWhere = args.SkipWhile(s3 => !s3.Equals("-ReportingCodesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var requestsWhere = args.SkipWhile(s3 => !s3.Equals("-RequestsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var requestPoliciesWhere = args.SkipWhile(s3 => !s3.Equals("-RequestPoliciesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloversWhere = args.SkipWhile(s3 => !s3.Equals("-RolloversWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloverBudgetsWhere = args.SkipWhile(s3 => !s3.Equals("-RolloverBudgetsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloverErrorsWhere = args.SkipWhile(s3 => !s3.Equals("-RolloverErrorsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var rolloverProgressesWhere = args.SkipWhile(s3 => !s3.Equals("-RolloverProgressesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var scheduledNoticesWhere = args.SkipWhile(s3 => !s3.Equals("-ScheduledNoticesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var servicePointsWhere = args.SkipWhile(s3 => !s3.Equals("-ServicePointsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var servicePointUsersWhere = args.SkipWhile(s3 => !s3.Equals("-ServicePointUsersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var snapshotsWhere = args.SkipWhile(s3 => !s3.Equals("-SnapshotsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var sourcesWhere = args.SkipWhile(s3 => !s3.Equals("-SourcesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var staffSlipsWhere = args.SkipWhile(s3 => !s3.Equals("-StaffSlipsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var statisticalCodesWhere = args.SkipWhile(s3 => !s3.Equals("-StatisticalCodesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var statisticalCodeTypesWhere = args.SkipWhile(s3 => !s3.Equals("-StatisticalCodeTypesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var suffixesWhere = args.SkipWhile(s3 => !s3.Equals("-SuffixesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var templatesWhere = args.SkipWhile(s3 => !s3.Equals("-TemplatesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var titlesWhere = args.SkipWhile(s3 => !s3.Equals("-TitlesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var transactionsWhere = args.SkipWhile(s3 => !s3.Equals("-TransactionsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var transferAccountsWhere = args.SkipWhile(s3 => !s3.Equals("-TransferAccountsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var transferCriteriasWhere = args.SkipWhile(s3 => !s3.Equals("-TransferCriteriasWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var usersWhere = args.SkipWhile(s3 => !s3.Equals("-UsersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var userAcquisitionsUnitsWhere = args.SkipWhile(s3 => !s3.Equals("-UserAcquisitionsUnitsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var userRequestPreferencesWhere = args.SkipWhile(s3 => !s3.Equals("-UserRequestPreferencesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var userSummariesWhere = args.SkipWhile(s3 => !s3.Equals("-UserSummariesWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var vouchersWhere = args.SkipWhile(s3 => !s3.Equals("-VouchersWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var voucherItemsWhere = args.SkipWhile(s3 => !s3.Equals("-VoucherItemsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var waiveReasonsWhere = args.SkipWhile(s3 => !s3.Equals("-WaiveReasonsWhere", StringComparison.OrdinalIgnoreCase)).Skip(1).FirstOrDefault();
                var convertUsers = args.Any(s3 => s3.Equals("-ConvertUsers", StringComparison.OrdinalIgnoreCase));
                var saveVouchers = args.Any(s3 => s3.Equals("-SaveVouchers", StringComparison.OrdinalIgnoreCase));
                var updateVouchers = args.Any(s3 => s3.Equals("-UpdateVouchers", StringComparison.OrdinalIgnoreCase));
                if (update) if (api) using (var fsc = new FolioServiceClient(connectionString)) userId = (string)fsc.Users($"username = '{ConfigurationManager.AppSettings["username"] ?? Environment.UserName}'").Single()["id"]; else using (var fdc = new FolioDapperContext(connectionString)) userId = fdc.Users($"jsonb->> 'username' = '{ConfigurationManager.AppSettings["username"] ?? Environment.UserName}'").Select(u => u.Id.ToString()).Single();
                if (all)
                {
                    acquisitionMethodsPath = $"{path}/acquisitionmethods.json";
                    acquisitionsUnitsPath = $"{path}/acquisitionsunits.json";
                    actualCostRecordsPath = $"{path}/actualcostrecords.json";
                    addressTypesPath = $"{path}/addresstypes.json";
                    agreementsPath = $"{path}/agreements.json";
                    agreementItemsPath = $"{path}/agreementitems.json";
                    alertsPath = $"{path}/alerts.json";
                    alternativeTitleTypesPath = $"{path}/alternativetitletypes.json";
                    batchGroupsPath = $"{path}/batchgroups.json";
                    blocksPath = $"{path}/blocks.json";
                    blockConditionsPath = $"{path}/blockconditions.json";
                    blockLimitsPath = $"{path}/blocklimits.json";
                    boundWithPartsPath = $"{path}/boundwithparts.json";
                    budgetsPath = $"{path}/budgets.json";
                    budgetExpenseClassesPath = $"{path}/budgetexpenseclasses.json";
                    budgetGroupsPath = $"{path}/budgetgroups.json";
                    callNumberTypesPath = $"{path}/callnumbertypes.json";
                    campusesPath = $"{path}/campuses.json";
                    cancellationReasonsPath = $"{path}/cancellationreasons.json";
                    categoriesPath = $"{path}/categories.json";
                    checkInsPath = $"{path}/checkins.json";
                    circulationRulesPath = $"{path}/circulationrules.json";
                    classificationTypesPath = $"{path}/classificationtypes.json";
                    closeReasonsPath = $"{path}/closereasons.json";
                    commentsPath = $"{path}/comments.json";
                    configurationsPath = $"{path}/configurations.json";
                    contactsPath = $"{path}/contacts.json";
                    contributorNameTypesPath = $"{path}/contributornametypes.json";
                    contributorTypesPath = $"{path}/contributortypes.json";
                    customFieldsPath = $"{path}/customfields.json";
                    departmentsPath = $"{path}/departments.json";
                    electronicAccessRelationshipsPath = $"{path}/electronicaccessrelationships.json";
                    expenseClassesPath = $"{path}/expenseclasses.json";
                    feesPath = $"{path}/fees.json";
                    feeTypesPath = $"{path}/feetypes.json";
                    financeGroupsPath = $"{path}/financegroups.json";
                    fiscalYearsPath = $"{path}/fiscalyears.json";
                    fixedDueDateSchedulesPath = $"{path}/fixedduedateschedules.json";
                    fundsPath = $"{path}/funds.json";
                    fundTypesPath = $"{path}/fundtypes.json";
                    groupsPath = $"{path}/groups.json";
                    holdingsPath = $"{path}/holdings.json";
                    holdingNoteTypesPath = $"{path}/holdingnotetypes.json";
                    holdingTypesPath = $"{path}/holdingtypes.json";
                    hridSettingsPath = $"{path}/hridsettings.json";
                    idTypesPath = $"{path}/idtypes.json";
                    illPoliciesPath = $"{path}/illpolicies.json";
                    instancesPath = $"{path}/instances.json";
                    instanceFormatsPath = $"{path}/instanceformats.json";
                    instanceNoteTypesPath = $"{path}/instancenotetypes.json";
                    instanceRelationshipsPath = $"{path}/instancerelationships.json";
                    instanceRelationshipTypesPath = $"{path}/instancerelationshiptypes.json";
                    instanceStatusesPath = $"{path}/instancestatuses.json";
                    instanceTypesPath = $"{path}/instancetypes.json";
                    institutionsPath = $"{path}/institutions.json";
                    interfacesPath = $"{path}/interfaces.json";
                    if (!api) interfaceCredentialsPath = $"{path}/interfacecredentials.json";
                    invoicesPath = $"{path}/invoices.json";
                    invoiceItemsPath = $"{path}/invoiceitems.json";
                    itemsPath = $"{path}/items.json";
                    itemDamagedStatusesPath = $"{path}/itemdamagedstatuses.json";
                    itemNoteTypesPath = $"{path}/itemnotetypes.json";
                    ledgersPath = $"{path}/ledgers.json";
                    librariesPath = $"{path}/libraries.json";
                    loansPath = $"{path}/loans.json";
                    if (!api) loanEventsPath = $"{path}/loanevents.json";
                    loanPoliciesPath = $"{path}/loanpolicies.json";
                    loanTypesPath = $"{path}/loantypes.json";
                    locationsPath = $"{path}/locations.json";
                    if (!api) loginsPath = $"{path}/logins.json";
                    lostItemFeePoliciesPath = $"{path}/lostitemfeepolicies.json";
                    manualBlockTemplatesPath = $"{path}/manualblocktemplates.json";
                    materialTypesPath = $"{path}/materialtypes.json";
                    modeOfIssuancesPath = $"{path}/modeofissuances.json";
                    natureOfContentTermsPath = $"{path}/natureofcontentterms.json";
                    if (api) notesPath = $"{path}/notes.json";
                    if (api) noteTypesPath = $"{path}/notetypes.json";
                    ordersPath = $"{path}/orders.json";
                    orderInvoicesPath = $"{path}/orderinvoices.json";
                    orderItemsPath = $"{path}/orderitems.json";
                    orderTemplatesPath = $"{path}/ordertemplates.json";
                    organizationsPath = $"{path}/organizations.json";
                    overdueFinePoliciesPath = $"{path}/overduefinepolicies.json";
                    ownersPath = $"{path}/owners.json";
                    patronActionSessionsPath = $"{path}/patronactionsessions.json";
                    patronNoticePoliciesPath = $"{path}/patronnoticepolicies.json";
                    paymentsPath = $"{path}/payments.json";
                    paymentMethodsPath = $"{path}/paymentmethods.json";
                    permissionsPath = $"{path}/permissions.json";
                    permissionsUsersPath = $"{path}/permissionsusers.json";
                    precedingSucceedingTitlesPath = $"{path}/precedingsucceedingtitles.json";
                    prefixesPath = $"{path}/prefixes.json";
                    proxiesPath = $"{path}/proxies.json";
                    receivingsPath = $"{path}/receivings.json";
                    if (api) recordsPath = $"{path}/records.json";
                    referenceDatasPath = $"{path}/referencedatas.json";
                    refundReasonsPath = $"{path}/refundreasons.json";
                    reportingCodesPath = $"{path}/reportingcodes.json";
                    requestsPath = $"{path}/requests.json";
                    requestPoliciesPath = $"{path}/requestpolicies.json";
                    rolloversPath = $"{path}/rollovers.json";
                    rolloverBudgetsPath = $"{path}/rolloverbudgets.json";
                    rolloverErrorsPath = $"{path}/rollovererrors.json";
                    rolloverProgressesPath = $"{path}/rolloverprogresses.json";
                    scheduledNoticesPath = $"{path}/schedulednotices.json";
                    servicePointsPath = $"{path}/servicepoints.json";
                    servicePointUsersPath = $"{path}/servicepointusers.json";
                    if (api) snapshotsPath = $"{path}/snapshots.json";
                    sourcesPath = $"{path}/sources.json";
                    staffSlipsPath = $"{path}/staffslips.json";
                    statisticalCodesPath = $"{path}/statisticalcodes.json";
                    statisticalCodeTypesPath = $"{path}/statisticalcodetypes.json";
                    suffixesPath = $"{path}/suffixes.json";
                    templatesPath = $"{path}/templates.json";
                    titlesPath = $"{path}/titles.json";
                    transactionsPath = $"{path}/transactions.json";
                    transferAccountsPath = $"{path}/transferaccounts.json";
                    transferCriteriasPath = $"{path}/transfercriterias.json";
                    usersPath = $"{path}/users.json";
                    userAcquisitionsUnitsPath = $"{path}/useracquisitionsunits.json";
                    userRequestPreferencesPath = $"{path}/userrequestpreferences.json";
                    if (!api) userSummariesPath = $"{path}/usersummaries.json";
                    vouchersPath = $"{path}/vouchers.json";
                    voucherItemsPath = $"{path}/voucheritems.json";
                    waiveReasonsPath = $"{path}/waivereasons.json";
                }
                if (allAgreements)
                {
                    agreementsPath = $"{path}/agreements.json";
                    agreementItemsPath = $"{path}/agreementitems.json";
                    referenceDatasPath = $"{path}/referencedatas.json";
                }
                if (allCirculation)
                {
                    actualCostRecordsPath = $"{path}/actualcostrecords.json";
                    cancellationReasonsPath = $"{path}/cancellationreasons.json";
                    checkInsPath = $"{path}/checkins.json";
                    circulationRulesPath = $"{path}/circulationrules.json";
                    fixedDueDateSchedulesPath = $"{path}/fixedduedateschedules.json";
                    loansPath = $"{path}/loans.json";
                    if (!api) loanEventsPath = $"{path}/loanevents.json";
                    loanPoliciesPath = $"{path}/loanpolicies.json";
                    patronActionSessionsPath = $"{path}/patronactionsessions.json";
                    patronNoticePoliciesPath = $"{path}/patronnoticepolicies.json";
                    requestsPath = $"{path}/requests.json";
                    requestPoliciesPath = $"{path}/requestpolicies.json";
                    scheduledNoticesPath = $"{path}/schedulednotices.json";
                    staffSlipsPath = $"{path}/staffslips.json";
                    userRequestPreferencesPath = $"{path}/userrequestpreferences.json";
                }
                if (allConfiguration)
                {
                    configurationsPath = $"{path}/configurations.json";
                }
                if (allFees)
                {
                    blocksPath = $"{path}/blocks.json";
                    commentsPath = $"{path}/comments.json";
                    feesPath = $"{path}/fees.json";
                    feeTypesPath = $"{path}/feetypes.json";
                    lostItemFeePoliciesPath = $"{path}/lostitemfeepolicies.json";
                    manualBlockTemplatesPath = $"{path}/manualblocktemplates.json";
                    overdueFinePoliciesPath = $"{path}/overduefinepolicies.json";
                    ownersPath = $"{path}/owners.json";
                    paymentsPath = $"{path}/payments.json";
                    paymentMethodsPath = $"{path}/paymentmethods.json";
                    refundReasonsPath = $"{path}/refundreasons.json";
                    transferAccountsPath = $"{path}/transferaccounts.json";
                    transferCriteriasPath = $"{path}/transfercriterias.json";
                    waiveReasonsPath = $"{path}/waivereasons.json";
                }
                if (allFinance)
                {
                    budgetsPath = $"{path}/budgets.json";
                    budgetExpenseClassesPath = $"{path}/budgetexpenseclasses.json";
                    budgetGroupsPath = $"{path}/budgetgroups.json";
                    expenseClassesPath = $"{path}/expenseclasses.json";
                    financeGroupsPath = $"{path}/financegroups.json";
                    fiscalYearsPath = $"{path}/fiscalyears.json";
                    fundsPath = $"{path}/funds.json";
                    fundTypesPath = $"{path}/fundtypes.json";
                    ledgersPath = $"{path}/ledgers.json";
                    rolloversPath = $"{path}/rollovers.json";
                    rolloverBudgetsPath = $"{path}/rolloverbudgets.json";
                    rolloverErrorsPath = $"{path}/rollovererrors.json";
                    rolloverProgressesPath = $"{path}/rolloverprogresses.json";
                    transactionsPath = $"{path}/transactions.json";
                }
                if (allInventory)
                {
                    alternativeTitleTypesPath = $"{path}/alternativetitletypes.json";
                    boundWithPartsPath = $"{path}/boundwithparts.json";
                    callNumberTypesPath = $"{path}/callnumbertypes.json";
                    campusesPath = $"{path}/campuses.json";
                    classificationTypesPath = $"{path}/classificationtypes.json";
                    contributorNameTypesPath = $"{path}/contributornametypes.json";
                    contributorTypesPath = $"{path}/contributortypes.json";
                    electronicAccessRelationshipsPath = $"{path}/electronicaccessrelationships.json";
                    holdingsPath = $"{path}/holdings.json";
                    holdingNoteTypesPath = $"{path}/holdingnotetypes.json";
                    holdingTypesPath = $"{path}/holdingtypes.json";
                    hridSettingsPath = $"{path}/hridsettings.json";
                    idTypesPath = $"{path}/idtypes.json";
                    illPoliciesPath = $"{path}/illpolicies.json";
                    instancesPath = $"{path}/instances.json";
                    instanceFormatsPath = $"{path}/instanceformats.json";
                    instanceNoteTypesPath = $"{path}/instancenotetypes.json";
                    instanceRelationshipsPath = $"{path}/instancerelationships.json";
                    instanceRelationshipTypesPath = $"{path}/instancerelationshiptypes.json";
                    instanceStatusesPath = $"{path}/instancestatuses.json";
                    instanceTypesPath = $"{path}/instancetypes.json";
                    institutionsPath = $"{path}/institutions.json";
                    itemsPath = $"{path}/items.json";
                    itemDamagedStatusesPath = $"{path}/itemdamagedstatuses.json";
                    itemNoteTypesPath = $"{path}/itemnotetypes.json";
                    librariesPath = $"{path}/libraries.json";
                    loanTypesPath = $"{path}/loantypes.json";
                    locationsPath = $"{path}/locations.json";
                    materialTypesPath = $"{path}/materialtypes.json";
                    modeOfIssuancesPath = $"{path}/modeofissuances.json";
                    natureOfContentTermsPath = $"{path}/natureofcontentterms.json";
                    precedingSucceedingTitlesPath = $"{path}/precedingsucceedingtitles.json";
                    servicePointsPath = $"{path}/servicepoints.json";
                    servicePointUsersPath = $"{path}/servicepointusers.json";
                    sourcesPath = $"{path}/sources.json";
                    statisticalCodesPath = $"{path}/statisticalcodes.json";
                    statisticalCodeTypesPath = $"{path}/statisticalcodetypes.json";
                }
                if (allInvoices)
                {
                    batchGroupsPath = $"{path}/batchgroups.json";
                    invoicesPath = $"{path}/invoices.json";
                    invoiceItemsPath = $"{path}/invoiceitems.json";
                    vouchersPath = $"{path}/vouchers.json";
                    voucherItemsPath = $"{path}/voucheritems.json";
                }
                if (allLogin)
                {
                    if (!api) loginsPath = $"{path}/logins.json";
                }
                if (allNotes)
                {
                    if (api) notesPath = $"{path}/notes.json";
                    if (api) noteTypesPath = $"{path}/notetypes.json";
                }
                if (allOrders)
                {
                    acquisitionMethodsPath = $"{path}/acquisitionmethods.json";
                    acquisitionsUnitsPath = $"{path}/acquisitionsunits.json";
                    alertsPath = $"{path}/alerts.json";
                    closeReasonsPath = $"{path}/closereasons.json";
                    ordersPath = $"{path}/orders.json";
                    orderInvoicesPath = $"{path}/orderinvoices.json";
                    orderItemsPath = $"{path}/orderitems.json";
                    orderTemplatesPath = $"{path}/ordertemplates.json";
                    prefixesPath = $"{path}/prefixes.json";
                    receivingsPath = $"{path}/receivings.json";
                    reportingCodesPath = $"{path}/reportingcodes.json";
                    suffixesPath = $"{path}/suffixes.json";
                    titlesPath = $"{path}/titles.json";
                    userAcquisitionsUnitsPath = $"{path}/useracquisitionsunits.json";
                }
                if (allOrganizations)
                {
                    categoriesPath = $"{path}/categories.json";
                    contactsPath = $"{path}/contacts.json";
                    interfacesPath = $"{path}/interfaces.json";
                    if (!api) interfaceCredentialsPath = $"{path}/interfacecredentials.json";
                    organizationsPath = $"{path}/organizations.json";
                }
                if (allPermissions)
                {
                    permissionsPath = $"{path}/permissions.json";
                    permissionsUsersPath = $"{path}/permissionsusers.json";
                }
                if (allSource)
                {
                    if (api) recordsPath = $"{path}/records.json";
                    if (api) snapshotsPath = $"{path}/snapshots.json";
                }
                if (allTemplates)
                {
                    templatesPath = $"{path}/templates.json";
                }
                if (allUsers)
                {
                    addressTypesPath = $"{path}/addresstypes.json";
                    blockConditionsPath = $"{path}/blockconditions.json";
                    blockLimitsPath = $"{path}/blocklimits.json";
                    customFieldsPath = $"{path}/customfields.json";
                    departmentsPath = $"{path}/departments.json";
                    groupsPath = $"{path}/groups.json";
                    proxiesPath = $"{path}/proxies.json";
                    usersPath = $"{path}/users.json";
                    if (!api) userSummariesPath = $"{path}/usersummaries.json";
                }
                if (count && acquisitionMethods) CountAcquisitionMethods(where);
                if (count && acquisitionsUnits) CountAcquisitionsUnits(where);
                if (count && actualCostRecords) CountActualCostRecords(where);
                if (count && addressTypes) CountAddressTypes(where);
                if (count && agreementItems) CountAgreementItems(where);
                if (count && agreements) CountAgreements(where);
                if (count && alerts) CountAlerts(where);
                if (count && alternativeTitleTypes) CountAlternativeTitleTypes(where);
                if (count && batchGroups) CountBatchGroups(where);
                if (count && blockConditions) CountBlockConditions(where);
                if (count && blockLimits) CountBlockLimits(where);
                if (count && blocks) CountBlocks(where);
                if (count && boundWithParts) CountBoundWithParts(where);
                if (count && budgetExpenseClasses) CountBudgetExpenseClasses(where);
                if (count && budgetGroups) CountBudgetGroups(where);
                if (count && budgets) CountBudgets(where);
                if (count && callNumberTypes) CountCallNumberTypes(where);
                if (count && campuses) CountCampuses(where);
                if (count && cancellationReasons) CountCancellationReasons(where);
                if (count && categories) CountCategories(where);
                if (count && checkIns) CountCheckIns(where);
                if (count && circulationRules) CountCirculationRules(where);
                if (count && classificationTypes) CountClassificationTypes(where);
                if (count && closeReasons) CountCloseReasons(where);
                if (count && comments) CountComments(where);
                if (count && configurations) CountConfigurations(where);
                if (count && contacts) CountContacts(where);
                if (count && contributorNameTypes) CountContributorNameTypes(where);
                if (count && contributorTypes) CountContributorTypes(where);
                if (count && customFields) CountCustomFields(where);
                if (count && departments) CountDepartments(where);
                if (count && electronicAccessRelationships) CountElectronicAccessRelationships(where);
                if (count && expenseClasses) CountExpenseClasses(where);
                if (count && fees) CountFees(where);
                if (count && feeTypes) CountFeeTypes(where);
                if (count && financeGroups) CountFinanceGroups(where);
                if (count && fiscalYears) CountFiscalYears(where);
                if (count && fixedDueDateSchedules) CountFixedDueDateSchedules(where);
                if (count && funds) CountFunds(where);
                if (count && fundTypes) CountFundTypes(where);
                if (count && groups) CountGroups(where);
                if (count && holdingNoteTypes) CountHoldingNoteTypes(where);
                if (count && holdings) CountHoldings(where);
                if (count && holdingTypes) CountHoldingTypes(where);
                if (count && hridSettings) CountHridSettings(where);
                if (count && idTypes) CountIdTypes(where);
                if (count && illPolicies) CountIllPolicies(where);
                if (count && instanceFormats) CountInstanceFormats(where);
                if (count && instanceNoteTypes) CountInstanceNoteTypes(where);
                if (count && instanceRelationships) CountInstanceRelationships(where);
                if (count && instanceRelationshipTypes) CountInstanceRelationshipTypes(where);
                if (count && instances) CountInstances(where);
                if (count && instanceStatuses) CountInstanceStatuses(where);
                if (count && instanceTypes) CountInstanceTypes(where);
                if (count && institutions) CountInstitutions(where);
                if (count && interfaceCredentials) CountInterfaceCredentials(where);
                if (count && interfaces) CountInterfaces(where);
                if (count && invoiceItems) CountInvoiceItems(where);
                if (count && invoices) CountInvoices(where);
                if (count && itemDamagedStatuses) CountItemDamagedStatuses(where);
                if (count && itemNoteTypes) CountItemNoteTypes(where);
                if (count && items) CountItems(where);
                if (count && ledgers) CountLedgers(where);
                if (count && libraries) CountLibraries(where);
                if (count && loanEvents) CountLoanEvents(where);
                if (count && loanPolicies) CountLoanPolicies(where);
                if (count && loans) CountLoans(where);
                if (count && loanTypes) CountLoanTypes(where);
                if (count && locations) CountLocations(where);
                if (count && logins) CountLogins(where);
                if (count && lostItemFeePolicies) CountLostItemFeePolicies(where);
                if (count && manualBlockTemplates) CountManualBlockTemplates(where);
                if (count && materialTypes) CountMaterialTypes(where);
                if (count && modeOfIssuances) CountModeOfIssuances(where);
                if (count && natureOfContentTerms) CountNatureOfContentTerms(where);
                if (count && notes) CountNotes(where);
                if (count && noteTypes) CountNoteTypes(where);
                if (count && orderInvoices) CountOrderInvoices(where);
                if (count && orderItems) CountOrderItems(where);
                if (count && orders) CountOrders(where);
                if (count && orderTemplates) CountOrderTemplates(where);
                if (count && organizations) CountOrganizations(where);
                if (count && overdueFinePolicies) CountOverdueFinePolicies(where);
                if (count && owners) CountOwners(where);
                if (count && patronActionSessions) CountPatronActionSessions(where);
                if (count && patronNoticePolicies) CountPatronNoticePolicies(where);
                if (count && paymentMethods) CountPaymentMethods(where);
                if (count && payments) CountPayments(where);
                if (count && permissions) CountPermissions(where);
                if (count && permissionsUsers) CountPermissionsUsers(where);
                if (count && precedingSucceedingTitles) CountPrecedingSucceedingTitles(where);
                if (count && prefixes) CountPrefixes(where);
                if (count && proxies) CountProxies(where);
                if (count && receivings) CountReceivings(where);
                if (count && records) CountRecords(where);
                if (count && referenceDatas) CountReferenceDatas(where);
                if (count && refundReasons) CountRefundReasons(where);
                if (count && reportingCodes) CountReportingCodes(where);
                if (count && requestPolicies) CountRequestPolicies(where);
                if (count && requests) CountRequests(where);
                if (count && rolloverBudgets) CountRolloverBudgets(where);
                if (count && rolloverErrors) CountRolloverErrors(where);
                if (count && rolloverProgresses) CountRolloverProgresses(where);
                if (count && rollovers) CountRollovers(where);
                if (count && scheduledNotices) CountScheduledNotices(where);
                if (count && servicePoints) CountServicePoints(where);
                if (count && servicePointUsers) CountServicePointUsers(where);
                if (count && snapshots) CountSnapshots(where);
                if (count && sources) CountSources(where);
                if (count && staffSlips) CountStaffSlips(where);
                if (count && statisticalCodes) CountStatisticalCodes(where);
                if (count && statisticalCodeTypes) CountStatisticalCodeTypes(where);
                if (count && suffixes) CountSuffixes(where);
                if (count && templates) CountTemplates(where);
                if (count && titles) CountTitles(where);
                if (count && transactions) CountTransactions(where);
                if (count && transferAccounts) CountTransferAccounts(where);
                if (count && transferCriterias) CountTransferCriterias(where);
                if (count && userAcquisitionsUnits) CountUserAcquisitionsUnits(where);
                if (count && userRequestPreferences) CountUserRequestPreferences(where);
                if (count && users) CountUsers(where);
                if (count && userSummaries) CountUserSummaries(where);
                if (count && voucherItems) CountVoucherItems(where);
                if (count && vouchers) CountVouchers(where);
                if (count && waiveReasons) CountWaiveReasons(where);
                if (query && acquisitionMethods) QueryAcquisitionMethods(where, orderBy, skip, take, select);
                if (query && acquisitionsUnits) QueryAcquisitionsUnits(where, orderBy, skip, take, select);
                if (query && actualCostRecords) QueryActualCostRecords(where, orderBy, skip, take, select);
                if (query && addressTypes) QueryAddressTypes(where, orderBy, skip, take, select);
                if (query && agreementItems) QueryAgreementItems(where, orderBy, skip, take, select);
                if (query && agreements) QueryAgreements(where, orderBy, skip, take, select);
                if (query && alerts) QueryAlerts(where, orderBy, skip, take, select);
                if (query && alternativeTitleTypes) QueryAlternativeTitleTypes(where, orderBy, skip, take, select);
                if (query && batchGroups) QueryBatchGroups(where, orderBy, skip, take, select);
                if (query && blockConditions) QueryBlockConditions(where, orderBy, skip, take, select);
                if (query && blockLimits) QueryBlockLimits(where, orderBy, skip, take, select);
                if (query && blocks) QueryBlocks(where, orderBy, skip, take, select);
                if (query && boundWithParts) QueryBoundWithParts(where, orderBy, skip, take, select);
                if (query && budgetExpenseClasses) QueryBudgetExpenseClasses(where, orderBy, skip, take, select);
                if (query && budgetGroups) QueryBudgetGroups(where, orderBy, skip, take, select);
                if (query && budgets) QueryBudgets(where, orderBy, skip, take, select);
                if (query && callNumberTypes) QueryCallNumberTypes(where, orderBy, skip, take, select);
                if (query && campuses) QueryCampuses(where, orderBy, skip, take, select);
                if (query && cancellationReasons) QueryCancellationReasons(where, orderBy, skip, take, select);
                if (query && categories) QueryCategories(where, orderBy, skip, take, select);
                if (query && checkIns) QueryCheckIns(where, orderBy, skip, take, select);
                if (query && circulationRules) QueryCirculationRules(where, orderBy, skip, take, select);
                if (query && classificationTypes) QueryClassificationTypes(where, orderBy, skip, take, select);
                if (query && closeReasons) QueryCloseReasons(where, orderBy, skip, take, select);
                if (query && comments) QueryComments(where, orderBy, skip, take, select);
                if (query && configurations) QueryConfigurations(where, orderBy, skip, take, select);
                if (query && contacts) QueryContacts(where, orderBy, skip, take, select);
                if (query && contributorNameTypes) QueryContributorNameTypes(where, orderBy, skip, take, select);
                if (query && contributorTypes) QueryContributorTypes(where, orderBy, skip, take, select);
                if (query && customFields) QueryCustomFields(where, orderBy, skip, take, select);
                if (query && departments) QueryDepartments(where, orderBy, skip, take, select);
                if (query && electronicAccessRelationships) QueryElectronicAccessRelationships(where, orderBy, skip, take, select);
                if (query && expenseClasses) QueryExpenseClasses(where, orderBy, skip, take, select);
                if (query && fees) QueryFees(where, orderBy, skip, take, select);
                if (query && feeTypes) QueryFeeTypes(where, orderBy, skip, take, select);
                if (query && financeGroups) QueryFinanceGroups(where, orderBy, skip, take, select);
                if (query && fiscalYears) QueryFiscalYears(where, orderBy, skip, take, select);
                if (query && fixedDueDateSchedules) QueryFixedDueDateSchedules(where, orderBy, skip, take, select);
                if (query && funds) QueryFunds(where, orderBy, skip, take, select);
                if (query && fundTypes) QueryFundTypes(where, orderBy, skip, take, select);
                if (query && groups) QueryGroups(where, orderBy, skip, take, select);
                if (query && holdingNoteTypes) QueryHoldingNoteTypes(where, orderBy, skip, take, select);
                if (query && holdings) QueryHoldings(where, orderBy, skip, take, select);
                if (query && holdingTypes) QueryHoldingTypes(where, orderBy, skip, take, select);
                if (query && hridSettings) QueryHridSettings(where, orderBy, skip, take, select);
                if (query && idTypes) QueryIdTypes(where, orderBy, skip, take, select);
                if (query && illPolicies) QueryIllPolicies(where, orderBy, skip, take, select);
                if (query && instanceFormats) QueryInstanceFormats(where, orderBy, skip, take, select);
                if (query && instanceNoteTypes) QueryInstanceNoteTypes(where, orderBy, skip, take, select);
                if (query && instanceRelationships) QueryInstanceRelationships(where, orderBy, skip, take, select);
                if (query && instanceRelationshipTypes) QueryInstanceRelationshipTypes(where, orderBy, skip, take, select);
                if (query && instances) QueryInstances(where, orderBy, skip, take, select);
                if (query && instanceStatuses) QueryInstanceStatuses(where, orderBy, skip, take, select);
                if (query && instanceTypes) QueryInstanceTypes(where, orderBy, skip, take, select);
                if (query && institutions) QueryInstitutions(where, orderBy, skip, take, select);
                if (query && interfaceCredentials) QueryInterfaceCredentials(where, orderBy, skip, take, select);
                if (query && interfaces) QueryInterfaces(where, orderBy, skip, take, select);
                if (query && invoiceItems) QueryInvoiceItems(where, orderBy, skip, take, select);
                if (query && invoices) QueryInvoices(where, orderBy, skip, take, select);
                if (query && itemDamagedStatuses) QueryItemDamagedStatuses(where, orderBy, skip, take, select);
                if (query && itemNoteTypes) QueryItemNoteTypes(where, orderBy, skip, take, select);
                if (query && items) QueryItems(where, orderBy, skip, take, select);
                if (query && ledgers) QueryLedgers(where, orderBy, skip, take, select);
                if (query && libraries) QueryLibraries(where, orderBy, skip, take, select);
                if (query && loanEvents) QueryLoanEvents(where, orderBy, skip, take, select);
                if (query && loanPolicies) QueryLoanPolicies(where, orderBy, skip, take, select);
                if (query && loans) QueryLoans(where, orderBy, skip, take, select);
                if (query && loanTypes) QueryLoanTypes(where, orderBy, skip, take, select);
                if (query && locations) QueryLocations(where, orderBy, skip, take, select);
                if (query && logins) QueryLogins(where, orderBy, skip, take, select);
                if (query && lostItemFeePolicies) QueryLostItemFeePolicies(where, orderBy, skip, take, select);
                if (query && manualBlockTemplates) QueryManualBlockTemplates(where, orderBy, skip, take, select);
                if (query && materialTypes) QueryMaterialTypes(where, orderBy, skip, take, select);
                if (query && modeOfIssuances) QueryModeOfIssuances(where, orderBy, skip, take, select);
                if (query && natureOfContentTerms) QueryNatureOfContentTerms(where, orderBy, skip, take, select);
                if (query && notes) QueryNotes(where, orderBy, skip, take, select);
                if (query && noteTypes) QueryNoteTypes(where, orderBy, skip, take, select);
                if (query && orderInvoices) QueryOrderInvoices(where, orderBy, skip, take, select);
                if (query && orderItems) QueryOrderItems(where, orderBy, skip, take, select);
                if (query && orders) QueryOrders(where, orderBy, skip, take, select);
                if (query && orderTemplates) QueryOrderTemplates(where, orderBy, skip, take, select);
                if (query && organizations) QueryOrganizations(where, orderBy, skip, take, select);
                if (query && overdueFinePolicies) QueryOverdueFinePolicies(where, orderBy, skip, take, select);
                if (query && owners) QueryOwners(where, orderBy, skip, take, select);
                if (query && patronActionSessions) QueryPatronActionSessions(where, orderBy, skip, take, select);
                if (query && patronNoticePolicies) QueryPatronNoticePolicies(where, orderBy, skip, take, select);
                if (query && paymentMethods) QueryPaymentMethods(where, orderBy, skip, take, select);
                if (query && payments) QueryPayments(where, orderBy, skip, take, select);
                if (query && permissions) QueryPermissions(where, orderBy, skip, take, select);
                if (query && permissionsUsers) QueryPermissionsUsers(where, orderBy, skip, take, select);
                if (query && precedingSucceedingTitles) QueryPrecedingSucceedingTitles(where, orderBy, skip, take, select);
                if (query && prefixes) QueryPrefixes(where, orderBy, skip, take, select);
                if (query && proxies) QueryProxies(where, orderBy, skip, take, select);
                if (query && receivings) QueryReceivings(where, orderBy, skip, take, select);
                if (query && records) QueryRecords(where, orderBy, skip, take, select);
                if (query && referenceDatas) QueryReferenceDatas(where, orderBy, skip, take, select);
                if (query && refundReasons) QueryRefundReasons(where, orderBy, skip, take, select);
                if (query && reportingCodes) QueryReportingCodes(where, orderBy, skip, take, select);
                if (query && requestPolicies) QueryRequestPolicies(where, orderBy, skip, take, select);
                if (query && requests) QueryRequests(where, orderBy, skip, take, select);
                if (query && rolloverBudgets) QueryRolloverBudgets(where, orderBy, skip, take, select);
                if (query && rolloverErrors) QueryRolloverErrors(where, orderBy, skip, take, select);
                if (query && rolloverProgresses) QueryRolloverProgresses(where, orderBy, skip, take, select);
                if (query && rollovers) QueryRollovers(where, orderBy, skip, take, select);
                if (query && scheduledNotices) QueryScheduledNotices(where, orderBy, skip, take, select);
                if (query && servicePoints) QueryServicePoints(where, orderBy, skip, take, select);
                if (query && servicePointUsers) QueryServicePointUsers(where, orderBy, skip, take, select);
                if (query && snapshots) QuerySnapshots(where, orderBy, skip, take, select);
                if (query && sources) QuerySources(where, orderBy, skip, take, select);
                if (query && staffSlips) QueryStaffSlips(where, orderBy, skip, take, select);
                if (query && statisticalCodes) QueryStatisticalCodes(where, orderBy, skip, take, select);
                if (query && statisticalCodeTypes) QueryStatisticalCodeTypes(where, orderBy, skip, take, select);
                if (query && suffixes) QuerySuffixes(where, orderBy, skip, take, select);
                if (query && templates) QueryTemplates(where, orderBy, skip, take, select);
                if (query && titles) QueryTitles(where, orderBy, skip, take, select);
                if (query && transactions) QueryTransactions(where, orderBy, skip, take, select);
                if (query && transferAccounts) QueryTransferAccounts(where, orderBy, skip, take, select);
                if (query && transferCriterias) QueryTransferCriterias(where, orderBy, skip, take, select);
                if (query && userAcquisitionsUnits) QueryUserAcquisitionsUnits(where, orderBy, skip, take, select);
                if (query && userRequestPreferences) QueryUserRequestPreferences(where, orderBy, skip, take, select);
                if (query && users) QueryUsers(where, orderBy, skip, take, select);
                if (query && userSummaries) QueryUserSummaries(where, orderBy, skip, take, select);
                if (query && voucherItems) QueryVoucherItems(where, orderBy, skip, take, select);
                if (query && vouchers) QueryVouchers(where, orderBy, skip, take, select);
                if (query && waiveReasons) QueryWaiveReasons(where, orderBy, skip, take, select);
                var l = new List<Action>();
                if (save && acquisitionMethodsPath != null) l.Add(() => SaveAcquisitionMethods(acquisitionMethodsPath, acquisitionMethodsWhere ?? where));
                if (save && actualCostRecordsPath != null) l.Add(() => SaveActualCostRecords(actualCostRecordsPath, actualCostRecordsWhere ?? where));
                if (save && agreementsPath != null) l.Add(() => SaveAgreements(agreementsPath, agreementsWhere ?? where));
                if (save && agreementItemsPath != null) l.Add(() => SaveAgreementItems(agreementItemsPath, agreementItemsWhere ?? where));
                if (save && referenceDatasPath != null) l.Add(() => SaveReferenceDatas(referenceDatasPath, referenceDatasWhere ?? where));
                if (save && rolloversPath != null) l.Add(() => SaveRollovers(rolloversPath, rolloversWhere ?? where));
                if (save && rolloverBudgetsPath != null) l.Add(() => SaveRolloverBudgets(rolloverBudgetsPath, rolloverBudgetsWhere ?? where));
                if (save && rolloverErrorsPath != null) l.Add(() => SaveRolloverErrors(rolloverErrorsPath, rolloverErrorsWhere ?? where));
                if (save && rolloverProgressesPath != null) l.Add(() => SaveRolloverProgresses(rolloverProgressesPath, rolloverProgressesWhere ?? where));
                if (save && configurationsPath != null) l.Add(() => SaveConfigurations(configurationsPath, configurationsWhere ?? where));
                if (save && templatesPath != null) l.Add(() => SaveTemplates(templatesPath, templatesWhere ?? where));
                if (save && customFieldsPath != null) l.Add(() => SaveCustomFields(customFieldsPath, customFieldsWhere ?? where));
                if (save && addressTypesPath != null) l.Add(() => SaveAddressTypes(addressTypesPath, addressTypesWhere ?? where));
                if (save && groupsPath != null) l.Add(() => SaveGroups(groupsPath, groupsWhere ?? where));
                if (save && departmentsPath != null) l.Add(() => SaveDepartments(departmentsPath, departmentsWhere ?? where));
                if (save && usersPath != null) l.Add(() => SaveUsers(usersPath, usersWhere ?? where));
                if (save && proxiesPath != null) l.Add(() => SaveProxies(proxiesPath, proxiesWhere ?? where));
                if (save && blockConditionsPath != null) l.Add(() => SaveBlockConditions(blockConditionsPath, blockConditionsWhere ?? where));
                if (save && blockLimitsPath != null) l.Add(() => SaveBlockLimits(blockLimitsPath, blockLimitsWhere ?? where));
                if (save && userSummariesPath != null) l.Add(() => SaveUserSummaries(userSummariesPath, userSummariesWhere ?? where));
                if (save && loginsPath != null) l.Add(() => SaveLogins(loginsPath, loginsWhere ?? where));
                if (save && permissionsPath != null) l.Add(() => SavePermissions(permissionsPath, permissionsWhere ?? where));
                if (save && permissionsUsersPath != null) l.Add(() => SavePermissionsUsers(permissionsUsersPath, permissionsUsersWhere ?? where));
                if (save && hridSettingsPath != null) l.Add(() => SaveHridSettings(hridSettingsPath, hridSettingsWhere ?? where));
                if (save && instanceNoteTypesPath != null) l.Add(() => SaveInstanceNoteTypes(instanceNoteTypesPath, instanceNoteTypesWhere ?? where));
                if (save && itemDamagedStatusesPath != null) l.Add(() => SaveItemDamagedStatuses(itemDamagedStatusesPath, itemDamagedStatusesWhere ?? where));
                if (save && natureOfContentTermsPath != null) l.Add(() => SaveNatureOfContentTerms(natureOfContentTermsPath, natureOfContentTermsWhere ?? where));
                if (save && sourcesPath != null) l.Add(() => SaveSources(sourcesPath, sourcesWhere ?? where));
                if (save && institutionsPath != null) l.Add(() => SaveInstitutions(institutionsPath, institutionsWhere ?? where));
                if (save && campusesPath != null) l.Add(() => SaveCampuses(campusesPath, campusesWhere ?? where));
                if (save && librariesPath != null) l.Add(() => SaveLibraries(librariesPath, librariesWhere ?? where));
                if (save && servicePointsPath != null) l.Add(() => SaveServicePoints(servicePointsPath, servicePointsWhere ?? where));
                if (save && servicePointUsersPath != null) l.Add(() => SaveServicePointUsers(servicePointUsersPath, servicePointUsersWhere ?? where));
                if (save && locationsPath != null) l.Add(() => SaveLocations(locationsPath, locationsWhere ?? where));
                if (save && alternativeTitleTypesPath != null) l.Add(() => SaveAlternativeTitleTypes(alternativeTitleTypesPath, alternativeTitleTypesWhere ?? where));
                if (save && callNumberTypesPath != null) l.Add(() => SaveCallNumberTypes(callNumberTypesPath, callNumberTypesWhere ?? where));
                if (save && classificationTypesPath != null) l.Add(() => SaveClassificationTypes(classificationTypesPath, classificationTypesWhere ?? where));
                if (save && contributorNameTypesPath != null) l.Add(() => SaveContributorNameTypes(contributorNameTypesPath, contributorNameTypesWhere ?? where));
                if (save && contributorTypesPath != null) l.Add(() => SaveContributorTypes(contributorTypesPath, contributorTypesWhere ?? where));
                if (save && electronicAccessRelationshipsPath != null) l.Add(() => SaveElectronicAccessRelationships(electronicAccessRelationshipsPath, electronicAccessRelationshipsWhere ?? where));
                if (save && holdingNoteTypesPath != null) l.Add(() => SaveHoldingNoteTypes(holdingNoteTypesPath, holdingNoteTypesWhere ?? where));
                if (save && holdingTypesPath != null) l.Add(() => SaveHoldingTypes(holdingTypesPath, holdingTypesWhere ?? where));
                if (save && idTypesPath != null) l.Add(() => SaveIdTypes(idTypesPath, idTypesWhere ?? where));
                if (save && illPoliciesPath != null) l.Add(() => SaveIllPolicies(illPoliciesPath, illPoliciesWhere ?? where));
                if (save && instanceFormatsPath != null) l.Add(() => SaveInstanceFormats(instanceFormatsPath, instanceFormatsWhere ?? where));
                if (save && instanceRelationshipTypesPath != null) l.Add(() => SaveInstanceRelationshipTypes(instanceRelationshipTypesPath, instanceRelationshipTypesWhere ?? where));
                if (save && instanceRelationshipsPath != null) l.Add(() => SaveInstanceRelationships(instanceRelationshipsPath, instanceRelationshipsWhere ?? where));
                if (save && instanceStatusesPath != null) l.Add(() => SaveInstanceStatuses(instanceStatusesPath, instanceStatusesWhere ?? where));
                if (save && instanceTypesPath != null) l.Add(() => SaveInstanceTypes(instanceTypesPath, instanceTypesWhere ?? where));
                if (save && itemNoteTypesPath != null) l.Add(() => SaveItemNoteTypes(itemNoteTypesPath, itemNoteTypesWhere ?? where));
                if (save && loanTypesPath != null) l.Add(() => SaveLoanTypes(loanTypesPath, loanTypesWhere ?? where));
                if (save && materialTypesPath != null) l.Add(() => SaveMaterialTypes(materialTypesPath, materialTypesWhere ?? where));
                if (save && modeOfIssuancesPath != null) l.Add(() => SaveModeOfIssuances(modeOfIssuancesPath, modeOfIssuancesWhere ?? where));
                if (save && statisticalCodeTypesPath != null) l.Add(() => SaveStatisticalCodeTypes(statisticalCodeTypesPath, statisticalCodeTypesWhere ?? where));
                if (save && statisticalCodesPath != null) l.Add(() => SaveStatisticalCodes(statisticalCodesPath, statisticalCodesWhere ?? where));
                if (save && instancesPath != null) l.Add(() => SaveInstances(instancesPath, instancesWhere ?? where));
                if (save && holdingsPath != null) l.Add(() => SaveHoldings(holdingsPath, holdingsWhere ?? where));
                if (save && itemsPath != null) l.Add(() => SaveItems(itemsPath, itemsWhere ?? where));
                if (save && precedingSucceedingTitlesPath != null) l.Add(() => SavePrecedingSucceedingTitles(precedingSucceedingTitlesPath, precedingSucceedingTitlesWhere ?? where));
                if (save && boundWithPartsPath != null) l.Add(() => SaveBoundWithParts(boundWithPartsPath, boundWithPartsWhere ?? where));
                if (save && snapshotsPath != null) l.Add(() => SaveSnapshots(snapshotsPath, snapshotsWhere ?? where));
                if (save && recordsPath != null) l.Add(() => SaveRecords(recordsPath, recordsWhere ?? where));
                if (save && categoriesPath != null) l.Add(() => SaveCategories(categoriesPath, categoriesWhere ?? where));
                if (save && contactsPath != null) l.Add(() => SaveContacts(contactsPath, contactsWhere ?? where));
                if (save && interfacesPath != null) l.Add(() => SaveInterfaces(interfacesPath, interfacesWhere ?? where));
                if (save && interfaceCredentialsPath != null) l.Add(() => SaveInterfaceCredentials(interfaceCredentialsPath, interfaceCredentialsWhere ?? where));
                if (save && organizationsPath != null) l.Add(() => SaveOrganizations(organizationsPath, organizationsWhere ?? where));
                if (save && financeGroupsPath != null) l.Add(() => SaveFinanceGroups(financeGroupsPath, financeGroupsWhere ?? where));
                if (save && fiscalYearsPath != null) l.Add(() => SaveFiscalYears(fiscalYearsPath, fiscalYearsWhere ?? where));
                if (save && ledgersPath != null) l.Add(() => SaveLedgers(ledgersPath, ledgersWhere ?? where));
                if (save && fundTypesPath != null) l.Add(() => SaveFundTypes(fundTypesPath, fundTypesWhere ?? where));
                if (save && fundsPath != null) l.Add(() => SaveFunds(fundsPath, fundsWhere ?? where));
                if (save && budgetsPath != null) l.Add(() => SaveBudgets(budgetsPath, budgetsWhere ?? where));
                if (save && expenseClassesPath != null) l.Add(() => SaveExpenseClasses(expenseClassesPath, expenseClassesWhere ?? where));
                if (save && budgetExpenseClassesPath != null) l.Add(() => SaveBudgetExpenseClasses(budgetExpenseClassesPath, budgetExpenseClassesWhere ?? where));
                if (save && budgetGroupsPath != null) l.Add(() => SaveBudgetGroups(budgetGroupsPath, budgetGroupsWhere ?? where));
                if (save && prefixesPath != null) l.Add(() => SavePrefixes(prefixesPath, prefixesWhere ?? where));
                if (save && suffixesPath != null) l.Add(() => SaveSuffixes(suffixesPath, suffixesWhere ?? where));
                if (save && closeReasonsPath != null) l.Add(() => SaveCloseReasons(closeReasonsPath, closeReasonsWhere ?? where));
                if (save && acquisitionsUnitsPath != null) l.Add(() => SaveAcquisitionsUnits(acquisitionsUnitsPath, acquisitionsUnitsWhere ?? where));
                if (save && userAcquisitionsUnitsPath != null) l.Add(() => SaveUserAcquisitionsUnits(userAcquisitionsUnitsPath, userAcquisitionsUnitsWhere ?? where));
                if (save && reportingCodesPath != null) l.Add(() => SaveReportingCodes(reportingCodesPath, reportingCodesWhere ?? where));
                if (save && alertsPath != null) l.Add(() => SaveAlerts(alertsPath, alertsWhere ?? where));
                if (save && orderTemplatesPath != null) l.Add(() => SaveOrderTemplates(orderTemplatesPath, orderTemplatesWhere ?? where));
                if (save && ordersPath != null) l.Add(() => SaveOrders(ordersPath, ordersWhere ?? where));
                if (save && orderItemsPath != null) l.Add(() => SaveOrderItems(orderItemsPath, orderItemsWhere ?? where));
                if (save && titlesPath != null) l.Add(() => SaveTitles(titlesPath, titlesWhere ?? where));
                if (save && receivingsPath != null) l.Add(() => SaveReceivings(receivingsPath, receivingsWhere ?? where));
                if (save && batchGroupsPath != null) l.Add(() => SaveBatchGroups(batchGroupsPath, batchGroupsWhere ?? where));
                if (save && invoicesPath != null) l.Add(() => SaveInvoices(invoicesPath, invoicesWhere ?? where));
                if (save && invoiceItemsPath != null) l.Add(() => SaveInvoiceItems(invoiceItemsPath, invoiceItemsWhere ?? where));
                if (save && vouchersPath != null) l.Add(() => SaveVouchers(vouchersPath, vouchersWhere ?? where));
                if (save && voucherItemsPath != null) l.Add(() => SaveVoucherItems(voucherItemsPath, voucherItemsWhere ?? where));
                if (save && orderInvoicesPath != null) l.Add(() => SaveOrderInvoices(orderInvoicesPath, orderInvoicesWhere ?? where));
                if (save && cancellationReasonsPath != null) l.Add(() => SaveCancellationReasons(cancellationReasonsPath, cancellationReasonsWhere ?? where));
                if (save && transactionsPath != null) l.Add(() => SaveTransactions(transactionsPath, transactionsWhere ?? where));
                if (save && circulationRulesPath != null) l.Add(() => SaveCirculationRules(circulationRulesPath, circulationRulesWhere ?? where));
                if (save && fixedDueDateSchedulesPath != null) l.Add(() => SaveFixedDueDateSchedules(fixedDueDateSchedulesPath, fixedDueDateSchedulesWhere ?? where));
                if (save && loanPoliciesPath != null) l.Add(() => SaveLoanPolicies(loanPoliciesPath, loanPoliciesWhere ?? where));
                if (save && patronNoticePoliciesPath != null) l.Add(() => SavePatronNoticePolicies(patronNoticePoliciesPath, patronNoticePoliciesWhere ?? where));
                if (save && requestPoliciesPath != null) l.Add(() => SaveRequestPolicies(requestPoliciesPath, requestPoliciesWhere ?? where));
                if (save && loansPath != null) l.Add(() => SaveLoans(loansPath, loansWhere ?? where));
                if (save && loanEventsPath != null) l.Add(() => SaveLoanEvents(loanEventsPath, loanEventsWhere ?? where));
                if (save && requestsPath != null) l.Add(() => SaveRequests(requestsPath, requestsWhere ?? where));
                if (save && scheduledNoticesPath != null) l.Add(() => SaveScheduledNotices(scheduledNoticesPath, scheduledNoticesWhere ?? where));
                if (save && staffSlipsPath != null) l.Add(() => SaveStaffSlips(staffSlipsPath, staffSlipsWhere ?? where));
                if (save && patronActionSessionsPath != null) l.Add(() => SavePatronActionSessions(patronActionSessionsPath, patronActionSessionsWhere ?? where));
                if (save && userRequestPreferencesPath != null) l.Add(() => SaveUserRequestPreferences(userRequestPreferencesPath, userRequestPreferencesWhere ?? where));
                if (save && checkInsPath != null) l.Add(() => SaveCheckIns(checkInsPath, checkInsWhere ?? where));
                if (save && blocksPath != null) l.Add(() => SaveBlocks(blocksPath, blocksWhere ?? where));
                if (save && commentsPath != null) l.Add(() => SaveComments(commentsPath, commentsWhere ?? where));
                if (save && lostItemFeePoliciesPath != null) l.Add(() => SaveLostItemFeePolicies(lostItemFeePoliciesPath, lostItemFeePoliciesWhere ?? where));
                if (save && manualBlockTemplatesPath != null) l.Add(() => SaveManualBlockTemplates(manualBlockTemplatesPath, manualBlockTemplatesWhere ?? where));
                if (save && overdueFinePoliciesPath != null) l.Add(() => SaveOverdueFinePolicies(overdueFinePoliciesPath, overdueFinePoliciesWhere ?? where));
                if (save && ownersPath != null) l.Add(() => SaveOwners(ownersPath, ownersWhere ?? where));
                if (save && paymentMethodsPath != null) l.Add(() => SavePaymentMethods(paymentMethodsPath, paymentMethodsWhere ?? where));
                if (save && refundReasonsPath != null) l.Add(() => SaveRefundReasons(refundReasonsPath, refundReasonsWhere ?? where));
                if (save && transferAccountsPath != null) l.Add(() => SaveTransferAccounts(transferAccountsPath, transferAccountsWhere ?? where));
                if (save && transferCriteriasPath != null) l.Add(() => SaveTransferCriterias(transferCriteriasPath, transferCriteriasWhere ?? where));
                if (save && waiveReasonsPath != null) l.Add(() => SaveWaiveReasons(waiveReasonsPath, waiveReasonsWhere ?? where));
                if (save && feeTypesPath != null) l.Add(() => SaveFeeTypes(feeTypesPath, feeTypesWhere ?? where));
                if (save && feesPath != null) l.Add(() => SaveFees(feesPath, feesWhere ?? where));
                if (save && paymentsPath != null) l.Add(() => SavePayments(paymentsPath, paymentsWhere ?? where));
                if (save && noteTypesPath != null) l.Add(() => SaveNoteTypes(noteTypesPath, noteTypesWhere ?? where));
                if (save && notesPath != null) l.Add(() => SaveNotes(notesPath, notesWhere ?? where));
                if (threads == 1) foreach (var a in l) a(); else l.AsParallel().WithDegreeOfParallelism(threads ?? Environment.ProcessorCount).ForAll(a => a());
                if (delete && (notes || notesPath != null)) DeleteNotes(notesWhere ?? where);
                if (delete && (noteTypes || noteTypesPath != null)) DeleteNoteTypes(noteTypesWhere ?? where);
                if (delete && (payments || paymentsPath != null)) DeletePayments(paymentsWhere ?? where);
                if (delete && (fees || feesPath != null)) DeleteFees(feesWhere ?? where);
                if (delete && (feeTypes || feeTypesPath != null)) DeleteFeeTypes(feeTypesWhere ?? where);
                if (delete && (blocks || blocksPath != null)) DeleteBlocks(blocksWhere ?? where);
                if (delete && (comments || commentsPath != null)) DeleteComments(commentsWhere ?? where);
                if (delete && (lostItemFeePolicies || lostItemFeePoliciesPath != null)) DeleteLostItemFeePolicies(lostItemFeePoliciesWhere ?? where);
                if (delete && (manualBlockTemplates || manualBlockTemplatesPath != null)) DeleteManualBlockTemplates(manualBlockTemplatesWhere ?? where);
                if (delete && (overdueFinePolicies || overdueFinePoliciesPath != null)) DeleteOverdueFinePolicies(overdueFinePoliciesWhere ?? where);
                if (delete && (owners || ownersPath != null)) DeleteOwners(ownersWhere ?? where);
                if (delete && (paymentMethods || paymentMethodsPath != null)) DeletePaymentMethods(paymentMethodsWhere ?? where);
                if (delete && (refundReasons || refundReasonsPath != null)) DeleteRefundReasons(refundReasonsWhere ?? where);
                if (delete && (transferAccounts || transferAccountsPath != null)) DeleteTransferAccounts(transferAccountsWhere ?? where);
                if (delete && (transferCriterias || transferCriteriasPath != null)) DeleteTransferCriterias(transferCriteriasWhere ?? where);
                if (delete && (waiveReasons || waiveReasonsPath != null)) DeleteWaiveReasons(waiveReasonsWhere ?? where);
                if (delete && (checkIns || checkInsPath != null)) DeleteCheckIns(checkInsWhere ?? where);
                if (delete && (userRequestPreferences || userRequestPreferencesPath != null)) DeleteUserRequestPreferences(userRequestPreferencesWhere ?? where);
                if (delete && (patronActionSessions || patronActionSessionsPath != null)) DeletePatronActionSessions(patronActionSessionsWhere ?? where);
                if (delete && (staffSlips || staffSlipsPath != null)) DeleteStaffSlips(staffSlipsWhere ?? where);
                if (delete && (scheduledNotices || scheduledNoticesPath != null)) DeleteScheduledNotices(scheduledNoticesWhere ?? where);
                if (delete && (requests || requestsPath != null)) DeleteRequests(requestsWhere ?? where);
                if (delete && (loanEvents || loanEventsPath != null)) DeleteLoanEvents(loanEventsWhere ?? where);
                if (delete && (loans || loansPath != null)) DeleteLoans(loansWhere ?? where);
                if (delete && (requestPolicies || requestPoliciesPath != null)) DeleteRequestPolicies(requestPoliciesWhere ?? where);
                if (delete && (patronNoticePolicies || patronNoticePoliciesPath != null)) DeletePatronNoticePolicies(patronNoticePoliciesWhere ?? where);
                if (delete && (loanPolicies || loanPoliciesPath != null)) DeleteLoanPolicies(loanPoliciesWhere ?? where);
                if (delete && (fixedDueDateSchedules || fixedDueDateSchedulesPath != null)) DeleteFixedDueDateSchedules(fixedDueDateSchedulesWhere ?? where);
                if (delete && (circulationRules || circulationRulesPath != null)) DeleteCirculationRules(circulationRulesWhere ?? where);
                if (delete && (cancellationReasons || cancellationReasonsPath != null)) DeleteCancellationReasons(cancellationReasonsWhere ?? where);
                if (delete && (transactions || transactionsPath != null)) DeleteTransactions(transactionsWhere ?? where);
                if (delete && (orderInvoices || orderInvoicesPath != null)) DeleteOrderInvoices(orderInvoicesWhere ?? where);
                if (delete && (voucherItems || voucherItemsPath != null)) DeleteVoucherItems(voucherItemsWhere ?? where);
                if (delete && (vouchers || vouchersPath != null)) DeleteVouchers(vouchersWhere ?? where);
                if (delete && (invoiceItems || invoiceItemsPath != null)) DeleteInvoiceItems(invoiceItemsWhere ?? where);
                if (delete && (invoices || invoicesPath != null)) DeleteInvoices(invoicesWhere ?? where);
                if (delete && (batchGroups || batchGroupsPath != null)) DeleteBatchGroups(batchGroupsWhere ?? where);
                if (delete && (receivings || receivingsPath != null)) DeleteReceivings(receivingsWhere ?? where);
                if (delete && (titles || titlesPath != null)) DeleteTitles(titlesWhere ?? where);
                if (delete && (orderItems || orderItemsPath != null)) DeleteOrderItems(orderItemsWhere ?? where);
                if (delete && (orders || ordersPath != null)) DeleteOrders(ordersWhere ?? where);
                if (delete && (orderTemplates || orderTemplatesPath != null)) DeleteOrderTemplates(orderTemplatesWhere ?? where);
                if (delete && (alerts || alertsPath != null)) DeleteAlerts(alertsWhere ?? where);
                if (delete && (reportingCodes || reportingCodesPath != null)) DeleteReportingCodes(reportingCodesWhere ?? where);
                if (delete && (userAcquisitionsUnits || userAcquisitionsUnitsPath != null)) DeleteUserAcquisitionsUnits(userAcquisitionsUnitsWhere ?? where);
                if (delete && (acquisitionsUnits || acquisitionsUnitsPath != null)) DeleteAcquisitionsUnits(acquisitionsUnitsWhere ?? where);
                if (delete && (closeReasons || closeReasonsPath != null)) DeleteCloseReasons(closeReasonsWhere ?? where);
                if (delete && (suffixes || suffixesPath != null)) DeleteSuffixes(suffixesWhere ?? where);
                if (delete && (prefixes || prefixesPath != null)) DeletePrefixes(prefixesWhere ?? where);
                if (delete && (budgetGroups || budgetGroupsPath != null)) DeleteBudgetGroups(budgetGroupsWhere ?? where);
                if (delete && (budgetExpenseClasses || budgetExpenseClassesPath != null)) DeleteBudgetExpenseClasses(budgetExpenseClassesWhere ?? where);
                if (delete && (expenseClasses || expenseClassesPath != null)) DeleteExpenseClasses(expenseClassesWhere ?? where);
                if (delete && (budgets || budgetsPath != null)) DeleteBudgets(budgetsWhere ?? where);
                if (delete && (funds || fundsPath != null)) DeleteFunds(fundsWhere ?? where);
                if (delete && (fundTypes || fundTypesPath != null)) DeleteFundTypes(fundTypesWhere ?? where);
                if (delete && (ledgers || ledgersPath != null)) DeleteLedgers(ledgersWhere ?? where);
                if (delete && (fiscalYears || fiscalYearsPath != null)) DeleteFiscalYears(fiscalYearsWhere ?? where);
                if (delete && (financeGroups || financeGroupsPath != null)) DeleteFinanceGroups(financeGroupsWhere ?? where);
                if (delete && (organizations || organizationsPath != null)) DeleteOrganizations(organizationsWhere ?? where);
                if (delete && (interfaceCredentials || interfaceCredentialsPath != null)) DeleteInterfaceCredentials(interfaceCredentialsWhere ?? where);
                if (delete && (interfaces || interfacesPath != null)) DeleteInterfaces(interfacesWhere ?? where);
                if (delete && (contacts || contactsPath != null)) DeleteContacts(contactsWhere ?? where);
                if (delete && (categories || categoriesPath != null)) DeleteCategories(categoriesWhere ?? where);
                if (delete && (records || recordsPath != null)) DeleteRecords(recordsWhere ?? where);
                if (delete && (snapshots || snapshotsPath != null)) DeleteSnapshots(snapshotsWhere ?? where);
                if (delete && (boundWithParts || boundWithPartsPath != null)) DeleteBoundWithParts(boundWithPartsWhere ?? where);
                if (delete && (precedingSucceedingTitles || precedingSucceedingTitlesPath != null)) DeletePrecedingSucceedingTitles(precedingSucceedingTitlesWhere ?? where);
                if (delete && (items || itemsPath != null)) DeleteItems(itemsWhere ?? where);
                if (delete && (holdings || holdingsPath != null)) DeleteHoldings(holdingsWhere ?? where);
                if (delete && (instances || instancesPath != null)) DeleteInstances(instancesWhere ?? where);
                if (delete && (statisticalCodes || statisticalCodesPath != null)) DeleteStatisticalCodes(statisticalCodesWhere ?? where);
                if (delete && (statisticalCodeTypes || statisticalCodeTypesPath != null)) DeleteStatisticalCodeTypes(statisticalCodeTypesWhere ?? where);
                if (delete && (modeOfIssuances || modeOfIssuancesPath != null)) DeleteModeOfIssuances(modeOfIssuancesWhere ?? where);
                if (delete && (materialTypes || materialTypesPath != null)) DeleteMaterialTypes(materialTypesWhere ?? where);
                if (delete && (loanTypes || loanTypesPath != null)) DeleteLoanTypes(loanTypesWhere ?? where);
                if (delete && (itemNoteTypes || itemNoteTypesPath != null)) DeleteItemNoteTypes(itemNoteTypesWhere ?? where);
                if (delete && (instanceTypes || instanceTypesPath != null)) DeleteInstanceTypes(instanceTypesWhere ?? where);
                if (delete && (instanceStatuses || instanceStatusesPath != null)) DeleteInstanceStatuses(instanceStatusesWhere ?? where);
                if (delete && (instanceRelationships || instanceRelationshipsPath != null)) DeleteInstanceRelationships(instanceRelationshipsWhere ?? where);
                if (delete && (instanceRelationshipTypes || instanceRelationshipTypesPath != null)) DeleteInstanceRelationshipTypes(instanceRelationshipTypesWhere ?? where);
                if (delete && (instanceFormats || instanceFormatsPath != null)) DeleteInstanceFormats(instanceFormatsWhere ?? where);
                if (delete && (illPolicies || illPoliciesPath != null)) DeleteIllPolicies(illPoliciesWhere ?? where);
                if (delete && (idTypes || idTypesPath != null)) DeleteIdTypes(idTypesWhere ?? where);
                if (delete && (holdingTypes || holdingTypesPath != null)) DeleteHoldingTypes(holdingTypesWhere ?? where);
                if (delete && (holdingNoteTypes || holdingNoteTypesPath != null)) DeleteHoldingNoteTypes(holdingNoteTypesWhere ?? where);
                if (delete && (electronicAccessRelationships || electronicAccessRelationshipsPath != null)) DeleteElectronicAccessRelationships(electronicAccessRelationshipsWhere ?? where);
                if (delete && (contributorTypes || contributorTypesPath != null)) DeleteContributorTypes(contributorTypesWhere ?? where);
                if (delete && (contributorNameTypes || contributorNameTypesPath != null)) DeleteContributorNameTypes(contributorNameTypesWhere ?? where);
                if (delete && (classificationTypes || classificationTypesPath != null)) DeleteClassificationTypes(classificationTypesWhere ?? where);
                if (delete && (callNumberTypes || callNumberTypesPath != null)) DeleteCallNumberTypes(callNumberTypesWhere ?? where);
                if (delete && (alternativeTitleTypes || alternativeTitleTypesPath != null)) DeleteAlternativeTitleTypes(alternativeTitleTypesWhere ?? where);
                if (delete && (locations || locationsPath != null)) DeleteLocations(locationsWhere ?? where);
                if (delete && (servicePointUsers || servicePointUsersPath != null)) DeleteServicePointUsers(servicePointUsersWhere ?? where);
                if (delete && (servicePoints || servicePointsPath != null)) DeleteServicePoints(servicePointsWhere ?? where);
                if (delete && (libraries || librariesPath != null)) DeleteLibraries(librariesWhere ?? where);
                if (delete && (campuses || campusesPath != null)) DeleteCampuses(campusesWhere ?? where);
                if (delete && (institutions || institutionsPath != null)) DeleteInstitutions(institutionsWhere ?? where);
                if (delete && (hridSettings || hridSettingsPath != null)) DeleteHridSettings(hridSettingsWhere ?? where);
                if (delete && (instanceNoteTypes || instanceNoteTypesPath != null)) DeleteInstanceNoteTypes(instanceNoteTypesWhere ?? where);
                if (delete && (itemDamagedStatuses || itemDamagedStatusesPath != null)) DeleteItemDamagedStatuses(itemDamagedStatusesWhere ?? where);
                if (delete && (natureOfContentTerms || natureOfContentTermsPath != null)) DeleteNatureOfContentTerms(natureOfContentTermsWhere ?? where);
                if (delete && (sources || sourcesPath != null)) DeleteSources(sourcesWhere ?? where);
                if (delete && (permissionsUsers || permissionsUsersPath != null)) DeletePermissionsUsers(permissionsUsersWhere ?? where);
                if (delete && (permissions || permissionsPath != null)) DeletePermissions(permissionsWhere ?? where);
                if (delete && (logins || loginsPath != null)) DeleteLogins(loginsWhere ?? where);
                if (delete && (userSummaries || userSummariesPath != null)) DeleteUserSummaries(userSummariesWhere ?? where);
                if (delete && (blockLimits || blockLimitsPath != null)) DeleteBlockLimits(blockLimitsWhere ?? where);
                if (delete && (blockConditions || blockConditionsPath != null)) DeleteBlockConditions(blockConditionsWhere ?? where);
                if (delete && (proxies || proxiesPath != null)) DeleteProxies(proxiesWhere ?? where);
                if (delete && (users || usersPath != null)) DeleteUsers(usersWhere ?? where);
                if (delete && (departments || departmentsPath != null)) DeleteDepartments(departmentsWhere ?? where);
                if (delete && (groups || groupsPath != null)) DeleteGroups(groupsWhere ?? where);
                if (delete && (addressTypes || addressTypesPath != null)) DeleteAddressTypes(addressTypesWhere ?? where);
                if (delete && (customFields || customFieldsPath != null)) DeleteCustomFields(customFieldsWhere ?? where);
                if (delete && (templates || templatesPath != null)) DeleteTemplates(templatesWhere ?? where);
                if (delete && (configurations || configurationsPath != null)) DeleteConfigurations(configurationsWhere ?? where);
                if (delete && (acquisitionMethods || acquisitionMethodsPath != null)) DeleteAcquisitionMethods(acquisitionMethodsWhere ?? where);
                if (delete && (actualCostRecords || actualCostRecordsPath != null)) DeleteActualCostRecords(actualCostRecordsWhere ?? where);
                if (delete && (agreements || agreementsPath != null)) DeleteAgreements(agreementsWhere ?? where);
                if (delete && (agreementItems || agreementItemsPath != null)) DeleteAgreementItems(agreementItemsWhere ?? where);
                if (delete && (referenceDatas || referenceDatasPath != null)) DeleteReferenceDatas(referenceDatasWhere ?? where);
                if (delete && (rollovers || rolloversPath != null)) DeleteRollovers(rolloversWhere ?? where);
                if (delete && (rolloverBudgets || rolloverBudgetsPath != null)) DeleteRolloverBudgets(rolloverBudgetsWhere ?? where);
                if (delete && (rolloverErrors || rolloverErrorsPath != null)) DeleteRolloverErrors(rolloverErrorsWhere ?? where);
                if (delete && (rolloverProgresses || rolloverProgressesPath != null)) DeleteRolloverProgresses(rolloverProgressesWhere ?? where);
                if (import && usersPath != null) ImportUsers(usersPath, source, disable, merge);
                if (load && acquisitionMethodsPath != null) LoadAcquisitionMethods(acquisitionMethodsPath);
                if (load && actualCostRecordsPath != null) LoadActualCostRecords(actualCostRecordsPath);
                if (load && agreementsPath != null) LoadAgreements(agreementsPath);
                if (load && agreementItemsPath != null) LoadAgreementItems(agreementItemsPath);
                if (load && referenceDatasPath != null) LoadReferenceDatas(referenceDatasPath);
                if (load && rolloversPath != null) LoadRollovers(rolloversPath);
                if (load && rolloverBudgetsPath != null) LoadRolloverBudgets(rolloverBudgetsPath);
                if (load && rolloverErrorsPath != null) LoadRolloverErrors(rolloverErrorsPath);
                if (load && rolloverProgressesPath != null) LoadRolloverProgresses(rolloverProgressesPath);
                if (load && configurationsPath != null) LoadConfigurations(configurationsPath);
                if (load && templatesPath != null) LoadTemplates(templatesPath);
                if (load && customFieldsPath != null) LoadCustomFields(customFieldsPath);
                if (load && addressTypesPath != null) LoadAddressTypes(addressTypesPath);
                if (load && groupsPath != null) LoadGroups(groupsPath);
                if (load && departmentsPath != null) LoadDepartments(departmentsPath);
                if (load && usersPath != null) LoadUsers(usersPath);
                if (load && proxiesPath != null) LoadProxies(proxiesPath);
                if (load && blockConditionsPath != null) LoadBlockConditions(blockConditionsPath);
                if (load && blockLimitsPath != null) LoadBlockLimits(blockLimitsPath);
                if (load && userSummariesPath != null) LoadUserSummaries(userSummariesPath);
                if (load && loginsPath != null) LoadLogins(loginsPath);
                if (load && permissionsPath != null) LoadPermissions(permissionsPath);
                if (load && permissionsUsersPath != null) LoadPermissionsUsers(permissionsUsersPath);
                if (load && hridSettingsPath != null) LoadHridSettings(hridSettingsPath);
                if (load && instanceNoteTypesPath != null) LoadInstanceNoteTypes(instanceNoteTypesPath);
                if (load && itemDamagedStatusesPath != null) LoadItemDamagedStatuses(itemDamagedStatusesPath);
                if (load && natureOfContentTermsPath != null) LoadNatureOfContentTerms(natureOfContentTermsPath);
                if (load && sourcesPath != null) LoadSources(sourcesPath);
                if (load && institutionsPath != null) LoadInstitutions(institutionsPath);
                if (load && campusesPath != null) LoadCampuses(campusesPath);
                if (load && librariesPath != null) LoadLibraries(librariesPath);
                if (load && servicePointsPath != null) LoadServicePoints(servicePointsPath);
                if (load && servicePointUsersPath != null) LoadServicePointUsers(servicePointUsersPath);
                if (load && locationsPath != null) LoadLocations(locationsPath);
                if (load && alternativeTitleTypesPath != null) LoadAlternativeTitleTypes(alternativeTitleTypesPath);
                if (load && callNumberTypesPath != null) LoadCallNumberTypes(callNumberTypesPath);
                if (load && classificationTypesPath != null) LoadClassificationTypes(classificationTypesPath);
                if (load && contributorNameTypesPath != null) LoadContributorNameTypes(contributorNameTypesPath);
                if (load && contributorTypesPath != null) LoadContributorTypes(contributorTypesPath);
                if (load && electronicAccessRelationshipsPath != null) LoadElectronicAccessRelationships(electronicAccessRelationshipsPath);
                if (load && holdingNoteTypesPath != null) LoadHoldingNoteTypes(holdingNoteTypesPath);
                if (load && holdingTypesPath != null) LoadHoldingTypes(holdingTypesPath);
                if (load && idTypesPath != null) LoadIdTypes(idTypesPath);
                if (load && illPoliciesPath != null) LoadIllPolicies(illPoliciesPath);
                if (load && instanceFormatsPath != null) LoadInstanceFormats(instanceFormatsPath);
                if (load && instanceRelationshipTypesPath != null) LoadInstanceRelationshipTypes(instanceRelationshipTypesPath);
                if (load && instanceRelationshipsPath != null) LoadInstanceRelationships(instanceRelationshipsPath);
                if (load && instanceStatusesPath != null) LoadInstanceStatuses(instanceStatusesPath);
                if (load && instanceTypesPath != null) LoadInstanceTypes(instanceTypesPath);
                if (load && itemNoteTypesPath != null) LoadItemNoteTypes(itemNoteTypesPath);
                if (load && loanTypesPath != null) LoadLoanTypes(loanTypesPath);
                if (load && materialTypesPath != null) LoadMaterialTypes(materialTypesPath);
                if (load && modeOfIssuancesPath != null) LoadModeOfIssuances(modeOfIssuancesPath);
                if (load && statisticalCodeTypesPath != null) LoadStatisticalCodeTypes(statisticalCodeTypesPath);
                if (load && statisticalCodesPath != null) LoadStatisticalCodes(statisticalCodesPath);
                if (load && instancesPath != null) LoadInstances(instancesPath);
                if (load && holdingsPath != null) LoadHoldings(holdingsPath);
                if (load && itemsPath != null) LoadItems(itemsPath);
                if (load && precedingSucceedingTitlesPath != null) LoadPrecedingSucceedingTitles(precedingSucceedingTitlesPath);
                if (load && boundWithPartsPath != null) LoadBoundWithParts(boundWithPartsPath);
                if (load && snapshotsPath != null) LoadSnapshots(snapshotsPath);
                if (load && recordsPath != null) LoadRecords(recordsPath);
                if (load && categoriesPath != null) LoadCategories(categoriesPath);
                if (load && contactsPath != null) LoadContacts(contactsPath);
                if (load && interfacesPath != null) LoadInterfaces(interfacesPath);
                if (load && interfaceCredentialsPath != null) LoadInterfaceCredentials(interfaceCredentialsPath);
                if (load && organizationsPath != null) LoadOrganizations(organizationsPath);
                if (load && financeGroupsPath != null) LoadFinanceGroups(financeGroupsPath);
                if (load && fiscalYearsPath != null) LoadFiscalYears(fiscalYearsPath);
                if (load && ledgersPath != null) LoadLedgers(ledgersPath);
                if (load && fundTypesPath != null) LoadFundTypes(fundTypesPath);
                if (load && fundsPath != null) LoadFunds(fundsPath);
                if (load && budgetsPath != null) LoadBudgets(budgetsPath);
                if (load && expenseClassesPath != null) LoadExpenseClasses(expenseClassesPath);
                if (load && budgetExpenseClassesPath != null) LoadBudgetExpenseClasses(budgetExpenseClassesPath);
                if (load && budgetGroupsPath != null) LoadBudgetGroups(budgetGroupsPath);
                if (load && prefixesPath != null) LoadPrefixes(prefixesPath);
                if (load && suffixesPath != null) LoadSuffixes(suffixesPath);
                if (load && closeReasonsPath != null) LoadCloseReasons(closeReasonsPath);
                if (load && acquisitionsUnitsPath != null) LoadAcquisitionsUnits(acquisitionsUnitsPath);
                if (load && userAcquisitionsUnitsPath != null) LoadUserAcquisitionsUnits(userAcquisitionsUnitsPath);
                if (load && reportingCodesPath != null) LoadReportingCodes(reportingCodesPath);
                if (load && alertsPath != null) LoadAlerts(alertsPath);
                if (load && orderTemplatesPath != null) LoadOrderTemplates(orderTemplatesPath);
                if (load && ordersPath != null) LoadOrders(ordersPath);
                if (load && orderItemsPath != null) LoadOrderItems(orderItemsPath);
                if (load && titlesPath != null) LoadTitles(titlesPath);
                if (load && receivingsPath != null) LoadReceivings(receivingsPath);
                if (load && batchGroupsPath != null) LoadBatchGroups(batchGroupsPath);
                if (load && invoicesPath != null) LoadInvoices(invoicesPath);
                if (load && invoiceItemsPath != null) LoadInvoiceItems(invoiceItemsPath);
                if (load && vouchersPath != null) LoadVouchers(vouchersPath);
                if (load && voucherItemsPath != null) LoadVoucherItems(voucherItemsPath);
                if (load && orderInvoicesPath != null) LoadOrderInvoices(orderInvoicesPath);
                if (load && cancellationReasonsPath != null) LoadCancellationReasons(cancellationReasonsPath);
                if (load && transactionsPath != null) LoadTransactions(transactionsPath);
                if (load && circulationRulesPath != null) LoadCirculationRules(circulationRulesPath);
                if (load && fixedDueDateSchedulesPath != null) LoadFixedDueDateSchedules(fixedDueDateSchedulesPath);
                if (load && loanPoliciesPath != null) LoadLoanPolicies(loanPoliciesPath);
                if (load && patronNoticePoliciesPath != null) LoadPatronNoticePolicies(patronNoticePoliciesPath);
                if (load && requestPoliciesPath != null) LoadRequestPolicies(requestPoliciesPath);
                if (load && loansPath != null) LoadLoans(loansPath);
                if (load && loanEventsPath != null) LoadLoanEvents(loanEventsPath);
                if (load && requestsPath != null) LoadRequests(requestsPath);
                if (load && scheduledNoticesPath != null) LoadScheduledNotices(scheduledNoticesPath);
                if (load && staffSlipsPath != null) LoadStaffSlips(staffSlipsPath);
                if (load && patronActionSessionsPath != null) LoadPatronActionSessions(patronActionSessionsPath);
                if (load && userRequestPreferencesPath != null) LoadUserRequestPreferences(userRequestPreferencesPath);
                if (load && checkInsPath != null) LoadCheckIns(checkInsPath);
                if (load && blocksPath != null) LoadBlocks(blocksPath);
                if (load && commentsPath != null) LoadComments(commentsPath);
                if (load && lostItemFeePoliciesPath != null) LoadLostItemFeePolicies(lostItemFeePoliciesPath);
                if (load && manualBlockTemplatesPath != null) LoadManualBlockTemplates(manualBlockTemplatesPath);
                if (load && overdueFinePoliciesPath != null) LoadOverdueFinePolicies(overdueFinePoliciesPath);
                if (load && ownersPath != null) LoadOwners(ownersPath);
                if (load && paymentMethodsPath != null) LoadPaymentMethods(paymentMethodsPath);
                if (load && refundReasonsPath != null) LoadRefundReasons(refundReasonsPath);
                if (load && transferAccountsPath != null) LoadTransferAccounts(transferAccountsPath);
                if (load && transferCriteriasPath != null) LoadTransferCriterias(transferCriteriasPath);
                if (load && waiveReasonsPath != null) LoadWaiveReasons(waiveReasonsPath);
                if (load && feeTypesPath != null) LoadFeeTypes(feeTypesPath);
                if (load && feesPath != null) LoadFees(feesPath);
                if (load && paymentsPath != null) LoadPayments(paymentsPath);
                if (load && noteTypesPath != null) LoadNoteTypes(noteTypesPath);
                if (load && notesPath != null) LoadNotes(notesPath);
                if (update && usersPath != null) UpdateUsers(usersPath, usersWhere ?? where, disable);
                if (convertUsers) ConvertUsers();
                if (saveVouchers) SaveVouchers();
                if (updateVouchers) UpdateVouchers();
            }
            catch (Exception e)
            {
                traceSource.TraceEvent(TraceEventType.Critical, 0, e.ToString());
                if (smtpHost != null && emailAddress != null && emailName != null) using (var sc = new SmtpClient(smtpHost)) sc.Send(new MailMessage(new MailAddress(emailAddress, "FolioConsoleApplication"), new MailAddress(emailAddress, emailName)) { Subject = $"FolioConsoleApplication Exception", Body = e.ToString() });
                return -1;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Information, 0, "Ending");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
            }
            return 0;
        }

        public static void Initialize()
        {
            var path = Path.Combine(Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName), "ConnectionStrings.config");
            if (!File.Exists(path))
            {
                File.WriteAllText(path, "<connectionStrings>\r\n  <add name=\"FolioContext\" providerName=\"Npgsql\" connectionString=\"Host=localhost;Username=postgres;Password=;Database=folio\" />\r\n  <add name=\"FolioServiceClient\" connectionString=\"http://localhost:9130/uchicago?username=uchicago_admin&amp;password=\" />\r\n</connectionStrings>");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Created {path}");
            }
            path = Path.Combine(Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName), "AppSettings.config");
            if (!File.Exists(path))
            {
                File.WriteAllText(path, "<appSettings>\r\n  <!--<add key=\"smtpHost\" value=\"\"/>\r\n  <add key=\"emailAddress\" value=\"\"/>\r\n  <add key=\"emailName\" value=\"\"/>-->\r\n</appSettings>");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Created {path}");
            }
        }

        public static void CountAcquisitionMethods(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAcquisitionMethods(where) : fdc.CountAcquisitionMethods(where))} acquisition methods");
            }
        }

        public static void QueryAcquisitionMethods(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.AcquisitionMethods(where, orderBy, skip, take) : fdc.AcquisitionMethods(where, null, orderBy, skip, take).Select(am => am.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAcquisitionMethods(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting acquisition methods");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.AcquisitionMethods(where))
                    {
                        if (!whatIf) fsc.DeleteAcquisitionMethod((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.acquisition_method{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} acquisition methods");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAcquisitionMethods(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading acquisition methods");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AcquisitionMethod.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AcquisitionMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AcquisitionMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAcquisitionMethod(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(AcquisitionMethod.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} acquisition methods");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAcquisitionMethods(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving acquisition methods");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AcquisitionMethod.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.AcquisitionMethods(where, orderBy, skip, take) : fdc.AcquisitionMethods(where, null, orderBy, skip, take).Select(am => am.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AcquisitionMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AcquisitionMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} acquisition methods");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountAcquisitionsUnits(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAcquisitionsUnits(where) : fdc.CountAcquisitionsUnits(where))} acquisitions units");
            }
        }

        public static void QueryAcquisitionsUnits(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.AcquisitionsUnits(where, orderBy, skip, take) : fdc.AcquisitionsUnits(where, null, orderBy, skip, take).Select(au => au.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAcquisitionsUnits(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting acquisitions units");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.AcquisitionsUnits(where))
                    {
                        if (!whatIf) fsc.DeleteAcquisitionsUnit((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.acquisitions_unit{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} acquisitions units");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAcquisitionsUnits(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading acquisitions units");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AcquisitionsUnit.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAcquisitionsUnit(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(AcquisitionsUnit.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} acquisitions units");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAcquisitionsUnits(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving acquisitions units");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AcquisitionsUnit.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.AcquisitionsUnits(where, orderBy, skip, take) : fdc.AcquisitionsUnits(where, null, orderBy, skip, take).Select(au => au.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} acquisitions units");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountActualCostRecords(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountActualCostRecords(where) : fdc.CountActualCostRecords(where))} actual cost records");
            }
        }

        public static void QueryActualCostRecords(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ActualCostRecords(where, orderBy, skip, take) : fdc.ActualCostRecords(where, null, orderBy, skip, take).Select(acr => acr.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteActualCostRecords(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting actual cost records");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ActualCostRecords(where))
                    {
                        if (!whatIf) fsc.DeleteActualCostRecord((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.actual_cost_record{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} actual cost records");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadActualCostRecords(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading actual cost records");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ActualCostRecord.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ActualCostRecord {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ActualCostRecord {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertActualCostRecord(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ActualCostRecord.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} actual cost records");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveActualCostRecords(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving actual cost records");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ActualCostRecord.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ActualCostRecords(where, orderBy, skip, take) : fdc.ActualCostRecords(where, null, orderBy, skip, take).Select(acr => acr.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ActualCostRecord {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ActualCostRecord {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} actual cost records");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountAddressTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAddressTypes(where) : fdc.CountAddressTypes(where))} address types");
            }
        }

        public static void QueryAddressTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.AddressTypes(where, orderBy, skip, take) : fdc.AddressTypes(where, null, orderBy, skip, take).Select(at => at.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAddressTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting address types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.AddressTypes(where))
                    {
                        if (!whatIf) fsc.DeleteAddressType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_users.addresstype{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} address types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAddressTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading address types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AddressType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AddressType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AddressType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAddressType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(AddressType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} address types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAddressTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving address types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AddressType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.AddressTypes(where, orderBy, skip, take) : fdc.AddressTypes(where, null, orderBy, skip, take).Select(at => at.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AddressType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AddressType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} address types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountAgreements(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAgreements(where) : fdc.CountAgreements(where))} agreements");
            }
        }

        public static void QueryAgreements(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Agreements(where, orderBy, skip, take) : fdc.Agreements(where, null, orderBy, skip, take).Select(a => a.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAgreements(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting agreements");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Agreements(where))
                    {
                        if (!whatIf) fsc.DeleteAgreement((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uc_agreements.agreements{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} agreements");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAgreements(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading agreements");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Agreement.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Agreement {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Agreement {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAgreement(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Agreement.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} agreements");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAgreements(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving agreements");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Agreement.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Agreements(where, orderBy, skip, take) : fdc.Agreements(where, null, orderBy, skip, take).Select(a => a.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Agreement {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Agreement {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} agreements");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountAgreementItems(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAgreementItems(where) : fdc.CountAgreementItems(where))} agreement items");
            }
        }

        public static void QueryAgreementItems(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.AgreementItems(where, orderBy, skip, take) : fdc.AgreementItems(where, null, orderBy, skip, take).Select(ai => ai.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAgreementItems(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting agreement items");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.AgreementItems(where))
                    {
                        if (!whatIf) fsc.DeleteAgreementItem((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uc_agreements.agreement_items{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} agreement items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAgreementItems(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading agreement items");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AgreementItem.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AgreementItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AgreementItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAgreementItem(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(AgreementItem.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} agreement items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAgreementItems(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving agreement items");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AgreementItem.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.AgreementItems(where, orderBy, skip, take) : fdc.AgreementItems(where, null, orderBy, skip, take).Select(ai => ai.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AgreementItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AgreementItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} agreement items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountAlerts(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAlerts(where) : fdc.CountAlerts(where))} alerts");
            }
        }

        public static void QueryAlerts(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Alerts(where, orderBy, skip, take) : fdc.Alerts(where, null, orderBy, skip, take).Select(a => a.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAlerts(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting alerts");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Alerts(where))
                    {
                        if (!whatIf) fsc.DeleteAlert((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.alert{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} alerts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAlerts(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading alerts");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Alert.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Alert {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Alert {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAlert(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Alert.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} alerts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAlerts(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving alerts");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Alert.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Alerts(where, orderBy, skip, take) : fdc.Alerts(where, null, orderBy, skip, take).Select(a => a.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Alert {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Alert {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} alerts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountAlternativeTitleTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountAlternativeTitleTypes(where) : fdc.CountAlternativeTitleTypes(where))} alternative title types");
            }
        }

        public static void QueryAlternativeTitleTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.AlternativeTitleTypes(where, orderBy, skip, take) : fdc.AlternativeTitleTypes(where, null, orderBy, skip, take).Select(att => att.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteAlternativeTitleTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting alternative title types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.AlternativeTitleTypes(where))
                    {
                        if (!whatIf) fsc.DeleteAlternativeTitleType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.alternative_title_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} alternative title types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadAlternativeTitleTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading alternative title types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AlternativeTitleType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AlternativeTitleType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AlternativeTitleType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertAlternativeTitleType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(AlternativeTitleType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} alternative title types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveAlternativeTitleTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving alternative title types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.AlternativeTitleType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.AlternativeTitleTypes(where, orderBy, skip, take) : fdc.AlternativeTitleTypes(where, null, orderBy, skip, take).Select(att => att.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"AlternativeTitleType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"AlternativeTitleType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} alternative title types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBatchGroups(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBatchGroups(where) : fdc.CountBatchGroups(where))} batch groups");
            }
        }

        public static void QueryBatchGroups(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.BatchGroups(where, orderBy, skip, take) : fdc.BatchGroups(where, null, orderBy, skip, take).Select(bg => bg.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBatchGroups(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting batch groups");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.BatchGroups(where))
                    {
                        if (!whatIf) fsc.DeleteBatchGroup((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_invoice_storage.batch_groups{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} batch groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBatchGroups(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading batch groups");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BatchGroup.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BatchGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BatchGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBatchGroup(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(BatchGroup.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} batch groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBatchGroups(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving batch groups");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BatchGroup.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.BatchGroups(where, orderBy, skip, take) : fdc.BatchGroups(where, null, orderBy, skip, take).Select(bg => bg.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BatchGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BatchGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} batch groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBlocks(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBlocks(where) : fdc.CountBlocks(where))} blocks");
            }
        }

        public static void QueryBlocks(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Blocks(where, orderBy, skip, take) : fdc.Blocks(where, null, orderBy, skip, take).Select(b => b.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBlocks(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting blocks");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Blocks(where))
                    {
                        if (!whatIf) fsc.DeleteBlock((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.manualblocks{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} blocks");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBlocks(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading blocks");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Block.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Block {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Block {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBlock(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Block.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} blocks");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBlocks(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving blocks");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Block.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Blocks(where, orderBy, skip, take) : fdc.Blocks(where, null, orderBy, skip, take).Select(b => b.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Block {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Block {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} blocks");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBlockConditions(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBlockConditions(where) : fdc.CountBlockConditions(where))} block conditions");
            }
        }

        public static void QueryBlockConditions(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.BlockConditions(where, orderBy, skip, take) : fdc.BlockConditions(where, null, orderBy, skip, take).Select(bc => bc.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBlockConditions(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting block conditions");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.BlockConditions(where))
                    {
                        if (!whatIf) fsc.DeleteBlockCondition((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_patron_blocks.patron_block_conditions{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} block conditions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBlockConditions(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading block conditions");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BlockCondition.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BlockCondition {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BlockCondition {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBlockCondition(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(BlockCondition.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} block conditions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBlockConditions(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving block conditions");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BlockCondition.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.BlockConditions(where, orderBy, skip, take) : fdc.BlockConditions(where, null, orderBy, skip, take).Select(bc => bc.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BlockCondition {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BlockCondition {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} block conditions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBlockLimits(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBlockLimits(where) : fdc.CountBlockLimits(where))} block limits");
            }
        }

        public static void QueryBlockLimits(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.BlockLimits(where, orderBy, skip, take) : fdc.BlockLimits(where, null, orderBy, skip, take).Select(bl => bl.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBlockLimits(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting block limits");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.BlockLimits(where))
                    {
                        if (!whatIf) fsc.DeleteBlockLimit((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_patron_blocks.patron_block_limits{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} block limits");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBlockLimits(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading block limits");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BlockLimit.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BlockLimit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BlockLimit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBlockLimit(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(BlockLimit.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} block limits");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBlockLimits(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving block limits");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BlockLimit.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.BlockLimits(where, orderBy, skip, take) : fdc.BlockLimits(where, null, orderBy, skip, take).Select(bl => bl.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BlockLimit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BlockLimit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} block limits");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBoundWithParts(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBoundWithParts(where) : fdc.CountBoundWithParts(where))} bound with parts");
            }
        }

        public static void QueryBoundWithParts(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.BoundWithParts(where, orderBy, skip, take) : fdc.BoundWithParts(where, null, orderBy, skip, take).Select(bwp => bwp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBoundWithParts(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting bound with parts");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.BoundWithParts(where))
                    {
                        if (!whatIf) fsc.DeleteBoundWithPart((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.bound_with_part{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} bound with parts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBoundWithParts(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading bound with parts");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BoundWithPart.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BoundWithPart {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BoundWithPart {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBoundWithPart(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(BoundWithPart.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} bound with parts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBoundWithParts(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving bound with parts");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BoundWithPart.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.BoundWithParts(where, orderBy, skip, take) : fdc.BoundWithParts(where, null, orderBy, skip, take).Select(bwp => bwp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BoundWithPart {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BoundWithPart {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} bound with parts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBudgets(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBudgets(where) : fdc.CountBudgets(where))} budgets");
            }
        }

        public static void QueryBudgets(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Budgets(where, orderBy, skip, take) : fdc.Budgets(where, null, orderBy, skip, take).Select(b => b.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBudgets(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting budgets");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Budgets(where))
                    {
                        if (!whatIf) fsc.DeleteBudget((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.budget{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} budgets");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBudgets(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading budgets");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Budget.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Budget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Budget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBudget(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Budget.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} budgets");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBudgets(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving budgets");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Budget.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Budgets(where, orderBy, skip, take) : fdc.Budgets(where, null, orderBy, skip, take).Select(b => b.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Budget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Budget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} budgets");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBudgetExpenseClasses(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBudgetExpenseClasses(where) : fdc.CountBudgetExpenseClasses(where))} budget expense classes");
            }
        }

        public static void QueryBudgetExpenseClasses(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.BudgetExpenseClasses(where, orderBy, skip, take) : fdc.BudgetExpenseClasses(where, null, orderBy, skip, take).Select(bec => bec.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBudgetExpenseClasses(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting budget expense classes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.BudgetExpenseClasses(where))
                    {
                        if (!whatIf) fsc.DeleteBudgetExpenseClass((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.budget_expense_class{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} budget expense classes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBudgetExpenseClasses(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading budget expense classes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BudgetExpenseClass.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BudgetExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BudgetExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBudgetExpenseClass(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(BudgetExpenseClass.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} budget expense classes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBudgetExpenseClasses(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving budget expense classes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BudgetExpenseClass.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.BudgetExpenseClasses(where, orderBy, skip, take) : fdc.BudgetExpenseClasses(where, null, orderBy, skip, take).Select(bec => bec.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BudgetExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BudgetExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} budget expense classes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountBudgetGroups(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountBudgetGroups(where) : fdc.CountBudgetGroups(where))} budget groups");
            }
        }

        public static void QueryBudgetGroups(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.BudgetGroups(where, orderBy, skip, take) : fdc.BudgetGroups(where, null, orderBy, skip, take).Select(bg => bg.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteBudgetGroups(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting budget groups");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.BudgetGroups(where))
                    {
                        if (!whatIf) fsc.DeleteBudgetGroup((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.group_fund_fiscal_year{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} budget groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadBudgetGroups(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading budget groups");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BudgetGroup.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BudgetGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BudgetGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertBudgetGroup(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(BudgetGroup.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} budget groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveBudgetGroups(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving budget groups");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.BudgetGroup.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.BudgetGroups(where, orderBy, skip, take) : fdc.BudgetGroups(where, null, orderBy, skip, take).Select(bg => bg.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"BudgetGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"BudgetGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} budget groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCallNumberTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCallNumberTypes(where) : fdc.CountCallNumberTypes(where))} call number types");
            }
        }

        public static void QueryCallNumberTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.CallNumberTypes(where, orderBy, skip, take) : fdc.CallNumberTypes(where, null, orderBy, skip, take).Select(cnt => cnt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCallNumberTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting call number types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.CallNumberTypes(where))
                    {
                        if (!whatIf) fsc.DeleteCallNumberType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.call_number_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} call number types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCallNumberTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading call number types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CallNumberType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CallNumberType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CallNumberType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCallNumberType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(CallNumberType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} call number types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCallNumberTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving call number types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CallNumberType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.CallNumberTypes(where, orderBy, skip, take) : fdc.CallNumberTypes(where, null, orderBy, skip, take).Select(cnt => cnt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CallNumberType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CallNumberType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} call number types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCampuses(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCampuses(where) : fdc.CountCampuses(where))} campuses");
            }
        }

        public static void QueryCampuses(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Campuses(where, orderBy, skip, take) : fdc.Campuses(where, null, orderBy, skip, take).Select(c => c.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCampuses(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting campuses");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Campuses(where))
                    {
                        if (!whatIf) fsc.DeleteCampus((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.loccampus{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} campuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCampuses(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading campuses");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Campus.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Campus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Campus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCampus(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Campus.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} campuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCampuses(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving campuses");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Campus.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Campuses(where, orderBy, skip, take) : fdc.Campuses(where, null, orderBy, skip, take).Select(c => c.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Campus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Campus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} campuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCancellationReasons(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCancellationReasons(where) : fdc.CountCancellationReasons(where))} cancellation reasons");
            }
        }

        public static void QueryCancellationReasons(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.CancellationReasons(where, orderBy, skip, take) : fdc.CancellationReasons(where, null, orderBy, skip, take).Select(cr => cr.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCancellationReasons(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting cancellation reasons");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.CancellationReasons(where))
                    {
                        if (!whatIf) fsc.DeleteCancellationReason((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.cancellation_reason{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} cancellation reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCancellationReasons(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading cancellation reasons");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CancellationReason.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CancellationReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CancellationReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCancellationReason(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(CancellationReason.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} cancellation reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCancellationReasons(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving cancellation reasons");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CancellationReason.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.CancellationReasons(where, orderBy, skip, take) : fdc.CancellationReasons(where, null, orderBy, skip, take).Select(cr => cr.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CancellationReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CancellationReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} cancellation reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCategories(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCategories(where) : fdc.CountCategories(where))} categories");
            }
        }

        public static void QueryCategories(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Categories(where, orderBy, skip, take) : fdc.Categories(where, null, orderBy, skip, take).Select(c => c.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCategories(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting categories");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Categories(where))
                    {
                        if (!whatIf) fsc.DeleteCategory((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_organizations_storage.categories{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} categories");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCategories(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading categories");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Category.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Category {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Category {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCategory(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Category.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} categories");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCategories(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving categories");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Category.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Categories(where, orderBy, skip, take) : fdc.Categories(where, null, orderBy, skip, take).Select(c => c.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Category {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Category {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} categories");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCheckIns(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCheckIns(where) : fdc.CountCheckIns(where))} check ins");
            }
        }

        public static void QueryCheckIns(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.CheckIns(where, orderBy, skip, take) : fdc.CheckIns(where, null, orderBy, skip, take).Select(ci => ci.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCheckIns(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting check ins");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.CheckIns(where))
                    {
                        if (!whatIf) fsc.DeleteCheckIn((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.check_in{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} check ins");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCheckIns(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading check ins");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CheckIn.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CheckIn {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CheckIn {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCheckIn(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(CheckIn.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} check ins");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCheckIns(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving check ins");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CheckIn.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.CheckIns(where, orderBy, skip, take) : fdc.CheckIns(where, null, orderBy, skip, take).Select(ci => ci.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CheckIn {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CheckIn {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} check ins");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCirculationRules(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? 1 : fdc.CountCirculationRules(where))} circulation rules");
            }
        }

        public static void QueryCirculationRules(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? new[] { fsc.GetCirculationRule() } : fdc.CirculationRules(where, null, orderBy, skip, take).Select(cr => cr.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCirculationRules(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting circulation rules");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            {
                var i = 0;
                if (api)
                {
                    throw new NotSupportedException();
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.circulation_rules{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} circulation rules");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCirculationRules(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading circulation rules");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CirculationRule.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CirculationRule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CirculationRule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.UpdateCirculationRule(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(CirculationRule.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} circulation rules");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCirculationRules(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving circulation rules");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CirculationRule.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? new[] { fsc.GetCirculationRule() } : fdc.CirculationRules(where, null, orderBy, skip, take).Select(cr => cr.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CirculationRule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CirculationRule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} circulation rules");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountClassificationTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountClassificationTypes(where) : fdc.CountClassificationTypes(where))} classification types");
            }
        }

        public static void QueryClassificationTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ClassificationTypes(where, orderBy, skip, take) : fdc.ClassificationTypes(where, null, orderBy, skip, take).Select(ct => ct.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteClassificationTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting classification types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ClassificationTypes(where))
                    {
                        if (!whatIf) fsc.DeleteClassificationType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.classification_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} classification types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadClassificationTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading classification types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ClassificationType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ClassificationType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ClassificationType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertClassificationType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ClassificationType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} classification types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveClassificationTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving classification types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ClassificationType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ClassificationTypes(where, orderBy, skip, take) : fdc.ClassificationTypes(where, null, orderBy, skip, take).Select(ct => ct.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ClassificationType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ClassificationType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} classification types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCloseReasons(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCloseReasons(where) : fdc.CountCloseReasons(where))} close reasons");
            }
        }

        public static void QueryCloseReasons(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.CloseReasons(where, orderBy, skip, take) : fdc.CloseReasons(where, null, orderBy, skip, take).Select(cr => cr.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCloseReasons(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting close reasons");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.CloseReasons(where))
                    {
                        if (!whatIf) fsc.DeleteCloseReason((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.reasons_for_closure{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} close reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCloseReasons(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading close reasons");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CloseReason.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CloseReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CloseReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCloseReason(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(CloseReason.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} close reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCloseReasons(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving close reasons");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CloseReason.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.CloseReasons(where, orderBy, skip, take) : fdc.CloseReasons(where, null, orderBy, skip, take).Select(cr => cr.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CloseReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CloseReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} close reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountComments(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountComments(where) : fdc.CountComments(where))} comments");
            }
        }

        public static void QueryComments(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Comments(where, orderBy, skip, take) : fdc.Comments(where, null, orderBy, skip, take).Select(c => c.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteComments(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting comments");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Comments(where))
                    {
                        if (!whatIf) fsc.DeleteComment((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.comments{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} comments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadComments(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading comments");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Comment.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Comment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Comment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertComment(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Comment.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} comments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveComments(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving comments");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Comment.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Comments(where, orderBy, skip, take) : fdc.Comments(where, null, orderBy, skip, take).Select(c => c.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Comment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Comment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} comments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountConfigurations(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountConfigurations(where) : fdc.CountConfigurations(where))} configurations");
            }
        }

        public static void QueryConfigurations(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Configurations(where, orderBy, skip, take) : fdc.Configurations(where, null, orderBy, skip, take).Select(c => c.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteConfigurations(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting configurations");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Configurations(where))
                    {
                        if (!whatIf) fsc.DeleteConfiguration((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_configuration.config_data{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} configurations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadConfigurations(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading configurations");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Configuration.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Configuration {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Configuration {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertConfiguration(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Configuration.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} configurations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveConfigurations(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving configurations");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Configuration.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Configurations(where, orderBy, skip, take) : fdc.Configurations(where, null, orderBy, skip, take).Select(c => c.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Configuration {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Configuration {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} configurations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountContacts(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountContacts(where) : fdc.CountContacts(where))} contacts");
            }
        }

        public static void QueryContacts(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Contacts(where, orderBy, skip, take) : fdc.Contacts(where, null, orderBy, skip, take).Select(c => c.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteContacts(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting contacts");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Contacts(where))
                    {
                        if (!whatIf) fsc.DeleteContact((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_organizations_storage.contacts{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} contacts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadContacts(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading contacts");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Contact.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Contact {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Contact {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertContact(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Contact.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} contacts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveContacts(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving contacts");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Contact.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Contacts(where, orderBy, skip, take) : fdc.Contacts(where, null, orderBy, skip, take).Select(c => c.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Contact {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Contact {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} contacts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountContributorNameTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountContributorNameTypes(where) : fdc.CountContributorNameTypes(where))} contributor name types");
            }
        }

        public static void QueryContributorNameTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ContributorNameTypes(where, orderBy, skip, take) : fdc.ContributorNameTypes(where, null, orderBy, skip, take).Select(cnt => cnt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteContributorNameTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting contributor name types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ContributorNameTypes(where))
                    {
                        if (!whatIf) fsc.DeleteContributorNameType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.contributor_name_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} contributor name types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadContributorNameTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading contributor name types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ContributorNameType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ContributorNameType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ContributorNameType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertContributorNameType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ContributorNameType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} contributor name types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveContributorNameTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving contributor name types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ContributorNameType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ContributorNameTypes(where, orderBy, skip, take) : fdc.ContributorNameTypes(where, null, orderBy, skip, take).Select(cnt => cnt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ContributorNameType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ContributorNameType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} contributor name types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountContributorTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountContributorTypes(where) : fdc.CountContributorTypes(where))} contributor types");
            }
        }

        public static void QueryContributorTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ContributorTypes(where, orderBy, skip, take) : fdc.ContributorTypes(where, null, orderBy, skip, take).Select(ct => ct.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteContributorTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting contributor types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ContributorTypes(where))
                    {
                        if (!whatIf) fsc.DeleteContributorType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.contributor_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} contributor types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadContributorTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading contributor types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ContributorType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ContributorType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ContributorType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertContributorType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ContributorType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} contributor types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveContributorTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving contributor types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ContributorType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ContributorTypes(where, orderBy, skip, take) : fdc.ContributorTypes(where, null, orderBy, skip, take).Select(ct => ct.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ContributorType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ContributorType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} contributor types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountCustomFields(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountCustomFields(where) : fdc.CountCustomFields(where))} custom fields");
            }
        }

        public static void QueryCustomFields(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.CustomFields(where, orderBy, skip, take) : fdc.CustomFields(where, null, orderBy, skip, take).Select(cf => cf.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteCustomFields(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting custom fields");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.CustomFields(where))
                    {
                        if (!whatIf) fsc.DeleteCustomField((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_users.custom_fields{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} custom fields");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadCustomFields(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading custom fields");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CustomField.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CustomField {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CustomField {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertCustomField(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(CustomField.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} custom fields");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveCustomFields(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving custom fields");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.CustomField.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.CustomFields(where, orderBy, skip, take) : fdc.CustomFields(where, null, orderBy, skip, take).Select(cf => cf.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"CustomField {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"CustomField {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} custom fields");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountDepartments(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountDepartments(where) : fdc.CountDepartments(where))} departments");
            }
        }

        public static void QueryDepartments(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Departments(where, orderBy, skip, take) : fdc.Departments(where, null, orderBy, skip, take).Select(d => d.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteDepartments(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting departments");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Departments(where))
                    {
                        if (!whatIf) fsc.DeleteDepartment((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_users.departments{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} departments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadDepartments(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading departments");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Department.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Department {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Department {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertDepartment(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Department.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} departments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveDepartments(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving departments");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Department.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Departments(where, orderBy, skip, take) : fdc.Departments(where, null, orderBy, skip, take).Select(d => d.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Department {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Department {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} departments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountElectronicAccessRelationships(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountElectronicAccessRelationships(where) : fdc.CountElectronicAccessRelationships(where))} electronic access relationships");
            }
        }

        public static void QueryElectronicAccessRelationships(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ElectronicAccessRelationships(where, orderBy, skip, take) : fdc.ElectronicAccessRelationships(where, null, orderBy, skip, take).Select(ear => ear.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteElectronicAccessRelationships(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting electronic access relationships");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ElectronicAccessRelationships(where))
                    {
                        if (!whatIf) fsc.DeleteElectronicAccessRelationship((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.electronic_access_relationship{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} electronic access relationships");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadElectronicAccessRelationships(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading electronic access relationships");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ElectronicAccessRelationship.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ElectronicAccessRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ElectronicAccessRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertElectronicAccessRelationship(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ElectronicAccessRelationship.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} electronic access relationships");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveElectronicAccessRelationships(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving electronic access relationships");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ElectronicAccessRelationship.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ElectronicAccessRelationships(where, orderBy, skip, take) : fdc.ElectronicAccessRelationships(where, null, orderBy, skip, take).Select(ear => ear.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ElectronicAccessRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ElectronicAccessRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} electronic access relationships");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountExpenseClasses(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountExpenseClasses(where) : fdc.CountExpenseClasses(where))} expense classes");
            }
        }

        public static void QueryExpenseClasses(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ExpenseClasses(where, orderBy, skip, take) : fdc.ExpenseClasses(where, null, orderBy, skip, take).Select(ec => ec.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteExpenseClasses(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting expense classes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ExpenseClasses(where))
                    {
                        if (!whatIf) fsc.DeleteExpenseClass((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.expense_class{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} expense classes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadExpenseClasses(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading expense classes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ExpenseClass.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertExpenseClass(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ExpenseClass.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} expense classes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveExpenseClasses(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving expense classes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ExpenseClass.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ExpenseClasses(where, orderBy, skip, take) : fdc.ExpenseClasses(where, null, orderBy, skip, take).Select(ec => ec.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ExpenseClass {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} expense classes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFees(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFees(where) : fdc.CountFees(where))} fees");
            }
        }

        public static void QueryFees(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Fees(where, orderBy, skip, take) : fdc.Fees(where, null, orderBy, skip, take).Select(f => f.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFees(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting fees");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Fees(where))
                    {
                        if (!whatIf) fsc.DeleteFee((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.accounts{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} fees");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFees(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading fees");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Fee.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Fee {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Fee {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFee(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Fee.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} fees");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFees(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving fees");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Fee.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Fees(where, orderBy, skip, take) : fdc.Fees(where, null, orderBy, skip, take).Select(f => f.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Fee {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Fee {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} fees");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFeeTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFeeTypes(where) : fdc.CountFeeTypes(where))} fee types");
            }
        }

        public static void QueryFeeTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.FeeTypes(where, orderBy, skip, take) : fdc.FeeTypes(where, null, orderBy, skip, take).Select(ft => ft.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFeeTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting fee types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.FeeTypes(where))
                    {
                        if (!whatIf) fsc.DeleteFeeType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.feefines{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} fee types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFeeTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading fee types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FeeType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FeeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FeeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFeeType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(FeeType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} fee types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFeeTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving fee types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FeeType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.FeeTypes(where, orderBy, skip, take) : fdc.FeeTypes(where, null, orderBy, skip, take).Select(ft => ft.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FeeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FeeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} fee types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFinanceGroups(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFinanceGroups(where) : fdc.CountFinanceGroups(where))} finance groups");
            }
        }

        public static void QueryFinanceGroups(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.FinanceGroups(where, orderBy, skip, take) : fdc.FinanceGroups(where, null, orderBy, skip, take).Select(fg => fg.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFinanceGroups(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting finance groups");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.FinanceGroups(where))
                    {
                        if (!whatIf) fsc.DeleteFinanceGroup((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.groups{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} finance groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFinanceGroups(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading finance groups");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FinanceGroup.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FinanceGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FinanceGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFinanceGroup(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(FinanceGroup.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} finance groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFinanceGroups(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving finance groups");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FinanceGroup.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.FinanceGroups(where, orderBy, skip, take) : fdc.FinanceGroups(where, null, orderBy, skip, take).Select(fg => fg.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FinanceGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FinanceGroup {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} finance groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFiscalYears(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFiscalYears(where) : fdc.CountFiscalYears(where))} fiscal years");
            }
        }

        public static void QueryFiscalYears(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.FiscalYears(where, orderBy, skip, take) : fdc.FiscalYears(where, null, orderBy, skip, take).Select(fy => fy.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFiscalYears(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting fiscal years");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.FiscalYears(where))
                    {
                        if (!whatIf) fsc.DeleteFiscalYear((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.fiscal_year{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} fiscal years");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFiscalYears(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading fiscal years");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FiscalYear.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FiscalYear {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FiscalYear {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFiscalYear(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(FiscalYear.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} fiscal years");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFiscalYears(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving fiscal years");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FiscalYear.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.FiscalYears(where, orderBy, skip, take) : fdc.FiscalYears(where, null, orderBy, skip, take).Select(fy => fy.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FiscalYear {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FiscalYear {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} fiscal years");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFixedDueDateSchedules(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFixedDueDateSchedules(where) : fdc.CountFixedDueDateSchedules(where))} fixed due date schedules");
            }
        }

        public static void QueryFixedDueDateSchedules(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.FixedDueDateSchedules(where, orderBy, skip, take) : fdc.FixedDueDateSchedules(where, null, orderBy, skip, take).Select(fdds => fdds.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFixedDueDateSchedules(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting fixed due date schedules");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.FixedDueDateSchedules(where))
                    {
                        if (!whatIf) fsc.DeleteFixedDueDateSchedule((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.fixed_due_date_schedule{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} fixed due date schedules");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFixedDueDateSchedules(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading fixed due date schedules");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FixedDueDateSchedule.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FixedDueDateSchedule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FixedDueDateSchedule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFixedDueDateSchedule(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(FixedDueDateSchedule.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} fixed due date schedules");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFixedDueDateSchedules(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving fixed due date schedules");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FixedDueDateSchedule.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.FixedDueDateSchedules(where, orderBy, skip, take) : fdc.FixedDueDateSchedules(where, null, orderBy, skip, take).Select(fdds => fdds.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FixedDueDateSchedule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FixedDueDateSchedule {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} fixed due date schedules");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFunds(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFunds(where) : fdc.CountFunds(where))} funds");
            }
        }

        public static void QueryFunds(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Funds(where, orderBy, skip, take) : fdc.Funds(where, null, orderBy, skip, take).Select(f => f.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFunds(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting funds");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Funds(where))
                    {
                        if (!whatIf) fsc.DeleteFund((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.fund{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} funds");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFunds(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading funds");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Fund.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Fund {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Fund {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFund(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Fund.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} funds");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFunds(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving funds");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Fund.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Funds(where, orderBy, skip, take) : fdc.Funds(where, null, orderBy, skip, take).Select(f => f.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Fund {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Fund {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} funds");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountFundTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountFundTypes(where) : fdc.CountFundTypes(where))} fund types");
            }
        }

        public static void QueryFundTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.FundTypes(where, orderBy, skip, take) : fdc.FundTypes(where, null, orderBy, skip, take).Select(ft => ft.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteFundTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting fund types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.FundTypes(where))
                    {
                        if (!whatIf) fsc.DeleteFundType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.fund_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} fund types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadFundTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading fund types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FundType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FundType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FundType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertFundType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(FundType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} fund types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveFundTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving fund types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.FundType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.FundTypes(where, orderBy, skip, take) : fdc.FundTypes(where, null, orderBy, skip, take).Select(ft => ft.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"FundType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"FundType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} fund types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountGroups(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountGroups(where) : fdc.CountGroups(where))} groups");
            }
        }

        public static void QueryGroups(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Groups(where, orderBy, skip, take) : fdc.Groups(where, null, orderBy, skip, take).Select(g => g.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteGroups(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting groups");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Groups(where))
                    {
                        if (!whatIf) fsc.DeleteGroup((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_users.groups{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadGroups(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading groups");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Group.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Group {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Group {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertGroup(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Group.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveGroups(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving groups");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Group.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Groups(where, orderBy, skip, take) : fdc.Groups(where, null, orderBy, skip, take).Select(g => g.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Group {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Group {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} groups");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountHoldings(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountHoldings(where) : fdc.CountHoldings(where))} holdings");
            }
        }

        public static void QueryHoldings(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Holdings(where, orderBy, skip, take) : fdc.Holdings(where, null, orderBy, skip, take).Select(h => h.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteHoldings(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting holdings");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Holdings(where))
                    {
                        if (!whatIf) fsc.DeleteHolding((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.holdings_record{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} holdings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadHoldings(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading holdings");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Holding.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                var l2 = new List<JObject>(1000);
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Holding {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Holding {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            l2.Add(jo);
                            if (i % 1000 == 0)
                            {
                                if (!whatIf) fsc.InsertHoldings(l2);
                                l2.Clear();
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Holding.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                if (api && !whatIf && l2.Any()) fsc.InsertHoldings(l2);
                fbcc.Commit();
                fdc.Execute($"ALTER SEQUENCE uchicago_mod_inventory_storage.hrid_holdings_seq RESTART {fdc.ExecuteScalar<int>("SELECT MAX((jsonb->>'hrid')::int) + 1 FROM uchicago_mod_inventory_storage.holdings_record")}");
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} holdings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveHoldings(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving holdings");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Holding.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Holdings(where, orderBy, skip, take) : fdc.Holdings(where, null, orderBy, skip, take).Select(h => h.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Holding {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Holding {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} holdings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountHoldingNoteTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountHoldingNoteTypes(where) : fdc.CountHoldingNoteTypes(where))} holding note types");
            }
        }

        public static void QueryHoldingNoteTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.HoldingNoteTypes(where, orderBy, skip, take) : fdc.HoldingNoteTypes(where, null, orderBy, skip, take).Select(hnt => hnt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteHoldingNoteTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting holding note types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.HoldingNoteTypes(where))
                    {
                        if (!whatIf) fsc.DeleteHoldingNoteType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.holdings_note_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} holding note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadHoldingNoteTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading holding note types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.HoldingNoteType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"HoldingNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"HoldingNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertHoldingNoteType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(HoldingNoteType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} holding note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveHoldingNoteTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving holding note types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.HoldingNoteType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.HoldingNoteTypes(where, orderBy, skip, take) : fdc.HoldingNoteTypes(where, null, orderBy, skip, take).Select(hnt => hnt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"HoldingNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"HoldingNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} holding note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountHoldingTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountHoldingTypes(where) : fdc.CountHoldingTypes(where))} holding types");
            }
        }

        public static void QueryHoldingTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.HoldingTypes(where, orderBy, skip, take) : fdc.HoldingTypes(where, null, orderBy, skip, take).Select(ht => ht.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteHoldingTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting holding types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.HoldingTypes(where))
                    {
                        if (!whatIf) fsc.DeleteHoldingType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.holdings_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} holding types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadHoldingTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading holding types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.HoldingType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"HoldingType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"HoldingType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertHoldingType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(HoldingType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} holding types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveHoldingTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving holding types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.HoldingType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.HoldingTypes(where, orderBy, skip, take) : fdc.HoldingTypes(where, null, orderBy, skip, take).Select(ht => ht.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"HoldingType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"HoldingType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} holding types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountHridSettings(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? 1 : fdc.CountHridSettings(where))} hrid settings");
            }
        }

        public static void QueryHridSettings(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? new[] { fsc.GetHridSetting() } : fdc.HridSettings(where, null, orderBy, skip, take).Select(hs => hs.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteHridSettings(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting hrid settings");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            {
                var i = 0;
                if (api)
                {
                    throw new NotSupportedException();
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.hrid_settings{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} hrid settings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadHridSettings(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading hrid settings");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.HridSetting.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"HridSetting {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"HridSetting {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.UpdateHridSetting(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(HridSetting.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} hrid settings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveHridSettings(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving hrid settings");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.HridSetting.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? new[] { fsc.GetHridSetting() } : fdc.HridSettings(where, null, orderBy, skip, take).Select(hs => hs.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"HridSetting {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"HridSetting {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} hrid settings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountIdTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountIdTypes(where) : fdc.CountIdTypes(where))} id types");
            }
        }

        public static void QueryIdTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.IdTypes(where, orderBy, skip, take) : fdc.IdTypes(where, null, orderBy, skip, take).Select(it => it.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteIdTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting id types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.IdTypes(where))
                    {
                        if (!whatIf) fsc.DeleteIdType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.identifier_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} id types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadIdTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading id types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.IdType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"IdType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"IdType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertIdType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(IdType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} id types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveIdTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving id types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.IdType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.IdTypes(where, orderBy, skip, take) : fdc.IdTypes(where, null, orderBy, skip, take).Select(it => it.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"IdType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"IdType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} id types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountIllPolicies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountIllPolicies(where) : fdc.CountIllPolicies(where))} ill policies");
            }
        }

        public static void QueryIllPolicies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.IllPolicies(where, orderBy, skip, take) : fdc.IllPolicies(where, null, orderBy, skip, take).Select(ip => ip.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteIllPolicies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting ill policies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.IllPolicies(where))
                    {
                        if (!whatIf) fsc.DeleteIllPolicy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.ill_policy{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} ill policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadIllPolicies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading ill policies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.IllPolicy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"IllPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"IllPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertIllPolicy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(IllPolicy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} ill policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveIllPolicies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving ill policies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.IllPolicy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.IllPolicies(where, orderBy, skip, take) : fdc.IllPolicies(where, null, orderBy, skip, take).Select(ip => ip.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"IllPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"IllPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} ill policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstances(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstances(where) : fdc.CountInstances(where))} instances");
            }
        }

        public static void QueryInstances(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Instances(where, orderBy, skip, take) : fdc.Instances(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstances(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instances");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Instances(where))
                    {
                        if (!whatIf) fsc.DeleteInstance((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instances");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstances(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instances");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Instance.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                var l2 = new List<JObject>(1000);
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Instance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Instance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            l2.Add(jo);
                            if (i % 1000 == 0)
                            {
                                if (!whatIf) fsc.InsertInstances(l2);
                                l2.Clear();
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Instance.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                if (api && !whatIf && l2.Any()) fsc.InsertInstances(l2);
                fbcc.Commit();
                fdc.Execute($"ALTER SEQUENCE uchicago_mod_inventory_storage.hrid_instances_seq RESTART {fdc.ExecuteScalar<int>("SELECT MAX((jsonb->>'hrid')::int) + 1 FROM uchicago_mod_inventory_storage.instance")}");
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instances");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstances(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instances");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Instance.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Instances(where, orderBy, skip, take) : fdc.Instances(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Instance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Instance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instances");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstanceFormats(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstanceFormats(where) : fdc.CountInstanceFormats(where))} instance formats");
            }
        }

        public static void QueryInstanceFormats(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InstanceFormats(where, orderBy, skip, take) : fdc.InstanceFormats(where, null, orderBy, skip, take).Select(@if => @if.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstanceFormats(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instance formats");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InstanceFormats(where))
                    {
                        if (!whatIf) fsc.DeleteInstanceFormat((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance_format{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instance formats");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstanceFormats(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instance formats");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceFormat.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceFormat {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceFormat {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstanceFormat(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InstanceFormat.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instance formats");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstanceFormats(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instance formats");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceFormat.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InstanceFormats(where, orderBy, skip, take) : fdc.InstanceFormats(where, null, orderBy, skip, take).Select(@if => @if.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceFormat {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceFormat {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instance formats");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstanceNoteTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstanceNoteTypes(where) : fdc.CountInstanceNoteTypes(where))} instance note types");
            }
        }

        public static void QueryInstanceNoteTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InstanceNoteTypes(where, orderBy, skip, take) : fdc.InstanceNoteTypes(where, null, orderBy, skip, take).Select(@int => @int.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstanceNoteTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instance note types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InstanceNoteTypes(where))
                    {
                        if (!whatIf) fsc.DeleteInstanceNoteType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance_note_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instance note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstanceNoteTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instance note types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceNoteType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstanceNoteType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InstanceNoteType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instance note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstanceNoteTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instance note types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceNoteType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InstanceNoteTypes(where, orderBy, skip, take) : fdc.InstanceNoteTypes(where, null, orderBy, skip, take).Select(@int => @int.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instance note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstanceRelationships(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstanceRelationships(where) : fdc.CountInstanceRelationships(where))} instance relationships");
            }
        }

        public static void QueryInstanceRelationships(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InstanceRelationships(where, orderBy, skip, take) : fdc.InstanceRelationships(where, null, orderBy, skip, take).Select(ir => ir.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstanceRelationships(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instance relationships");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InstanceRelationships(where))
                    {
                        if (!whatIf) fsc.DeleteInstanceRelationship((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance_relationship{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instance relationships");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstanceRelationships(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instance relationships");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceRelationship.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstanceRelationship(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InstanceRelationship.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instance relationships");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstanceRelationships(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instance relationships");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceRelationship.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InstanceRelationships(where, orderBy, skip, take) : fdc.InstanceRelationships(where, null, orderBy, skip, take).Select(ir => ir.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceRelationship {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instance relationships");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstanceRelationshipTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstanceRelationshipTypes(where) : fdc.CountInstanceRelationshipTypes(where))} instance relationship types");
            }
        }

        public static void QueryInstanceRelationshipTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InstanceRelationshipTypes(where, orderBy, skip, take) : fdc.InstanceRelationshipTypes(where, null, orderBy, skip, take).Select(irt => irt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstanceRelationshipTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instance relationship types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InstanceRelationshipTypes(where))
                    {
                        if (!whatIf) fsc.DeleteInstanceRelationshipType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance_relationship_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instance relationship types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstanceRelationshipTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instance relationship types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceRelationshipType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceRelationshipType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceRelationshipType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstanceRelationshipType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InstanceRelationshipType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instance relationship types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstanceRelationshipTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instance relationship types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceRelationshipType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InstanceRelationshipTypes(where, orderBy, skip, take) : fdc.InstanceRelationshipTypes(where, null, orderBy, skip, take).Select(irt => irt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceRelationshipType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceRelationshipType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instance relationship types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstanceStatuses(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstanceStatuses(where) : fdc.CountInstanceStatuses(where))} instance statuses");
            }
        }

        public static void QueryInstanceStatuses(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InstanceStatuses(where, orderBy, skip, take) : fdc.InstanceStatuses(where, null, orderBy, skip, take).Select(@is => @is.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstanceStatuses(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instance statuses");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InstanceStatuses(where))
                    {
                        if (!whatIf) fsc.DeleteInstanceStatus((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance_status{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instance statuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstanceStatuses(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instance statuses");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceStatus.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstanceStatus(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InstanceStatus.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instance statuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstanceStatuses(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instance statuses");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceStatus.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InstanceStatuses(where, orderBy, skip, take) : fdc.InstanceStatuses(where, null, orderBy, skip, take).Select(@is => @is.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instance statuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstanceTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstanceTypes(where) : fdc.CountInstanceTypes(where))} instance types");
            }
        }

        public static void QueryInstanceTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InstanceTypes(where, orderBy, skip, take) : fdc.InstanceTypes(where, null, orderBy, skip, take).Select(it => it.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstanceTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting instance types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InstanceTypes(where))
                    {
                        if (!whatIf) fsc.DeleteInstanceType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.instance_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} instance types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstanceTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading instance types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstanceType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InstanceType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} instance types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstanceTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving instance types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InstanceType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InstanceTypes(where, orderBy, skip, take) : fdc.InstanceTypes(where, null, orderBy, skip, take).Select(it => it.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InstanceType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InstanceType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} instance types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInstitutions(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInstitutions(where) : fdc.CountInstitutions(where))} institutions");
            }
        }

        public static void QueryInstitutions(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Institutions(where, orderBy, skip, take) : fdc.Institutions(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInstitutions(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting institutions");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Institutions(where))
                    {
                        if (!whatIf) fsc.DeleteInstitution((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.locinstitution{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} institutions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInstitutions(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading institutions");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Institution.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Institution {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Institution {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInstitution(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Institution.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} institutions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInstitutions(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving institutions");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Institution.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Institutions(where, orderBy, skip, take) : fdc.Institutions(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Institution {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Institution {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} institutions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInterfaces(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInterfaces(where) : fdc.CountInterfaces(where))} interfaces");
            }
        }

        public static void QueryInterfaces(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Interfaces(where, orderBy, skip, take) : fdc.Interfaces(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInterfaces(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting interfaces");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Interfaces(where))
                    {
                        if (!whatIf) fsc.DeleteInterface((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_organizations_storage.interfaces{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} interfaces");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInterfaces(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading interfaces");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Interface.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Interface {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Interface {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInterface(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Interface.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} interfaces");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInterfaces(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving interfaces");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Interface.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Interfaces(where, orderBy, skip, take) : fdc.Interfaces(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Interface {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Interface {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} interfaces");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInterfaceCredentials(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            {
                Console.WriteLine($"{(api ? throw new NotSupportedException() : fdc.CountInterfaceCredentials(where))} interface credentials");
            }
        }

        public static void QueryInterfaceCredentials(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? throw new NotSupportedException() : fdc.InterfaceCredentials(where, null, orderBy, skip, take).Select(ic => ic.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInterfaceCredentials(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting interface credentials");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            {
                var i = 0;
                if (api)
                {
                    throw new NotSupportedException();
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_organizations_storage.interface_credentials{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} interface credentials");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInterfaceCredentials(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading interface credentials");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InterfaceCredential.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InterfaceCredential {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InterfaceCredential {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            throw new NotSupportedException();
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InterfaceCredential.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} interface credentials");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInterfaceCredentials(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving interface credentials");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InterfaceCredential.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? throw new NotSupportedException() : fdc.InterfaceCredentials(where, null, orderBy, skip, take).Select(ic => ic.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InterfaceCredential {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InterfaceCredential {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} interface credentials");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInvoices(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInvoices(where) : fdc.CountInvoices(where))} invoices");
            }
        }

        public static void QueryInvoices(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Invoices(where, orderBy, skip, take) : fdc.Invoices(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInvoices(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting invoices");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Invoices(where))
                    {
                        if (!whatIf) fsc.DeleteInvoice((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_invoice_storage.invoices{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} invoices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInvoices(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading invoices");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Invoice.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Invoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Invoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInvoice(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Invoice.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                fdc.Execute($"ALTER SEQUENCE uchicago_mod_invoice_storage.invoice_number RESTART {fdc.ExecuteScalar<int>("SELECT MAX((jsonb->>'folioInvoiceNo')::int) + 1 FROM uchicago_mod_invoice_storage.invoices")}");
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} invoices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInvoices(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving invoices");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Invoice.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Invoices(where, orderBy, skip, take) : fdc.Invoices(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Invoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Invoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} invoices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountInvoiceItems(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountInvoiceItems(where) : fdc.CountInvoiceItems(where))} invoice items");
            }
        }

        public static void QueryInvoiceItems(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.InvoiceItems(where, orderBy, skip, take) : fdc.InvoiceItems(where, null, orderBy, skip, take).Select(ii => ii.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteInvoiceItems(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting invoice items");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.InvoiceItems(where))
                    {
                        if (!whatIf) fsc.DeleteInvoiceItem((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_invoice_storage.invoice_lines{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} invoice items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadInvoiceItems(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading invoice items");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InvoiceItem.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InvoiceItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InvoiceItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertInvoiceItem(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(InvoiceItem.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} invoice items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveInvoiceItems(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving invoice items");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.InvoiceItem.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.InvoiceItems(where, orderBy, skip, take) : fdc.InvoiceItems(where, null, orderBy, skip, take).Select(ii => ii.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"InvoiceItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"InvoiceItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} invoice items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountItems(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountItems(where) : fdc.CountItems(where))} items");
            }
        }

        public static void QueryItems(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Items(where, orderBy, skip, take) : fdc.Items(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteItems(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting items");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Items(where))
                    {
                        if (!whatIf) fsc.DeleteItem((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.item{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadItems(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading items");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Item.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                var l2 = new List<JObject>(1000);
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Item {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Item {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            l2.Add(jo);
                            if (i % 1000 == 0)
                            {
                                if (!whatIf) fsc.InsertItems(l2);
                                l2.Clear();
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Item.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                if (api && !whatIf && l2.Any()) fsc.InsertItems(l2);
                fbcc.Commit();
                fdc.Execute($"ALTER SEQUENCE uchicago_mod_inventory_storage.hrid_items_seq RESTART {fdc.ExecuteScalar<int>("SELECT MAX((jsonb->>'hrid')::int) + 1 FROM uchicago_mod_inventory_storage.item")}");
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveItems(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving items");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Item.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Items(where, orderBy, skip, take) : fdc.Items(where, null, orderBy, skip, take).Select(i2 => i2.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Item {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Item {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountItemDamagedStatuses(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountItemDamagedStatuses(where) : fdc.CountItemDamagedStatuses(where))} item damaged statuses");
            }
        }

        public static void QueryItemDamagedStatuses(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ItemDamagedStatuses(where, orderBy, skip, take) : fdc.ItemDamagedStatuses(where, null, orderBy, skip, take).Select(ids => ids.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteItemDamagedStatuses(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting item damaged statuses");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ItemDamagedStatuses(where))
                    {
                        if (!whatIf) fsc.DeleteItemDamagedStatus((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.item_damaged_status{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} item damaged statuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadItemDamagedStatuses(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading item damaged statuses");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ItemDamagedStatus.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ItemDamagedStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ItemDamagedStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertItemDamagedStatus(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ItemDamagedStatus.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} item damaged statuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveItemDamagedStatuses(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving item damaged statuses");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ItemDamagedStatus.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ItemDamagedStatuses(where, orderBy, skip, take) : fdc.ItemDamagedStatuses(where, null, orderBy, skip, take).Select(ids => ids.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ItemDamagedStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ItemDamagedStatus {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} item damaged statuses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountItemNoteTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountItemNoteTypes(where) : fdc.CountItemNoteTypes(where))} item note types");
            }
        }

        public static void QueryItemNoteTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ItemNoteTypes(where, orderBy, skip, take) : fdc.ItemNoteTypes(where, null, orderBy, skip, take).Select(@int => @int.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteItemNoteTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting item note types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ItemNoteTypes(where))
                    {
                        if (!whatIf) fsc.DeleteItemNoteType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.item_note_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} item note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadItemNoteTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading item note types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ItemNoteType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ItemNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ItemNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertItemNoteType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ItemNoteType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} item note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveItemNoteTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving item note types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ItemNoteType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ItemNoteTypes(where, orderBy, skip, take) : fdc.ItemNoteTypes(where, null, orderBy, skip, take).Select(@int => @int.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ItemNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ItemNoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} item note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLedgers(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLedgers(where) : fdc.CountLedgers(where))} ledgers");
            }
        }

        public static void QueryLedgers(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Ledgers(where, orderBy, skip, take) : fdc.Ledgers(where, null, orderBy, skip, take).Select(l => l.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLedgers(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting ledgers");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Ledgers(where))
                    {
                        if (!whatIf) fsc.DeleteLedger((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.ledger{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} ledgers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLedgers(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading ledgers");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Ledger.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Ledger {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Ledger {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLedger(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Ledger.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} ledgers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLedgers(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving ledgers");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Ledger.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Ledgers(where, orderBy, skip, take) : fdc.Ledgers(where, null, orderBy, skip, take).Select(l => l.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Ledger {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Ledger {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} ledgers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLibraries(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLibraries(where) : fdc.CountLibraries(where))} libraries");
            }
        }

        public static void QueryLibraries(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Libraries(where, orderBy, skip, take) : fdc.Libraries(where, null, orderBy, skip, take).Select(l => l.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLibraries(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting libraries");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Libraries(where))
                    {
                        if (!whatIf) fsc.DeleteLibrary((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.loclibrary{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} libraries");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLibraries(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading libraries");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Library.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Library {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Library {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLibrary(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Library.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} libraries");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLibraries(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving libraries");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Library.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Libraries(where, orderBy, skip, take) : fdc.Libraries(where, null, orderBy, skip, take).Select(l => l.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Library {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Library {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} libraries");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLoans(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLoans(where) : fdc.CountLoans(where))} loans");
            }
        }

        public static void QueryLoans(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Loans(where, orderBy, skip, take) : fdc.Loans(where, null, orderBy, skip, take).Select(l => l.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLoans(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting loans");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Loans(where))
                    {
                        if (!whatIf) fsc.DeleteLoan((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.loan{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} loans");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLoans(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading loans");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Loan.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Loan {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Loan {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLoan(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Loan.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} loans");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLoans(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving loans");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Loan.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Loans(where, orderBy, skip, take) : fdc.Loans(where, null, orderBy, skip, take).Select(l => l.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Loan {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Loan {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} loans");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLoanEvents(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            {
                Console.WriteLine($"{(api ? throw new NotSupportedException() : fdc.CountLoanEvents(where))} loan events");
            }
        }

        public static void QueryLoanEvents(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? throw new NotSupportedException() : fdc.LoanEvents(where, null, orderBy, skip, take).Select(le => le.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLoanEvents(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting loan events");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            {
                var i = 0;
                if (api)
                {
                    throw new NotSupportedException();
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.audit_loan{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} loan events");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLoanEvents(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading loan events");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LoanEvent.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LoanEvent {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LoanEvent {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            throw new NotSupportedException();
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(LoanEvent.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} loan events");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLoanEvents(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving loan events");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LoanEvent.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? throw new NotSupportedException() : fdc.LoanEvents(where, null, orderBy, skip, take).Select(le => le.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LoanEvent {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LoanEvent {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} loan events");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLoanPolicies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLoanPolicies(where) : fdc.CountLoanPolicies(where))} loan policies");
            }
        }

        public static void QueryLoanPolicies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.LoanPolicies(where, orderBy, skip, take) : fdc.LoanPolicies(where, null, orderBy, skip, take).Select(lp => lp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLoanPolicies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting loan policies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.LoanPolicies(where))
                    {
                        if (!whatIf) fsc.DeleteLoanPolicy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.loan_policy{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} loan policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLoanPolicies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading loan policies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LoanPolicy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LoanPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LoanPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLoanPolicy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(LoanPolicy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} loan policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLoanPolicies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving loan policies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LoanPolicy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.LoanPolicies(where, orderBy, skip, take) : fdc.LoanPolicies(where, null, orderBy, skip, take).Select(lp => lp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LoanPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LoanPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} loan policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLoanTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLoanTypes(where) : fdc.CountLoanTypes(where))} loan types");
            }
        }

        public static void QueryLoanTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.LoanTypes(where, orderBy, skip, take) : fdc.LoanTypes(where, null, orderBy, skip, take).Select(lt => lt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLoanTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting loan types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.LoanTypes(where))
                    {
                        if (!whatIf) fsc.DeleteLoanType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.loan_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} loan types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLoanTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading loan types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LoanType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LoanType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LoanType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLoanType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(LoanType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} loan types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLoanTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving loan types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LoanType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.LoanTypes(where, orderBy, skip, take) : fdc.LoanTypes(where, null, orderBy, skip, take).Select(lt => lt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LoanType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LoanType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} loan types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLocations(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLocations(where) : fdc.CountLocations(where))} locations");
            }
        }

        public static void QueryLocations(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Locations(where, orderBy, skip, take) : fdc.Locations(where, null, orderBy, skip, take).Select(l => l.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLocations(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting locations");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Locations(where))
                    {
                        if (!whatIf) fsc.DeleteLocation((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.location{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} locations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLocations(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading locations");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Location.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Location {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Location {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLocation(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Location.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} locations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLocations(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving locations");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Location.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Locations(where, orderBy, skip, take) : fdc.Locations(where, null, orderBy, skip, take).Select(l => l.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Location {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Location {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} locations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLogins(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            {
                Console.WriteLine($"{(api ? throw new NotSupportedException() : fdc.CountLogins(where))} logins");
            }
        }

        public static void QueryLogins(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? throw new NotSupportedException() : fdc.Logins(where, null, orderBy, skip, take).Select(l => l.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLogins(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting logins");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            {
                var i = 0;
                if (api)
                {
                    throw new NotSupportedException();
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_login.auth_credentials{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} logins");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLogins(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading logins");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Login.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Login {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Login {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLogin(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Login.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} logins");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLogins(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving logins");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Login.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? throw new NotSupportedException() : fdc.Logins(where, null, orderBy, skip, take).Select(l => l.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Login {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Login {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} logins");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountLostItemFeePolicies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountLostItemFeePolicies(where) : fdc.CountLostItemFeePolicies(where))} lost item fee policies");
            }
        }

        public static void QueryLostItemFeePolicies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.LostItemFeePolicies(where, orderBy, skip, take) : fdc.LostItemFeePolicies(where, null, orderBy, skip, take).Select(lifp => lifp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteLostItemFeePolicies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting lost item fee policies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.LostItemFeePolicies(where))
                    {
                        if (!whatIf) fsc.DeleteLostItemFeePolicy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.lost_item_fee_policy{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} lost item fee policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadLostItemFeePolicies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading lost item fee policies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LostItemFeePolicy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LostItemFeePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LostItemFeePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertLostItemFeePolicy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(LostItemFeePolicy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} lost item fee policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveLostItemFeePolicies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving lost item fee policies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.LostItemFeePolicy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.LostItemFeePolicies(where, orderBy, skip, take) : fdc.LostItemFeePolicies(where, null, orderBy, skip, take).Select(lifp => lifp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"LostItemFeePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"LostItemFeePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} lost item fee policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountManualBlockTemplates(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountManualBlockTemplates(where) : fdc.CountManualBlockTemplates(where))} manual block templates");
            }
        }

        public static void QueryManualBlockTemplates(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ManualBlockTemplates(where, orderBy, skip, take) : fdc.ManualBlockTemplates(where, null, orderBy, skip, take).Select(mbt => mbt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteManualBlockTemplates(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting manual block templates");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ManualBlockTemplates(where))
                    {
                        if (!whatIf) fsc.DeleteManualBlockTemplate((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.manual_block_templates{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} manual block templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadManualBlockTemplates(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading manual block templates");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ManualBlockTemplate.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ManualBlockTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ManualBlockTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertManualBlockTemplate(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ManualBlockTemplate.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} manual block templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveManualBlockTemplates(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving manual block templates");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ManualBlockTemplate.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ManualBlockTemplates(where, orderBy, skip, take) : fdc.ManualBlockTemplates(where, null, orderBy, skip, take).Select(mbt => mbt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ManualBlockTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ManualBlockTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} manual block templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountMaterialTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountMaterialTypes(where) : fdc.CountMaterialTypes(where))} material types");
            }
        }

        public static void QueryMaterialTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.MaterialTypes(where, orderBy, skip, take) : fdc.MaterialTypes(where, null, orderBy, skip, take).Select(mt => mt.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteMaterialTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting material types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.MaterialTypes(where))
                    {
                        if (!whatIf) fsc.DeleteMaterialType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.material_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} material types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadMaterialTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading material types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.MaterialType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"MaterialType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"MaterialType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertMaterialType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(MaterialType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} material types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveMaterialTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving material types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.MaterialType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.MaterialTypes(where, orderBy, skip, take) : fdc.MaterialTypes(where, null, orderBy, skip, take).Select(mt => mt.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"MaterialType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"MaterialType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} material types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountModeOfIssuances(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountModeOfIssuances(where) : fdc.CountModeOfIssuances(where))} mode of issuances");
            }
        }

        public static void QueryModeOfIssuances(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ModeOfIssuances(where, orderBy, skip, take) : fdc.ModeOfIssuances(where, null, orderBy, skip, take).Select(moi => moi.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteModeOfIssuances(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting mode of issuances");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ModeOfIssuances(where))
                    {
                        if (!whatIf) fsc.DeleteModeOfIssuance((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.mode_of_issuance{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} mode of issuances");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadModeOfIssuances(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading mode of issuances");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ModeOfIssuance.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ModeOfIssuance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ModeOfIssuance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertModeOfIssuance(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ModeOfIssuance.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} mode of issuances");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveModeOfIssuances(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving mode of issuances");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ModeOfIssuance.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ModeOfIssuances(where, orderBy, skip, take) : fdc.ModeOfIssuances(where, null, orderBy, skip, take).Select(moi => moi.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ModeOfIssuance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ModeOfIssuance {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} mode of issuances");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountNatureOfContentTerms(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountNatureOfContentTerms(where) : fdc.CountNatureOfContentTerms(where))} nature of content terms");
            }
        }

        public static void QueryNatureOfContentTerms(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.NatureOfContentTerms(where, orderBy, skip, take) : fdc.NatureOfContentTerms(where, null, orderBy, skip, take).Select(noct => noct.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteNatureOfContentTerms(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting nature of content terms");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.NatureOfContentTerms(where))
                    {
                        if (!whatIf) fsc.DeleteNatureOfContentTerm((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.nature_of_content_term{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} nature of content terms");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadNatureOfContentTerms(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading nature of content terms");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.NatureOfContentTerm.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"NatureOfContentTerm {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"NatureOfContentTerm {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertNatureOfContentTerm(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(NatureOfContentTerm.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} nature of content terms");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveNatureOfContentTerms(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving nature of content terms");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.NatureOfContentTerm.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.NatureOfContentTerms(where, orderBy, skip, take) : fdc.NatureOfContentTerms(where, null, orderBy, skip, take).Select(noct => noct.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"NatureOfContentTerm {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"NatureOfContentTerm {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} nature of content terms");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountNotes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountNotes(where) : fdc.CountNotes(where))} notes");
            }
        }

        public static void QueryNotes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Notes(where, orderBy, skip, take) : throw new NotSupportedException()).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteNotes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting notes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Notes(where))
                    {
                        if (!whatIf) fsc.DeleteNote((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_notes.note{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} notes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadNotes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading notes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Note.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Note {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Note {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertNote(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                            throw new NotSupportedException();
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} notes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveNotes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving notes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Note.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Notes(where, orderBy, skip, take) : throw new NotSupportedException())
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Note {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Note {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} notes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountNoteTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountNoteTypes(where) : fdc.CountNoteTypes(where))} note types");
            }
        }

        public static void QueryNoteTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.NoteTypes(where, orderBy, skip, take) : throw new NotSupportedException()).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteNoteTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting note types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.NoteTypes(where))
                    {
                        if (!whatIf) fsc.DeleteNoteType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_notes.type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadNoteTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading note types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.NoteType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"NoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"NoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertNoteType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                            throw new NotSupportedException();
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveNoteTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving note types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.NoteType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.NoteTypes(where, orderBy, skip, take) : throw new NotSupportedException())
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"NoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"NoteType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} note types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOrders(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOrders(where) : fdc.CountOrders(where))} orders");
            }
        }

        public static void QueryOrders(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Orders(where, orderBy, skip, take) : fdc.Orders(where, null, orderBy, skip, take).Select(o => o.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOrders(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting orders");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Orders(where))
                    {
                        if (!whatIf) fsc.DeleteOrder((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.purchase_order{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} orders");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOrders(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading orders");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Order.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Order {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Order {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOrder(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Order.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                fdc.Execute($"ALTER SEQUENCE uchicago_mod_orders_storage.po_number RESTART {fdc.ExecuteScalar<int>("SELECT MAX(CASE WHEN (jsonb->>'poNumber')::int < 500000 THEN (jsonb->>'poNumber')::int ELSE 0 END) + 1 FROM uchicago_mod_orders_storage.purchase_order")}");
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} orders");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOrders(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving orders");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Order.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Orders(where, orderBy, skip, take) : fdc.Orders(where, null, orderBy, skip, take).Select(o => o.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Order {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Order {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} orders");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOrderInvoices(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOrderInvoices(where) : fdc.CountOrderInvoices(where))} order invoices");
            }
        }

        public static void QueryOrderInvoices(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.OrderInvoices(where, orderBy, skip, take) : fdc.OrderInvoices(where, null, orderBy, skip, take).Select(oi => oi.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOrderInvoices(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting order invoices");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.OrderInvoices(where))
                    {
                        if (!whatIf) fsc.DeleteOrderInvoice((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.order_invoice_relationship{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} order invoices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOrderInvoices(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading order invoices");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OrderInvoice.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OrderInvoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OrderInvoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOrderInvoice(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(OrderInvoice.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} order invoices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOrderInvoices(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving order invoices");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OrderInvoice.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.OrderInvoices(where, orderBy, skip, take) : fdc.OrderInvoices(where, null, orderBy, skip, take).Select(oi => oi.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OrderInvoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OrderInvoice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} order invoices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOrderItems(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOrderItems(where) : fdc.CountOrderItems(where))} order items");
            }
        }

        public static void QueryOrderItems(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.OrderItems(where, orderBy, skip, take) : fdc.OrderItems(where, null, orderBy, skip, take).Select(oi => oi.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOrderItems(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting order items");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.OrderItems(where))
                    {
                        if (!whatIf) fsc.DeleteOrderItem((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.po_line{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} order items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOrderItems(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading order items");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OrderItem.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OrderItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OrderItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOrderItem(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(OrderItem.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} order items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOrderItems(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving order items");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OrderItem.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.OrderItems(where, orderBy, skip, take) : fdc.OrderItems(where, null, orderBy, skip, take).Select(oi => oi.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OrderItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OrderItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} order items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOrderTemplates(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOrderTemplates(where) : fdc.CountOrderTemplates(where))} order templates");
            }
        }

        public static void QueryOrderTemplates(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.OrderTemplates(where, orderBy, skip, take) : fdc.OrderTemplates(where, null, orderBy, skip, take).Select(ot => ot.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOrderTemplates(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting order templates");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.OrderTemplates(where))
                    {
                        if (!whatIf) fsc.DeleteOrderTemplate((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.order_templates{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} order templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOrderTemplates(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading order templates");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OrderTemplate.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OrderTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OrderTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOrderTemplate(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(OrderTemplate.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} order templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOrderTemplates(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving order templates");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OrderTemplate.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.OrderTemplates(where, orderBy, skip, take) : fdc.OrderTemplates(where, null, orderBy, skip, take).Select(ot => ot.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OrderTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OrderTemplate {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} order templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOrganizations(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOrganizations(where) : fdc.CountOrganizations(where))} organizations");
            }
        }

        public static void QueryOrganizations(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Organizations(where, orderBy, skip, take) : fdc.Organizations(where, null, orderBy, skip, take).Select(o => o.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOrganizations(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting organizations");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Organizations(where))
                    {
                        if (!whatIf) fsc.DeleteOrganization((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_organizations_storage.organizations{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} organizations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOrganizations(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading organizations");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Organization.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Organization {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Organization {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOrganization(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Organization.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} organizations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOrganizations(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving organizations");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Organization.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Organizations(where, orderBy, skip, take) : fdc.Organizations(where, null, orderBy, skip, take).Select(o => o.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Organization {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Organization {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} organizations");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOverdueFinePolicies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOverdueFinePolicies(where) : fdc.CountOverdueFinePolicies(where))} overdue fine policies");
            }
        }

        public static void QueryOverdueFinePolicies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.OverdueFinePolicies(where, orderBy, skip, take) : fdc.OverdueFinePolicies(where, null, orderBy, skip, take).Select(ofp => ofp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOverdueFinePolicies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting overdue fine policies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.OverdueFinePolicies(where))
                    {
                        if (!whatIf) fsc.DeleteOverdueFinePolicy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.overdue_fine_policy{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} overdue fine policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOverdueFinePolicies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading overdue fine policies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OverdueFinePolicy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OverdueFinePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OverdueFinePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOverdueFinePolicy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(OverdueFinePolicy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} overdue fine policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOverdueFinePolicies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving overdue fine policies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.OverdueFinePolicy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.OverdueFinePolicies(where, orderBy, skip, take) : fdc.OverdueFinePolicies(where, null, orderBy, skip, take).Select(ofp => ofp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"OverdueFinePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"OverdueFinePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} overdue fine policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountOwners(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountOwners(where) : fdc.CountOwners(where))} owners");
            }
        }

        public static void QueryOwners(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Owners(where, orderBy, skip, take) : fdc.Owners(where, null, orderBy, skip, take).Select(o => o.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteOwners(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting owners");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Owners(where))
                    {
                        if (!whatIf) fsc.DeleteOwner((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.owners{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} owners");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadOwners(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading owners");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Owner.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Owner {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Owner {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertOwner(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Owner.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} owners");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveOwners(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving owners");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Owner.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Owners(where, orderBy, skip, take) : fdc.Owners(where, null, orderBy, skip, take).Select(o => o.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Owner {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Owner {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} owners");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPatronActionSessions(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPatronActionSessions(where) : fdc.CountPatronActionSessions(where))} patron action sessions");
            }
        }

        public static void QueryPatronActionSessions(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.PatronActionSessions(where, orderBy, skip, take) : fdc.PatronActionSessions(where, null, orderBy, skip, take).Select(pas => pas.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePatronActionSessions(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting patron action sessions");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.PatronActionSessions(where))
                    {
                        if (!whatIf) fsc.DeletePatronActionSession((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.patron_action_session{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} patron action sessions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPatronActionSessions(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading patron action sessions");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PatronActionSession.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PatronActionSession {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PatronActionSession {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPatronActionSession(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(PatronActionSession.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} patron action sessions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePatronActionSessions(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving patron action sessions");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PatronActionSession.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.PatronActionSessions(where, orderBy, skip, take) : fdc.PatronActionSessions(where, null, orderBy, skip, take).Select(pas => pas.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PatronActionSession {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PatronActionSession {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} patron action sessions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPatronNoticePolicies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPatronNoticePolicies(where) : fdc.CountPatronNoticePolicies(where))} patron notice policies");
            }
        }

        public static void QueryPatronNoticePolicies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.PatronNoticePolicies(where, orderBy, skip, take) : fdc.PatronNoticePolicies(where, null, orderBy, skip, take).Select(pnp => pnp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePatronNoticePolicies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting patron notice policies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.PatronNoticePolicies(where))
                    {
                        if (!whatIf) fsc.DeletePatronNoticePolicy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.patron_notice_policy{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} patron notice policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPatronNoticePolicies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading patron notice policies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PatronNoticePolicy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PatronNoticePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PatronNoticePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPatronNoticePolicy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(PatronNoticePolicy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} patron notice policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePatronNoticePolicies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving patron notice policies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PatronNoticePolicy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.PatronNoticePolicies(where, orderBy, skip, take) : fdc.PatronNoticePolicies(where, null, orderBy, skip, take).Select(pnp => pnp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PatronNoticePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PatronNoticePolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} patron notice policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPayments(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPayments(where) : fdc.CountPayments(where))} payments");
            }
        }

        public static void QueryPayments(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Payments(where, orderBy, skip, take) : fdc.Payments(where, null, orderBy, skip, take).Select(p => p.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePayments(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting payments");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Payments(where))
                    {
                        if (!whatIf) fsc.DeletePayment((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.feefineactions{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} payments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPayments(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading payments");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Payment.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Payment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Payment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPayment(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Payment.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} payments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePayments(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving payments");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Payment.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Payments(where, orderBy, skip, take) : fdc.Payments(where, null, orderBy, skip, take).Select(p => p.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Payment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Payment {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} payments");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPaymentMethods(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPaymentMethods(where) : fdc.CountPaymentMethods(where))} payment methods");
            }
        }

        public static void QueryPaymentMethods(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.PaymentMethods(where, orderBy, skip, take) : fdc.PaymentMethods(where, null, orderBy, skip, take).Select(pm => pm.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePaymentMethods(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting payment methods");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.PaymentMethods(where))
                    {
                        if (!whatIf) fsc.DeletePaymentMethod((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.payments{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} payment methods");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPaymentMethods(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading payment methods");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PaymentMethod.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PaymentMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PaymentMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPaymentMethod(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(PaymentMethod.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} payment methods");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePaymentMethods(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving payment methods");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PaymentMethod.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.PaymentMethods(where, orderBy, skip, take) : fdc.PaymentMethods(where, null, orderBy, skip, take).Select(pm => pm.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PaymentMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PaymentMethod {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} payment methods");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPermissions(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPermissions(where) : fdc.CountPermissions(where))} permissions");
            }
        }

        public static void QueryPermissions(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Permissions(where, orderBy, skip, take) : fdc.Permissions(where, null, orderBy, skip, take).Select(p => p.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePermissions(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting permissions");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Permissions(where))
                    {
                        if (!whatIf) fsc.DeletePermission((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_permissions.permissions{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} permissions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPermissions(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading permissions");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Permission.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Permission {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Permission {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPermission(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Permission.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} permissions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePermissions(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving permissions");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Permission.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Permissions(where, orderBy, skip, take) : fdc.Permissions(where, null, orderBy, skip, take).Select(p => p.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Permission {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Permission {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} permissions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPermissionsUsers(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPermissionsUsers(where) : fdc.CountPermissionsUsers(where))} permissions users");
            }
        }

        public static void QueryPermissionsUsers(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.PermissionsUsers(where, orderBy, skip, take) : fdc.PermissionsUsers(where, null, orderBy, skip, take).Select(pu => pu.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePermissionsUsers(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting permissions users");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.PermissionsUsers(where))
                    {
                        if (!whatIf) fsc.DeletePermissionsUser((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_permissions.permissions_users{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} permissions users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPermissionsUsers(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading permissions users");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PermissionsUser.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PermissionsUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PermissionsUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPermissionsUser(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(PermissionsUser.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} permissions users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePermissionsUsers(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving permissions users");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PermissionsUser.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.PermissionsUsers(where, orderBy, skip, take) : fdc.PermissionsUsers(where, null, orderBy, skip, take).Select(pu => pu.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PermissionsUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PermissionsUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} permissions users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPrecedingSucceedingTitles(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPrecedingSucceedingTitles(where) : fdc.CountPrecedingSucceedingTitles(where))} preceding succeeding titles");
            }
        }

        public static void QueryPrecedingSucceedingTitles(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.PrecedingSucceedingTitles(where, orderBy, skip, take) : fdc.PrecedingSucceedingTitles(where, null, orderBy, skip, take).Select(pst => pst.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePrecedingSucceedingTitles(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting preceding succeeding titles");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.PrecedingSucceedingTitles(where))
                    {
                        if (!whatIf) fsc.DeletePrecedingSucceedingTitle((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.preceding_succeeding_title{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} preceding succeeding titles");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPrecedingSucceedingTitles(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading preceding succeeding titles");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PrecedingSucceedingTitle.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PrecedingSucceedingTitle {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PrecedingSucceedingTitle {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPrecedingSucceedingTitle(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(PrecedingSucceedingTitle.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} preceding succeeding titles");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePrecedingSucceedingTitles(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving preceding succeeding titles");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.PrecedingSucceedingTitle.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.PrecedingSucceedingTitles(where, orderBy, skip, take) : fdc.PrecedingSucceedingTitles(where, null, orderBy, skip, take).Select(pst => pst.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"PrecedingSucceedingTitle {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"PrecedingSucceedingTitle {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} preceding succeeding titles");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountPrefixes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountPrefixes(where) : fdc.CountPrefixes(where))} prefixes");
            }
        }

        public static void QueryPrefixes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Prefixes(where, orderBy, skip, take) : fdc.Prefixes(where, null, orderBy, skip, take).Select(p => p.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeletePrefixes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting prefixes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Prefixes(where))
                    {
                        if (!whatIf) fsc.DeletePrefix((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.prefixes{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} prefixes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadPrefixes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading prefixes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Prefix.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Prefix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Prefix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertPrefix(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Prefix.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} prefixes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SavePrefixes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving prefixes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Prefix.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Prefixes(where, orderBy, skip, take) : fdc.Prefixes(where, null, orderBy, skip, take).Select(p => p.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Prefix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Prefix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} prefixes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountProxies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountProxies(where) : fdc.CountProxies(where))} proxies");
            }
        }

        public static void QueryProxies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Proxies(where, orderBy, skip, take) : fdc.Proxies(where, null, orderBy, skip, take).Select(p => p.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteProxies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting proxies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Proxies(where))
                    {
                        if (!whatIf) fsc.DeleteProxy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_users.proxyfor{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} proxies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadProxies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading proxies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Proxy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Proxy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Proxy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertProxy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Proxy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} proxies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveProxies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving proxies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Proxy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Proxies(where, orderBy, skip, take) : fdc.Proxies(where, null, orderBy, skip, take).Select(p => p.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Proxy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Proxy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} proxies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountReceivings(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountReceivings(where) : fdc.CountReceivings(where))} receivings");
            }
        }

        public static void QueryReceivings(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Receivings(where, orderBy, skip, take) : fdc.Receivings(where, null, orderBy, skip, take).Select(r => r.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteReceivings(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting receivings");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Receivings(where))
                    {
                        if (!whatIf) fsc.DeleteReceiving((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.pieces{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} receivings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadReceivings(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading receivings");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Receiving.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Receiving {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Receiving {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertReceiving(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Receiving.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} receivings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveReceivings(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving receivings");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Receiving.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Receivings(where, orderBy, skip, take) : fdc.Receivings(where, null, orderBy, skip, take).Select(r => r.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Receiving {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Receiving {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} receivings");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRecords(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRecords(where) : fdc.CountRecords(where))} records");
            }
        }

        public static void QueryRecords(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Records(where, orderBy, skip, take) : throw new NotSupportedException()).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRecords(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting records");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Records(where))
                    {
                        if (!whatIf) fsc.DeleteRecord((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_source_record_storage.records_lb{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} records");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRecords(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading records");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Record.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                var l2 = new List<JObject>(1000);
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Record {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Record {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            l2.Add(jo);
                            if (i % 1000 == 0)
                            {
                                if (!whatIf) fsc.InsertRecords(l2);
                                l2.Clear();
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                            throw new NotSupportedException();
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                if (api && !whatIf && l2.Any()) fsc.InsertRecords(l2);
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} records");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRecords(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving records");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Record.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Records(where, orderBy, skip, take) : fdc.Query($"SELECT r.id::text AS id, r.snapshot_id::text AS \"snapshotId\", NULL AS \"matchedProfileId\", r.matched_id::text AS \"matchedId\", r.generation AS generation, r.record_type AS \"recordType\", rr.id::text AS id2, rr.content AS content, mr.id::text AS id3, mr.content AS content2, NULL AS \"formattedContent\", er.id::text AS id4, er.description AS description, er.content AS content3, false AS deleted, r.suppress_discovery AS \"suppressDiscovery\", r.created_date AS \"createdDate\", r.created_by_user_id::text AS \"createdByUserId\", NULL AS \"createdByUsername\", r.updated_date AS \"updatedDate\", r.updated_by_user_id::text AS \"updatedByUserId\", NULL AS \"updatedByUsername\", r.order AS order, r.instance_id::text AS \"instanceId\", r.instance_hrid AS \"instanceHrid\", r.state AS state, r.leader_record_status AS \"leaderRecordStatus\" FROM uchicago_mod_source_record_storage.records_lb r LEFT JOIN uchicago_mod_source_record_storage.raw_records_lb rr ON rr.id = r.id LEFT JOIN uchicago_mod_source_record_storage.marc_records_lb mr ON mr.id = r.id LEFT JOIN uchicago_mod_source_record_storage.error_records_lb er ON er.id = r.id{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", null, skip, take, 5 * 60).Select(d => JObject.FromObject(new
                {
                    d.id,
                    d.snapshotId,
                    d.matchedId,
                    d.generation,
                    d.recordType,
                    rawRecord = new
                    {
                        id = d.id2,
                        d.content
                    },
                    parsedRecord = new
                    {
                        id = d.id3,
                        content = JsonConvert.DeserializeObject<JObject>(d.content2),
                        d.formattedContent
                    },
                    errorRecord = new
                    {
                        id = d.id4,
                        d.description,
                        content = d.content3
                    },
                    d.deleted,
                    d.order,
                    externalIdsHolder = new
                    {
                        d.instanceId,
                        d.instanceHrid,
                        d.holdingsId,
                        d.holdingsHrid
                    },
                    additionalInfo = new
                    {
                        d.suppressDiscovery
                    },
                    d.state,
                    d.leaderRecordStatus,
                    metadata = new
                    {
                        d.createdDate,
                        d.createdByUserId,
                        d.createdByUsername,
                        d.updatedDate,
                        d.updatedByUserId,
                        d.updatedByUsername
                    }
                }, localTimeJsonSerializer)))
                {
                    jo.RemoveNullAndEmptyProperties();
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Record {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Record {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} records");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountReferenceDatas(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountReferenceDatas(where) : fdc.CountReferenceDatas(where))} reference datas");
            }
        }

        public static void QueryReferenceDatas(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ReferenceDatas(where, orderBy, skip, take) : fdc.ReferenceDatas(where, null, orderBy, skip, take).Select(rd => rd.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteReferenceDatas(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting reference datas");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ReferenceDatas(where))
                    {
                        if (!whatIf) fsc.DeleteReferenceData((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uc_agreements.reference_datas{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} reference datas");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadReferenceDatas(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading reference datas");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ReferenceData.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ReferenceData {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ReferenceData {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertReferenceData(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ReferenceData.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} reference datas");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveReferenceDatas(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving reference datas");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ReferenceData.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ReferenceDatas(where, orderBy, skip, take) : fdc.ReferenceDatas(where, null, orderBy, skip, take).Select(rd => rd.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ReferenceData {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ReferenceData {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} reference datas");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRefundReasons(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRefundReasons(where) : fdc.CountRefundReasons(where))} refund reasons");
            }
        }

        public static void QueryRefundReasons(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.RefundReasons(where, orderBy, skip, take) : fdc.RefundReasons(where, null, orderBy, skip, take).Select(rr => rr.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRefundReasons(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting refund reasons");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.RefundReasons(where))
                    {
                        if (!whatIf) fsc.DeleteRefundReason((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.refunds{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} refund reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRefundReasons(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading refund reasons");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RefundReason.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RefundReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RefundReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRefundReason(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(RefundReason.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} refund reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRefundReasons(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving refund reasons");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RefundReason.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.RefundReasons(where, orderBy, skip, take) : fdc.RefundReasons(where, null, orderBy, skip, take).Select(rr => rr.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RefundReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RefundReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} refund reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountReportingCodes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountReportingCodes(where) : fdc.CountReportingCodes(where))} reporting codes");
            }
        }

        public static void QueryReportingCodes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ReportingCodes(where, orderBy, skip, take) : fdc.ReportingCodes(where, null, orderBy, skip, take).Select(rc => rc.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteReportingCodes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting reporting codes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ReportingCodes(where))
                    {
                        if (!whatIf) fsc.DeleteReportingCode((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.reporting_code{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} reporting codes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadReportingCodes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading reporting codes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ReportingCode.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ReportingCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ReportingCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertReportingCode(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ReportingCode.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} reporting codes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveReportingCodes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving reporting codes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ReportingCode.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ReportingCodes(where, orderBy, skip, take) : fdc.ReportingCodes(where, null, orderBy, skip, take).Select(rc => rc.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ReportingCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ReportingCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} reporting codes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRequests(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRequests(where) : fdc.CountRequests(where))} requests");
            }
        }

        public static void QueryRequests(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Requests(where, orderBy, skip, take) : fdc.Requests(where, null, orderBy, skip, take).Select(r => r.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRequests(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting requests");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Requests(where))
                    {
                        if (!whatIf) fsc.DeleteRequest((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.request{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} requests");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRequests(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading requests");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Request.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Request {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Request {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRequest(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Request.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} requests");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRequests(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving requests");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Request.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Requests(where, orderBy, skip, take) : fdc.Requests(where, null, orderBy, skip, take).Select(r => r.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Request {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Request {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} requests");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRequestPolicies(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRequestPolicies(where) : fdc.CountRequestPolicies(where))} request policies");
            }
        }

        public static void QueryRequestPolicies(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.RequestPolicies(where, orderBy, skip, take) : fdc.RequestPolicies(where, null, orderBy, skip, take).Select(rp => rp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRequestPolicies(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting request policies");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.RequestPolicies(where))
                    {
                        if (!whatIf) fsc.DeleteRequestPolicy((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.request_policy{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} request policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRequestPolicies(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading request policies");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RequestPolicy.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RequestPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RequestPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRequestPolicy(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(RequestPolicy.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} request policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRequestPolicies(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving request policies");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RequestPolicy.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.RequestPolicies(where, orderBy, skip, take) : fdc.RequestPolicies(where, null, orderBy, skip, take).Select(rp => rp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RequestPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RequestPolicy {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} request policies");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRollovers(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRollovers(where) : fdc.CountRollovers(where))} rollovers");
            }
        }

        public static void QueryRollovers(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Rollovers(where, orderBy, skip, take) : fdc.Rollovers(where, null, orderBy, skip, take).Select(r => r.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRollovers(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting rollovers");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Rollovers(where))
                    {
                        if (!whatIf) fsc.DeleteRollover((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.ledger_fiscal_year_rollover{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} rollovers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRollovers(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading rollovers");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Rollover.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Rollover {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Rollover {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRollover(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Rollover.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} rollovers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRollovers(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving rollovers");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Rollover.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Rollovers(where, orderBy, skip, take) : fdc.Rollovers(where, null, orderBy, skip, take).Select(r => r.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Rollover {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Rollover {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} rollovers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRolloverBudgets(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRolloverBudgets(where) : fdc.CountRolloverBudgets(where))} rollover budgets");
            }
        }

        public static void QueryRolloverBudgets(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.RolloverBudgets(where, orderBy, skip, take) : fdc.RolloverBudgets(where, null, orderBy, skip, take).Select(rb => rb.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRolloverBudgets(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting rollover budgets");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.RolloverBudgets(where))
                    {
                        if (!whatIf) fsc.DeleteRolloverBudget((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.ledger_fiscal_year_rollover_budget{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} rollover budgets");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRolloverBudgets(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading rollover budgets");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RolloverBudget.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RolloverBudget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RolloverBudget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRolloverBudget(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(RolloverBudget.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} rollover budgets");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRolloverBudgets(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving rollover budgets");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RolloverBudget.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.RolloverBudgets(where, orderBy, skip, take) : fdc.RolloverBudgets(where, null, orderBy, skip, take).Select(rb => rb.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RolloverBudget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RolloverBudget {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} rollover budgets");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRolloverErrors(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRolloverErrors(where) : fdc.CountRolloverErrors(where))} rollover errors");
            }
        }

        public static void QueryRolloverErrors(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.RolloverErrors(where, orderBy, skip, take) : fdc.RolloverErrors(where, null, orderBy, skip, take).Select(re => re.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRolloverErrors(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting rollover errors");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.RolloverErrors(where))
                    {
                        if (!whatIf) fsc.DeleteRolloverError((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.ledger_fiscal_year_rollover_error{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} rollover errors");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRolloverErrors(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading rollover errors");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RolloverError.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RolloverError {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RolloverError {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRolloverError(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(RolloverError.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} rollover errors");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRolloverErrors(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving rollover errors");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RolloverError.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.RolloverErrors(where, orderBy, skip, take) : fdc.RolloverErrors(where, null, orderBy, skip, take).Select(re => re.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RolloverError {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RolloverError {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} rollover errors");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountRolloverProgresses(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountRolloverProgresses(where) : fdc.CountRolloverProgresses(where))} rollover progresses");
            }
        }

        public static void QueryRolloverProgresses(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.RolloverProgresses(where, orderBy, skip, take) : fdc.RolloverProgresses(where, null, orderBy, skip, take).Select(rp => rp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteRolloverProgresses(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting rollover progresses");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.RolloverProgresses(where))
                    {
                        if (!whatIf) fsc.DeleteRolloverProgress((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.ledger_fiscal_year_rollover_progress{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} rollover progresses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadRolloverProgresses(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading rollover progresses");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RolloverProgress.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RolloverProgress {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RolloverProgress {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertRolloverProgress(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(RolloverProgress.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} rollover progresses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveRolloverProgresses(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving rollover progresses");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.RolloverProgress.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.RolloverProgresses(where, orderBy, skip, take) : fdc.RolloverProgresses(where, null, orderBy, skip, take).Select(rp => rp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"RolloverProgress {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"RolloverProgress {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} rollover progresses");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountScheduledNotices(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountScheduledNotices(where) : fdc.CountScheduledNotices(where))} scheduled notices");
            }
        }

        public static void QueryScheduledNotices(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ScheduledNotices(where, orderBy, skip, take) : fdc.ScheduledNotices(where, null, orderBy, skip, take).Select(sn => sn.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteScheduledNotices(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting scheduled notices");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ScheduledNotices(where))
                    {
                        if (!whatIf) fsc.DeleteScheduledNotice((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.scheduled_notice{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} scheduled notices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadScheduledNotices(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading scheduled notices");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ScheduledNotice.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ScheduledNotice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ScheduledNotice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertScheduledNotice(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ScheduledNotice.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} scheduled notices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveScheduledNotices(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving scheduled notices");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ScheduledNotice.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ScheduledNotices(where, orderBy, skip, take) : fdc.ScheduledNotices(where, null, orderBy, skip, take).Select(sn => sn.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ScheduledNotice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ScheduledNotice {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} scheduled notices");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountServicePoints(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountServicePoints(where) : fdc.CountServicePoints(where))} service points");
            }
        }

        public static void QueryServicePoints(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ServicePoints(where, orderBy, skip, take) : fdc.ServicePoints(where, null, orderBy, skip, take).Select(sp => sp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteServicePoints(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting service points");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ServicePoints(where))
                    {
                        if (!whatIf) fsc.DeleteServicePoint((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.service_point{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} service points");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadServicePoints(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading service points");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ServicePoint.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ServicePoint {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ServicePoint {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertServicePoint(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ServicePoint.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} service points");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveServicePoints(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving service points");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ServicePoint.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ServicePoints(where, orderBy, skip, take) : fdc.ServicePoints(where, null, orderBy, skip, take).Select(sp => sp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ServicePoint {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ServicePoint {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} service points");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountServicePointUsers(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountServicePointUsers(where) : fdc.CountServicePointUsers(where))} service point users");
            }
        }

        public static void QueryServicePointUsers(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.ServicePointUsers(where, orderBy, skip, take) : fdc.ServicePointUsers(where, null, orderBy, skip, take).Select(spu => spu.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteServicePointUsers(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting service point users");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.ServicePointUsers(where))
                    {
                        if (!whatIf) fsc.DeleteServicePointUser((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.service_point_user{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} service point users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadServicePointUsers(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading service point users");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ServicePointUser.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ServicePointUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ServicePointUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertServicePointUser(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(ServicePointUser.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} service point users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveServicePointUsers(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving service point users");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.ServicePointUser.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.ServicePointUsers(where, orderBy, skip, take) : fdc.ServicePointUsers(where, null, orderBy, skip, take).Select(spu => spu.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"ServicePointUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"ServicePointUser {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} service point users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountSnapshots(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountSnapshots(where) : fdc.CountSnapshots(where))} snapshots");
            }
        }

        public static void QuerySnapshots(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Snapshots(where, orderBy, skip, take) : throw new NotSupportedException()).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteSnapshots(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting snapshots");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Snapshots(where))
                    {
                        if (!whatIf) fsc.DeleteSnapshot((string)jo["jobExecutionId"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_source_record_storage.snapshots_lb{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} snapshots");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadSnapshots(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading snapshots");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Snapshot.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Snapshot {jo["jobExecutionId"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Snapshot {jo["jobExecutionId"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertSnapshot(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                            throw new NotSupportedException();
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} snapshots");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveSnapshots(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving snapshots");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Snapshot.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Snapshots(where, orderBy, skip, take) : throw new NotSupportedException())
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Snapshot {jo["jobExecutionId"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Snapshot {jo["jobExecutionId"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} snapshots");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountSources(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountSources(where) : fdc.CountSources(where))} sources");
            }
        }

        public static void QuerySources(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Sources(where, orderBy, skip, take) : fdc.Sources(where, null, orderBy, skip, take).Select(s3 => s3.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteSources(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting sources");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Sources(where))
                    {
                        if (!whatIf) fsc.DeleteSource((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.holdings_records_source{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} sources");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadSources(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading sources");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Source.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Source {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Source {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertSource(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Source.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} sources");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveSources(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving sources");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Source.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Sources(where, orderBy, skip, take) : fdc.Sources(where, null, orderBy, skip, take).Select(s3 => s3.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Source {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Source {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} sources");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountStaffSlips(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountStaffSlips(where) : fdc.CountStaffSlips(where))} staff slips");
            }
        }

        public static void QueryStaffSlips(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.StaffSlips(where, orderBy, skip, take) : fdc.StaffSlips(where, null, orderBy, skip, take).Select(ss => ss.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteStaffSlips(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting staff slips");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.StaffSlips(where))
                    {
                        if (!whatIf) fsc.DeleteStaffSlip((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.staff_slips{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} staff slips");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadStaffSlips(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading staff slips");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.StaffSlip.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"StaffSlip {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"StaffSlip {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertStaffSlip(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(StaffSlip.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} staff slips");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveStaffSlips(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving staff slips");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.StaffSlip.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.StaffSlips(where, orderBy, skip, take) : fdc.StaffSlips(where, null, orderBy, skip, take).Select(ss => ss.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"StaffSlip {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"StaffSlip {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} staff slips");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountStatisticalCodes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountStatisticalCodes(where) : fdc.CountStatisticalCodes(where))} statistical codes");
            }
        }

        public static void QueryStatisticalCodes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.StatisticalCodes(where, orderBy, skip, take) : fdc.StatisticalCodes(where, null, orderBy, skip, take).Select(sc => sc.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteStatisticalCodes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting statistical codes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.StatisticalCodes(where))
                    {
                        if (!whatIf) fsc.DeleteStatisticalCode((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.statistical_code{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} statistical codes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadStatisticalCodes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading statistical codes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.StatisticalCode.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"StatisticalCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"StatisticalCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertStatisticalCode(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(StatisticalCode.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} statistical codes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveStatisticalCodes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving statistical codes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.StatisticalCode.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.StatisticalCodes(where, orderBy, skip, take) : fdc.StatisticalCodes(where, null, orderBy, skip, take).Select(sc => sc.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"StatisticalCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"StatisticalCode {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} statistical codes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountStatisticalCodeTypes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountStatisticalCodeTypes(where) : fdc.CountStatisticalCodeTypes(where))} statistical code types");
            }
        }

        public static void QueryStatisticalCodeTypes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.StatisticalCodeTypes(where, orderBy, skip, take) : fdc.StatisticalCodeTypes(where, null, orderBy, skip, take).Select(sct => sct.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteStatisticalCodeTypes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting statistical code types");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.StatisticalCodeTypes(where))
                    {
                        if (!whatIf) fsc.DeleteStatisticalCodeType((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_inventory_storage.statistical_code_type{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} statistical code types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadStatisticalCodeTypes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading statistical code types");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.StatisticalCodeType.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"StatisticalCodeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"StatisticalCodeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertStatisticalCodeType(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(StatisticalCodeType.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} statistical code types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveStatisticalCodeTypes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving statistical code types");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.StatisticalCodeType.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.StatisticalCodeTypes(where, orderBy, skip, take) : fdc.StatisticalCodeTypes(where, null, orderBy, skip, take).Select(sct => sct.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"StatisticalCodeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"StatisticalCodeType {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} statistical code types");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountSuffixes(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountSuffixes(where) : fdc.CountSuffixes(where))} suffixes");
            }
        }

        public static void QuerySuffixes(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Suffixes(where, orderBy, skip, take) : fdc.Suffixes(where, null, orderBy, skip, take).Select(s3 => s3.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteSuffixes(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting suffixes");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Suffixes(where))
                    {
                        if (!whatIf) fsc.DeleteSuffix((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.suffixes{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} suffixes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadSuffixes(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading suffixes");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Suffix.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Suffix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Suffix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertSuffix(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Suffix.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} suffixes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveSuffixes(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving suffixes");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Suffix.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Suffixes(where, orderBy, skip, take) : fdc.Suffixes(where, null, orderBy, skip, take).Select(s3 => s3.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Suffix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Suffix {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} suffixes");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountTemplates(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountTemplates(where) : fdc.CountTemplates(where))} templates");
            }
        }

        public static void QueryTemplates(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Templates(where, orderBy, skip, take) : fdc.Templates(where, null, orderBy, skip, take).Select(t => t.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteTemplates(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting templates");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Templates(where))
                    {
                        if (!whatIf) fsc.DeleteTemplate((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_template_engine.template{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadTemplates(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading templates");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Template.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Template {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Template {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertTemplate(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Template.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveTemplates(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving templates");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Template.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Templates(where, orderBy, skip, take) : fdc.Templates(where, null, orderBy, skip, take).Select(t => t.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Template {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Template {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} templates");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountTitles(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountTitles(where) : fdc.CountTitles(where))} titles");
            }
        }

        public static void QueryTitles(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Titles(where, orderBy, skip, take) : fdc.Titles(where, null, orderBy, skip, take).Select(t => t.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteTitles(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting titles");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Titles(where))
                    {
                        if (!whatIf) fsc.DeleteTitle((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.titles{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} titles");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadTitles(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading titles");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Title.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Title {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Title {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertTitle(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Title.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} titles");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveTitles(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving titles");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Title.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Titles(where, orderBy, skip, take) : fdc.Titles(where, null, orderBy, skip, take).Select(t => t.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Title {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Title {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} titles");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountTransactions(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountTransactions(where) : fdc.CountTransactions(where))} transactions");
            }
        }

        public static void QueryTransactions(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Transactions(where, orderBy, skip, take) : fdc.Transactions(where, null, orderBy, skip, take).Select(t => t.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteTransactions(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting transactions");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Transactions(where))
                    {
                        if (!whatIf) fsc.DeleteTransaction((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_finance_storage.transaction{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} transactions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadTransactions(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading transactions");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Transaction.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Transaction {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Transaction {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertTransaction(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Transaction.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} transactions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveTransactions(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving transactions");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Transaction.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Transactions(where, orderBy, skip, take) : fdc.Transactions(where, null, orderBy ?? "CASE jsonb->>'transactionType' WHEN 'Allocation' THEN 1 WHEN 'Encumbrance' THEN 2 ELSE 3 END", skip, take).Select(t => t.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Transaction {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Transaction {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} transactions");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountTransferAccounts(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountTransferAccounts(where) : fdc.CountTransferAccounts(where))} transfer accounts");
            }
        }

        public static void QueryTransferAccounts(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.TransferAccounts(where, orderBy, skip, take) : fdc.TransferAccounts(where, null, orderBy, skip, take).Select(ta => ta.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteTransferAccounts(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting transfer accounts");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.TransferAccounts(where))
                    {
                        if (!whatIf) fsc.DeleteTransferAccount((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.transfers{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} transfer accounts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadTransferAccounts(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading transfer accounts");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.TransferAccount.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"TransferAccount {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"TransferAccount {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertTransferAccount(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(TransferAccount.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} transfer accounts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveTransferAccounts(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving transfer accounts");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.TransferAccount.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.TransferAccounts(where, orderBy, skip, take) : fdc.TransferAccounts(where, null, orderBy, skip, take).Select(ta => ta.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"TransferAccount {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"TransferAccount {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} transfer accounts");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountTransferCriterias(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountTransferCriterias(where) : fdc.CountTransferCriterias(where))} transfer criterias");
            }
        }

        public static void QueryTransferCriterias(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.TransferCriterias(where, orderBy, skip, take) : fdc.TransferCriterias(where, null, orderBy, skip, take).Select(tc => tc.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteTransferCriterias(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting transfer criterias");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.TransferCriterias(where))
                    {
                        if (!whatIf) fsc.DeleteTransferCriteria((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.transfer_criteria{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} transfer criterias");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadTransferCriterias(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading transfer criterias");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.TransferCriteria.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"TransferCriteria {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"TransferCriteria {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertTransferCriteria(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(TransferCriteria.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} transfer criterias");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveTransferCriterias(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving transfer criterias");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.TransferCriteria.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.TransferCriterias(where, orderBy, skip, take) : fdc.TransferCriterias(where, null, orderBy, skip, take).Select(tc => tc.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"TransferCriteria {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"TransferCriteria {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} transfer criterias");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountUsers(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountUsers(where) : fdc.CountUsers(where))} users");
            }
        }

        public static void QueryUsers(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Users(where, orderBy, skip, take) : fdc.Users(where, null, orderBy, skip, take).Select(u => u.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteUsers(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting users");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Users(where))
                    {
                        if (!whatIf) fsc.DeleteUser((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_users.users{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadUsers(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading users");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.User.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"User {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"User {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertUser(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(User.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void UpdateUsers(string path, string where = null, bool disable = true)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Updating users");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.User.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var dt = api ? fsc.GetCurrentTime() : fdc.ExecuteScalar<DateTime>("SELECT current_timestamp");
                dt = dt.AddTicks(-dt.Ticks % TimeSpan.TicksPerMillisecond);
                var users = api ? fsc.Users().ToArray() : fdc.Query<string>($"SELECT jsonb FROM uchicago_mod_users.users").Select(s3 => JsonConvert.DeserializeObject<JObject>(s3)).ToArray();
                var ids = users.ToDictionary(jo => (string)jo["id"]);
                var externalSystemIds = users.Where(jo => jo.SelectToken("externalSystemId") != null).ToDictionary(jo => (string)jo.SelectToken("externalSystemId"));
                var usernames = users.Where(jo => jo.SelectToken("username") != null).ToDictionary(jo => (string)jo.SelectToken("username"));
                var barcodes = users.Where(jo => jo.SelectToken("barcode") != null).ToDictionary(jo => (string)jo.SelectToken("barcode"));
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                var s2 = Stopwatch.StartNew();
                jtr.Read();
                int i = 0, j = 0, k = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if ((string)jo.SelectToken("id") == null && (string)jo.SelectToken("externalSystemId") == null && (string)jo.SelectToken("username") == null && (string)jo.SelectToken("barcode") == null) throw new Exception("No keys found");
                    var jo2 = (string)jo.SelectToken("id") != null && ids.ContainsKey((string)jo.SelectToken("id")) ? ids[(string)jo.SelectToken("id")] : null;
                    if (jo2 == null) jo2 = (string)jo.SelectToken("externalSystemId") != null && externalSystemIds.ContainsKey((string)jo.SelectToken("externalSystemId")) ? externalSystemIds[(string)jo.SelectToken("externalSystemId")] : null;
                    if (jo2 == null) jo2 = (string)jo.SelectToken("username") != null && usernames.ContainsKey((string)jo.SelectToken("username")) ? usernames[(string)jo.SelectToken("username")] : null;
                    if (jo2 == null) jo2 = (string)jo.SelectToken("barcode") != null && barcodes.ContainsKey((string)jo.SelectToken("barcode")) ? barcodes[(string)jo.SelectToken("barcode")] : null;
                    if (!jo.ContainsKey("metadata")) jo.Add(new JProperty("metadata", new JObject()));
                    if (jo.SelectToken("metadata.createdDate") == null && jo2 == null) ((JObject)jo["metadata"]).Add(new JProperty("createdDate", dt));
                    if (jo.SelectToken("metadata.createdByUserId") == null && jo2 == null) ((JObject)jo["metadata"]).Add(new JProperty("createdByUserId", userId));
                    if (jo.SelectToken("metadata.updatedDate") == null) ((JObject)jo["metadata"]).Add(new JProperty("updatedDate", dt));
                    if (jo.SelectToken("metadata.updatedByUserId") == null) ((JObject)jo["metadata"]).Add(new JProperty("updatedByUserId", userId));
                    if (jo.SelectToken("enrollmentDate") == null && jo2 == null) jo.Add(new JProperty("enrollmentDate", dt));
                    if (jo2 != null)
                    {
                        jo2.Merge(jo, new JsonMergeSettings { MergeArrayHandling = MergeArrayHandling.Replace, MergeNullValueHandling = MergeNullValueHandling.Merge });
                        jo = jo2;
                    }
                    else
                        if ((string)jo["id"] == null) jo["id"] = Guid.NewGuid().ToString();
                    jo.RemoveNullAndEmptyProperties();
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"User {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"User {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (jo2 != null)
                    {
                        var jo4 = (string)jo.SelectToken("externalSystemId") != null && externalSystemIds.ContainsKey((string)jo.SelectToken("externalSystemId")) ? externalSystemIds[(string)jo.SelectToken("externalSystemId")] : null;
                        if (jo4 != null && jo4 != jo2)
                        {
                            if (jo4 != null && jo4 != jo2) jo4["externalSystemId"] = $"{jo4["externalSystemId"]}-{dt:o}";
                            jo4["metadata"]["updatedDate"] = dt;
                            jo4["metadata"]["updatedByUserId"] = userId;
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"Setting externalSystemId to {jo4["externalSystemId"]} for {jo4["id"]}");
                            if (!whatIf) if (api) fsc.UpdateUser(jo4); else fdc.Update(User.FromJObject(jo4));
                        }
                        jo4 = (string)jo.SelectToken("username") != null && usernames.ContainsKey((string)jo.SelectToken("username")) ? usernames[(string)jo.SelectToken("username")] : null;
                        if (jo4 != null && jo4 != jo2)
                        {
                            if (jo4 != null && jo4 != jo2) jo4["username"] = $"{jo4["username"]}-{dt:o}";
                            jo4["metadata"]["updatedDate"] = dt;
                            jo4["metadata"]["updatedByUserId"] = userId;
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"Setting username to {jo4["username"]} for {jo4["id"]}");
                            if (!whatIf) if (api) fsc.UpdateUser(jo4); else fdc.Update(User.FromJObject(jo4));
                        }
                        jo4 = (string)jo.SelectToken("barcode") != null && barcodes.ContainsKey((string)jo.SelectToken("barcode")) ? barcodes[(string)jo.SelectToken("barcode")] : null;
                        if (jo4 != null && jo4 != jo2)
                        {
                            if (jo4 != null && jo4 != jo2) jo4["barcode"] = $"{jo4["barcode"]}-{dt:o}";
                            jo4["metadata"]["updatedDate"] = dt;
                            jo4["metadata"]["updatedByUserId"] = userId;
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"Setting barcode to {jo4["barcode"]} for {jo4["id"]}");
                            if (!whatIf) if (api) fsc.UpdateUser(jo4); else fdc.Update(User.FromJObject(jo4));
                        }
                    }
                    var jo3 = jo2 == null ? JObject.FromObject(new
                    {
                        id = Guid.NewGuid(),
                        userId = (Guid?)jo.SelectToken("id"),
                        permissions = new object[] { },
                        metadata = new
                        {
                            createdDate = (DateTime?)jo.SelectToken("metadata.createdDate"),
                            createdByUserId = (string)jo.SelectToken("metadata.createdByUserId"),
                            updatedDate = (DateTime?)jo.SelectToken("metadata.updatedDate"),
                            updatedByUserId = (string)jo.SelectToken("metadata.updatedByUserId")
                        }
                    }, localTimeJsonSerializer) : null;
                    jo3?.RemoveNullAndEmptyProperties();
                    if (api)
                    {
                        if (!whatIf) if (jo2 == null) { fsc.InsertUser(jo); fsc.InsertPermissionsUser(jo3); ++j; } else { fsc.UpdateUser(jo); ++k; }
                        if (i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    else
                    {
                        var u = User.FromJObject(jo);
                        var pu = jo2 == null ? PermissionsUser.FromJObject(jo3) : null;
                        if (!whatIf) if (jo2 == null) { fdc.Insert(u); fdc.Insert(pu); ++j; } else { fdc.Update(u); ++k; }
                        if (i % 1000 == 0)
                        {
                            fdc.Commit();
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                }
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {j} users");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Updated {k} users");
                if (disable)
                {
                    if (api)
                    {
                        k = 0;
                        foreach (var u in fsc.Users($"{(where != null ? $"{where} and " : "")}active == true and metadata.updatedDate <= \"{dt.ToUniversalTime():yyyy-MM-ddTHH:mm:ss.fff+00:00}\""))
                        {
                            u["active"] = false;
                            u["expirationDate"] = DateTime.UtcNow.Date;
                            fsc.UpdateUser(u);
                            ++k;
                        }
                    }
                    else
                    {
                        k = fdc.Execute($"UPDATE uchicago_mod_users.users SET jsonb = jsonb_set(jsonb_set(jsonb_set(jsonb, '{{active}}', 'false'), '{{metadata,updatedDate}}', '\"{dt.ToUniversalTime():yyyy-MM-ddTHH:mm:ss.fff+00:00}\"'), '{{metadata,updatedByUserId}}', '\"{userId}\"') WHERE (jsonb->>'active')::BOOLEAN = true AND (jsonb#>>'{{metadata,updatedDate}}')::timestamptz < @dt::timestamptz AND id != '{userId}'{(where != null ? $" AND {where}" : "")}", new { dt });
                        fdc.Commit();
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"Disabled {k} users");
                }
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void ImportUsers(string path, string source = null, bool disable = true, bool merge = true)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Importing users");
            var s = Stopwatch.StartNew();
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var l = JToken.Parse(File.ReadAllText(path)).Cast<JObject>();
                if (take != null) l = l.Take(take.Value);
                var jo = fsc.ImportUsers(l, source, disable, merge);
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{jo["totalRecords"]} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {jo["createdRecords"]} users");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Updated {jo["updatedRecords"]} users");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Failed {jo["failedRecords"]} users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveUsers(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving users");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.User.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Users(where, orderBy, skip, take) : fdc.Users(where, null, orderBy, skip, take).Select(u => u.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"User {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"User {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} users");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountUserAcquisitionsUnits(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountUserAcquisitionsUnits(where) : fdc.CountUserAcquisitionsUnits(where))} user acquisitions units");
            }
        }

        public static void QueryUserAcquisitionsUnits(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.UserAcquisitionsUnits(where, orderBy, skip, take) : fdc.UserAcquisitionsUnits(where, null, orderBy, skip, take).Select(uau => uau.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteUserAcquisitionsUnits(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting user acquisitions units");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.UserAcquisitionsUnits(where))
                    {
                        if (!whatIf) fsc.DeleteUserAcquisitionsUnit((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_orders_storage.acquisitions_unit_membership{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} user acquisitions units");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadUserAcquisitionsUnits(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading user acquisitions units");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.UserAcquisitionsUnit.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"UserAcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"UserAcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertUserAcquisitionsUnit(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(UserAcquisitionsUnit.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} user acquisitions units");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveUserAcquisitionsUnits(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving user acquisitions units");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.UserAcquisitionsUnit.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.UserAcquisitionsUnits(where, orderBy, skip, take) : fdc.UserAcquisitionsUnits(where, null, orderBy, skip, take).Select(uau => uau.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"UserAcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"UserAcquisitionsUnit {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} user acquisitions units");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountUserRequestPreferences(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountUserRequestPreferences(where) : fdc.CountUserRequestPreferences(where))} user request preferences");
            }
        }

        public static void QueryUserRequestPreferences(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.UserRequestPreferences(where, orderBy, skip, take) : fdc.UserRequestPreferences(where, null, orderBy, skip, take).Select(urp => urp.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteUserRequestPreferences(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting user request preferences");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.UserRequestPreferences(where))
                    {
                        if (!whatIf) fsc.DeleteUserRequestPreference((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_circulation_storage.user_request_preference{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} user request preferences");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadUserRequestPreferences(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading user request preferences");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.UserRequestPreference.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"UserRequestPreference {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"UserRequestPreference {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertUserRequestPreference(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(UserRequestPreference.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} user request preferences");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveUserRequestPreferences(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving user request preferences");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.UserRequestPreference.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.UserRequestPreferences(where, orderBy, skip, take) : fdc.UserRequestPreferences(where, null, orderBy, skip, take).Select(urp => urp.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"UserRequestPreference {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"UserRequestPreference {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} user request preferences");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountUserSummaries(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            {
                Console.WriteLine($"{(api ? throw new NotSupportedException() : fdc.CountUserSummaries(where))} user summaries");
            }
        }

        public static void QueryUserSummaries(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? throw new NotSupportedException() : fdc.UserSummaries(where, null, orderBy, skip, take).Select(us => us.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteUserSummaries(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting user summaries");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            {
                var i = 0;
                if (api)
                {
                    throw new NotSupportedException();
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_patron_blocks.user_summary{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} user summaries");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadUserSummaries(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading user summaries");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.UserSummary.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"UserSummary {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"UserSummary {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            throw new NotSupportedException();
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(UserSummary.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} user summaries");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveUserSummaries(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving user summaries");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.UserSummary.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? throw new NotSupportedException() : fdc.UserSummaries(where, null, orderBy, skip, take).Select(us => us.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"UserSummary {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"UserSummary {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} user summaries");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountVouchers(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountVouchers(where) : fdc.CountVouchers(where))} vouchers");
            }
        }

        public static void QueryVouchers(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.Vouchers(where, orderBy, skip, take) : fdc.Vouchers(where, null, orderBy, skip, take).Select(v => v.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteVouchers(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting vouchers");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.Vouchers(where))
                    {
                        if (!whatIf) fsc.DeleteVoucher((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_invoice_storage.vouchers{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} vouchers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadVouchers(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading vouchers");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Voucher.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Voucher {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Voucher {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertVoucher(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(Voucher.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                fdc.Execute($"ALTER SEQUENCE uchicago_mod_invoice_storage.voucher_number START 360000 RESTART {fdc.ExecuteScalar<int>("SELECT MAX(CASE WHEN LEFT(jsonb->> 'voucherNumber', 1) = 'R' THEN SUBSTRING(jsonb->>'voucherNumber', 2)::int ELSE 0 END) + 1 FROM uchicago_mod_invoice_storage.vouchers")}");
                fdc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} vouchers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveVouchers(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving vouchers");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.Voucher.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.Vouchers(where, orderBy, skip, take) : fdc.Vouchers(where, null, orderBy, skip, take).Select(v => v.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"Voucher {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"Voucher {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} vouchers");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountVoucherItems(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountVoucherItems(where) : fdc.CountVoucherItems(where))} voucher items");
            }
        }

        public static void QueryVoucherItems(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.VoucherItems(where, orderBy, skip, take) : fdc.VoucherItems(where, null, orderBy, skip, take).Select(vi => vi.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteVoucherItems(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting voucher items");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.VoucherItems(where))
                    {
                        if (!whatIf) fsc.DeleteVoucherItem((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_invoice_storage.voucher_lines{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} voucher items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadVoucherItems(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading voucher items");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.VoucherItem.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"VoucherItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"VoucherItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertVoucherItem(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(VoucherItem.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} voucher items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveVoucherItems(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving voucher items");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.VoucherItem.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.VoucherItems(where, orderBy, skip, take) : fdc.VoucherItems(where, null, orderBy, skip, take).Select(vi => vi.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"VoucherItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"VoucherItem {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} voucher items");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void CountWaiveReasons(string where = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                Console.WriteLine($"{(api ? fsc.CountWaiveReasons(where) : fdc.CountWaiveReasons(where))} waive reasons");
            }
        }

        public static void QueryWaiveReasons(string where = null, string orderBy = null, int? skip = null, int? take = null, string select = null)
        {
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var jtw = new JsonTextWriter(Console.Out))
            {
                jtw.WriteStartArray();
                foreach (var jo in (api ? fsc.WaiveReasons(where, orderBy, skip, take) : fdc.WaiveReasons(where, null, orderBy, skip, take).Select(wr => wr.ToJObject())).Select(jo =>
                {
                    return select == null ? jo : new JObject(select.Split(',').Select(s =>
                    {
                        var m = Regex.Match(s.Trim(), @"(?<Path>\S+)((?i) as (?<Name>.+))?", RegexOptions.Compiled);
                        return new JProperty(m.Groups["Name"].Success ? m.Groups["Name"].Value : m.Groups["Path"].Value.Split('.').Last(), jo.SelectToken(m.Groups["Path"].Value));
                    }));
                })) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                jtw.WriteEndArray();
            }
        }

        public static void DeleteWaiveReasons(string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Deleting waive reasons");
            var s = Stopwatch.StartNew();
            using (var fbcc = new FolioBulkCopyContext(connectionString, checkConstraints: !force))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var i = 0;
                if (api)
                {
                    var s2 = Stopwatch.StartNew();
                    foreach (var jo in fsc.WaiveReasons(where))
                    {
                        if (!whatIf) fsc.DeleteWaiveReason((string)jo["id"]);
                        if (++i % 100 == 0)
                        {
                            traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                            s2.Restart();
                        }
                    }
                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                }
                else
                {
                    if (!whatIf) i = fbcc.ExecuteNonQuery($"DELETE FROM uchicago_mod_feesfines.waives{(where != null ? $" WHERE {where}" : "")}");
                }
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Deleted {i} waive reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void LoadWaiveReasons(string path)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Loading waive reasons");
            var s = Stopwatch.StartNew();
            using (var sr = new StreamReader(compress || path.EndsWith(".gz") ? (Stream)new GZipStream(File.OpenRead($"{path}{(path.EndsWith(".gz") ? "" : ".gz")}"), CompressionMode.Decompress) : File.OpenRead(path)))
            using (var sr2 = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.WaiveReason.json")))
            using (var jtr = new JsonTextReader(sr) { SupportMultipleContent = true })
            using (var fbcc = new FolioBulkCopyContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr2.ReadToEndAsync().Result).Result;
                jtr.Read();
                var i = 0;
                while (jtr.Read() && jtr.TokenType != JsonToken.EndArray)
                {
                    if (take != null && take <= i) break;
                    ++i;
                    var jo = (JObject)localTimeJsonSerializer.Deserialize(jtr);
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"WaiveReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"WaiveReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    try
                    {
                        if (api)
                        {
                            if (!whatIf) fsc.InsertWaiveReason(jo);
                            if (i % 100 == 0)
                            {
                                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                s2.Restart();
                            }
                        }
                        else
                        {
                            if (!whatIf) fbcc.Insert(WaiveReason.FromJObject(jo));
                            if (i % 1000 == 0)
                            {
                                fbcc.Commit();
                                if (i % 10000 == 0)
                                {
                                    traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                                    s2.Restart();
                                }
                            }
                        }
                    }
                    catch (Exception e)
                    {
                        traceSource.TraceEvent(TraceEventType.Error, 0, $"{e}\r\n{jo}");
                        if (!force || e.Message.Contains("Connection was closed")) throw;
                    }
                }
                fbcc.Commit();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Added {i} waive reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }

        public static void SaveWaiveReasons(string path, string where = null)
        {
            traceSource.TraceEvent(TraceEventType.Information, 0, "Saving waive reasons");
            var s = Stopwatch.StartNew();
            using (var fdc = new FolioDapperContext(connectionString))
            using (var fsc = new FolioServiceClient(connectionString))
            using (var sr = new StreamReader(Assembly.GetAssembly(typeof(FolioDapperContext)).GetManifestResourceStream("FolioLibrary.WaiveReason.json")))
            using (var sw = new StreamWriter(whatIf ? new MemoryStream() : compress ? (Stream)new GZipStream(new FileStream($"{path}.gz", FileMode.Create), CompressionMode.Compress) : new FileStream(path, FileMode.Create)))
            using (var jtw = new JsonTextWriter(sw))
            {
                var s2 = Stopwatch.StartNew();
                var js = JsonSchema.FromJsonAsync(sr.ReadToEndAsync().Result).Result;
                jtw.WriteStartArray();
                var i = 0;
                foreach (var jo in api ? fsc.WaiveReasons(where, orderBy, skip, take) : fdc.WaiveReasons(where, null, orderBy, skip, take).Select(wr => wr.ToJObject()))
                {
                    if (validate)
                    {
                        var l = js.Validate(jo);
                        if (l.Any()) if (force) traceSource.TraceEvent(TraceEventType.Error, 0, $"WaiveReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}"); else throw new ValidationException($"WaiveReason {jo["id"]}: {string.Join(" ", l.Select(ve => ve.ToString()))}: {jo}");
                    }
                    if (!whatIf) (universalTime ? universalTimeJsonSerializer : localTimeJsonSerializer).Serialize(jtw, jo);
                    if (++i % 10000 == 0)
                    {
                        traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                        s2.Restart();
                    }
                }
                jtw.WriteEndArray();
                traceSource.TraceEvent(TraceEventType.Information, 0, $"{i} {s2.Elapsed} {s.Elapsed}");
                traceSource.TraceEvent(TraceEventType.Information, 0, $"Saved {i} waive reasons");
            }
            traceSource.TraceEvent(TraceEventType.Information, 0, $"{s.Elapsed} elapsed");
        }
    }

    class ConfigurationManager
    {
        public class ValueOrDefaultDictionary<T>
        {
            private readonly Dictionary<string, T> dictionary;

            public ValueOrDefaultDictionary(Dictionary<string, T> dictionary) => this.dictionary = dictionary;

            public T this[string name] => name != null ? dictionary.TryGetValue(name, out T t) ? t : default : default;
        }

        private static Lazy<ValueOrDefaultDictionary<ConnectionStringSettings>> connectionStrings = new Lazy<ValueOrDefaultDictionary<ConnectionStringSettings>>(() =>
        {
            var path = $"{Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName)}/ConnectionStrings.config";
            return new ValueOrDefaultDictionary<ConnectionStringSettings>((!File.Exists(path) ? new XDocument() : XDocument.Load(path)).Descendants("add").Select(xe => new ConnectionStringSettings(xe.Attribute("name").Value, xe.Attribute("connectionString")?.Value, xe.Attribute("providerName")?.Value)).ToDictionary(css => css.Name));
        });

        public static ValueOrDefaultDictionary<ConnectionStringSettings> ConnectionStrings => connectionStrings.Value;

        private static Lazy<ValueOrDefaultDictionary<string>> appSettings = new Lazy<ValueOrDefaultDictionary<string>>(() =>
        {
            var path = $"{Path.GetDirectoryName(Process.GetCurrentProcess().MainModule.FileName)}/AppSettings.config";
            return new ValueOrDefaultDictionary<string>((!File.Exists(path) ? new XDocument() : XDocument.Load(path)).Descendants("add").ToDictionary(xe => xe.Attribute("key").Value, xe => xe.Attribute("value").Value));
        });

        public static ValueOrDefaultDictionary<string> AppSettings => appSettings.Value;
    }
}
