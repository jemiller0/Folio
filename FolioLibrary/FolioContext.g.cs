using Microsoft.EntityFrameworkCore;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;

namespace FolioLibrary
{
    public partial class FolioContext
    {
        private DbConnection dbConnection;
        private DbTransaction dbTransaction;
        private DbCommand getIdDbCommand;
        private DbCommand insertAccountDbCommand, insertAccount2DbCommand, insertAddressDbCommand, insertAddressTypeDbCommand, insertAdjustmentDbCommand, insertAgreementDbCommand, insertAlertDbCommand, insertAliasDbCommand, insertAlternativeTitleTypeDbCommand, insertAuditLoanDbCommand, insertAuthAttemptDbCommand, insertAuthCredentialsHistoryDbCommand, insertAuthPasswordActionDbCommand, insertBlockDbCommand, insertBudgetDbCommand, insertCallNumberTypeDbCommand, insertCampusDbCommand, insertCancellationReasonDbCommand, insertCategoryDbCommand, insertCirculationRuleDbCommand, insertClaimDbCommand, insertClassificationTypeDbCommand, insertCommentDbCommand, insertContactDbCommand, insertContactCategoryDbCommand, insertContributorNameTypeDbCommand, insertContributorTypeDbCommand, insertCostDbCommand, insertDetailDbCommand, insertElectronicAccessRelationshipDbCommand, insertEmailDbCommand, insertEresourceDbCommand, insertEventLogDbCommand, insertFeeDbCommand, insertFeeActionDbCommand, insertFiscalYearDbCommand, insertFixedDueDateScheduleDbCommand, insertFundDbCommand, insertFundDistributionDbCommand, insertFundDistribution2DbCommand, insertGroupDbCommand, insertHoldingDbCommand, insertHoldingNoteTypeDbCommand, insertHoldingTypeDbCommand, insertIdTypeDbCommand, insertIllPolicyDbCommand, insertInstanceDbCommand, insertInstanceFormatDbCommand, insertInstanceRelationshipDbCommand, insertInstanceRelationshipTypeDbCommand, insertInstanceSourceMarcDbCommand, insertInstanceStatusDbCommand, insertInstanceTypeDbCommand, insertInstitutionDbCommand, insertInterfaceDbCommand, insertItemDbCommand, insertItemNoteTypeDbCommand, insertLedgerDbCommand, insertLibraryDbCommand, insertLoanDbCommand, insertLoanPolicyDbCommand, insertLoanTypeDbCommand, insertLocationDbCommand, insertLoginDbCommand, insertMaterialTypeDbCommand, insertModeOfIssuanceDbCommand, insertNoteDbCommand, insertOrderDbCommand, insertOrderItemDbCommand, insertOrderItemLocationDbCommand, insertOwnerDbCommand, insertPatronNoticePolicyDbCommand, insertPaymentDbCommand, insertPermissionDbCommand, insertPermissionsUserDbCommand, insertPhoneNumberDbCommand, insertPhysicalDbCommand, insertPieceDbCommand, insertProxyDbCommand, insertRefundDbCommand, insertReportingCodeDbCommand, insertRequestDbCommand, insertRequestPolicyDbCommand, insertServicePointDbCommand, insertServicePointUserDbCommand, insertSourceDbCommand, insertStaffSlipDbCommand, insertStatisticalCodeDbCommand, insertStatisticalCodeTypeDbCommand, insertTagDbCommand, insertTransactionDbCommand, insertTransferDbCommand, insertTransferCriteriaDbCommand, insertUrlDbCommand, insertUserDbCommand, insertVendorDbCommand, insertVendorCategoryDbCommand, insertVendorDetailDbCommand, insertVendorTypeDbCommand, insertWaiveDbCommand;
        private DbCommand updateAccountDbCommand, updateAccount2DbCommand, updateAddressDbCommand, updateAddressTypeDbCommand, updateAdjustmentDbCommand, updateAgreementDbCommand, updateAlertDbCommand, updateAliasDbCommand, updateAlternativeTitleTypeDbCommand, updateAuditLoanDbCommand, updateAuthAttemptDbCommand, updateAuthCredentialsHistoryDbCommand, updateAuthPasswordActionDbCommand, updateBlockDbCommand, updateBudgetDbCommand, updateCallNumberTypeDbCommand, updateCampusDbCommand, updateCancellationReasonDbCommand, updateCategoryDbCommand, updateCirculationRuleDbCommand, updateClaimDbCommand, updateClassificationTypeDbCommand, updateCommentDbCommand, updateContactDbCommand, updateContactCategoryDbCommand, updateContributorNameTypeDbCommand, updateContributorTypeDbCommand, updateCostDbCommand, updateDetailDbCommand, updateElectronicAccessRelationshipDbCommand, updateEmailDbCommand, updateEresourceDbCommand, updateEventLogDbCommand, updateFeeDbCommand, updateFeeActionDbCommand, updateFiscalYearDbCommand, updateFixedDueDateScheduleDbCommand, updateFundDbCommand, updateFundDistributionDbCommand, updateFundDistribution2DbCommand, updateGroupDbCommand, updateHoldingDbCommand, updateHoldingNoteTypeDbCommand, updateHoldingTypeDbCommand, updateIdTypeDbCommand, updateIllPolicyDbCommand, updateInstanceDbCommand, updateInstanceFormatDbCommand, updateInstanceRelationshipDbCommand, updateInstanceRelationshipTypeDbCommand, updateInstanceSourceMarcDbCommand, updateInstanceStatusDbCommand, updateInstanceTypeDbCommand, updateInstitutionDbCommand, updateInterfaceDbCommand, updateItemDbCommand, updateItemNoteTypeDbCommand, updateLedgerDbCommand, updateLibraryDbCommand, updateLoanDbCommand, updateLoanPolicyDbCommand, updateLoanTypeDbCommand, updateLocationDbCommand, updateLoginDbCommand, updateMaterialTypeDbCommand, updateModeOfIssuanceDbCommand, updateNoteDbCommand, updateOrderDbCommand, updateOrderItemDbCommand, updateOrderItemLocationDbCommand, updateOwnerDbCommand, updatePatronNoticePolicyDbCommand, updatePaymentDbCommand, updatePermissionDbCommand, updatePermissionsUserDbCommand, updatePhoneNumberDbCommand, updatePhysicalDbCommand, updatePieceDbCommand, updateProxyDbCommand, updateRefundDbCommand, updateReportingCodeDbCommand, updateRequestDbCommand, updateRequestPolicyDbCommand, updateServicePointDbCommand, updateServicePointUserDbCommand, updateSourceDbCommand, updateStaffSlipDbCommand, updateStatisticalCodeDbCommand, updateStatisticalCodeTypeDbCommand, updateTagDbCommand, updateTransactionDbCommand, updateTransferDbCommand, updateTransferCriteriaDbCommand, updateUrlDbCommand, updateUserDbCommand, updateVendorDbCommand, updateVendorCategoryDbCommand, updateVendorDetailDbCommand, updateVendorTypeDbCommand, updateWaiveDbCommand;
        private DbCommand deleteAccountDbCommand, deleteAccount2DbCommand, deleteAddressDbCommand, deleteAddressTypeDbCommand, deleteAdjustmentDbCommand, deleteAgreementDbCommand, deleteAlertDbCommand, deleteAliasDbCommand, deleteAlternativeTitleTypeDbCommand, deleteAuditLoanDbCommand, deleteAuthAttemptDbCommand, deleteAuthCredentialsHistoryDbCommand, deleteAuthPasswordActionDbCommand, deleteBlockDbCommand, deleteBudgetDbCommand, deleteCallNumberTypeDbCommand, deleteCampusDbCommand, deleteCancellationReasonDbCommand, deleteCategoryDbCommand, deleteCirculationRuleDbCommand, deleteClaimDbCommand, deleteClassificationTypeDbCommand, deleteCommentDbCommand, deleteContactDbCommand, deleteContactCategoryDbCommand, deleteContributorNameTypeDbCommand, deleteContributorTypeDbCommand, deleteCostDbCommand, deleteDetailDbCommand, deleteElectronicAccessRelationshipDbCommand, deleteEmailDbCommand, deleteEresourceDbCommand, deleteEventLogDbCommand, deleteFeeDbCommand, deleteFeeActionDbCommand, deleteFiscalYearDbCommand, deleteFixedDueDateScheduleDbCommand, deleteFundDbCommand, deleteFundDistributionDbCommand, deleteFundDistribution2DbCommand, deleteGroupDbCommand, deleteHoldingDbCommand, deleteHoldingNoteTypeDbCommand, deleteHoldingTypeDbCommand, deleteIdTypeDbCommand, deleteIllPolicyDbCommand, deleteInstanceDbCommand, deleteInstanceFormatDbCommand, deleteInstanceRelationshipDbCommand, deleteInstanceRelationshipTypeDbCommand, deleteInstanceSourceMarcDbCommand, deleteInstanceStatusDbCommand, deleteInstanceTypeDbCommand, deleteInstitutionDbCommand, deleteInterfaceDbCommand, deleteItemDbCommand, deleteItemNoteTypeDbCommand, deleteLedgerDbCommand, deleteLibraryDbCommand, deleteLoanDbCommand, deleteLoanPolicyDbCommand, deleteLoanTypeDbCommand, deleteLocationDbCommand, deleteLoginDbCommand, deleteMaterialTypeDbCommand, deleteModeOfIssuanceDbCommand, deleteNoteDbCommand, deleteOrderDbCommand, deleteOrderItemDbCommand, deleteOrderItemLocationDbCommand, deleteOwnerDbCommand, deletePatronNoticePolicyDbCommand, deletePaymentDbCommand, deletePermissionDbCommand, deletePermissionsUserDbCommand, deletePhoneNumberDbCommand, deletePhysicalDbCommand, deletePieceDbCommand, deleteProxyDbCommand, deleteRefundDbCommand, deleteReportingCodeDbCommand, deleteRequestDbCommand, deleteRequestPolicyDbCommand, deleteServicePointDbCommand, deleteServicePointUserDbCommand, deleteSourceDbCommand, deleteStaffSlipDbCommand, deleteStatisticalCodeDbCommand, deleteStatisticalCodeTypeDbCommand, deleteTagDbCommand, deleteTransactionDbCommand, deleteTransferDbCommand, deleteTransferCriteriaDbCommand, deleteUrlDbCommand, deleteUserDbCommand, deleteVendorDbCommand, deleteVendorCategoryDbCommand, deleteVendorDetailDbCommand, deleteVendorTypeDbCommand, deleteWaiveDbCommand;

        public bool AddDatabaseIfNecessary()
        {
            using (var dc = DbProviderFactories.GetFactory(IsMySql ? "MySql.Data.MySqlClient2" : providerName).CreateConnection())
            using (var dc2 = dc.CreateCommand())
            {
                dc.ConnectionString = Regex.Replace(connectionString, @"(?i);?Database=\w+", "");
                dc.Open();
                dc2.CommandText = IsMySql ? $"SHOW DATABASES LIKE '{databaseName}'" : IsPostgreSql ? $"SELECT 1 FROM pg_database WHERE datname = '{databaseName}'" : $"SELECT 1 FROM sys.databases WHERE name = '{databaseName}'";
                traceSource.TraceEvent(TraceEventType.Verbose, 0, dc2.CommandText);
                if (dc2.ExecuteScalar() == null)
                {
                    dc2.CommandText = $"CREATE DATABASE {databaseName}{(IsSqlServer ? $"; ALTER DATABASE {databaseName} SET RECOVERY SIMPLE; ALTER DATABASE {databaseName} SET ALLOW_SNAPSHOT_ISOLATION ON; ALTER DATABASE {databaseName} SET READ_COMMITTED_SNAPSHOT ON" : "")}";
                    traceSource.TraceEvent(TraceEventType.Verbose, 0, dc2.CommandText);
                    dc2.ExecuteNonQuery();
                    AddSchemas();
                    AddUsers();
                    AddTables();
                    if (IsMySql) DisableConstraints();
                    AddConstraints();
                    if (IsMySql) EnableConstraints();
                    AddIndexes();
                    return true;
                }
            }
            return false;
        }

        public bool RemoveDatabaseIfNecessary()
        {
            using (var dc = DbProviderFactories.GetFactory(IsMySql ? "MySql.Data.MySqlClient2" : providerName).CreateConnection())
            using (var dc2 = dc.CreateCommand())
            {
                dc.ConnectionString = Regex.Replace(connectionString, @"(?i);?Database=\w+", "");
                dc.Open();
                dc2.CommandText = IsMySql ? $"SHOW DATABASES LIKE '{databaseName}'" : IsPostgreSql ? $"SELECT 1 FROM pg_database WHERE datname = '{databaseName}'" : $"SELECT 1 FROM sys.databases WHERE name = '{databaseName}'";
                if (IsMySql) dc2.CommandTimeout = 2 * 60;
                traceSource.TraceEvent(TraceEventType.Verbose, 0, dc2.CommandText);
                if (dc2.ExecuteScalar() != null)
                {
                    dc2.CommandText = $"{(IsMySql ? "" : IsPostgreSql ? $"REVOKE CONNECT ON DATABASE {databaseName} FROM PUBLIC; SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE datname = '{databaseName}'; " : $"ALTER DATABASE {databaseName} SET SINGLE_USER WITH ROLLBACK IMMEDIATE; ")}DROP DATABASE {databaseName}";
                    traceSource.TraceEvent(TraceEventType.Verbose, 0, dc2.CommandText);
                    dc2.ExecuteNonQuery();
                    return true;
                }
            }
            return false;
        }

        public void AddSchemas()
        {
            if (IsPostgreSql || IsSqlServer)
            {
                ExecuteNonQuery("CREATE SCHEMA diku_mod_feesfines");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_vendors");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_users");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_orders_storage");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_inventory_storage");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_circulation_storage");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_login");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_finance_storage");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_notes");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_permissions");
                ExecuteNonQuery("CREATE SCHEMA diku_mod_tags");
            }
        }

        public void RemoveSchemas()
        {
            if (IsPostgreSql || IsSqlServer)
            {
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_feesfines");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_vendors");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_users");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_orders_storage");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_inventory_storage");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_circulation_storage");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_login");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_finance_storage");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_notes");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_permissions");
                ExecuteNonQuery("DROP SCHEMA IF EXISTS diku_mod_tags");
            }
        }

        public void AddUsers()
        {
            if (IsMySql)
            {
                ExecuteNonQuery($"CREATE USER IF NOT EXISTS 'Folio'@'localhost' IDENTIFIED BY 'changeit' PASSWORD EXPIRE NEVER; GRANT SELECT, INSERT, UPDATE, DELETE ON {databaseName}.* TO 'Folio'@'localhost'");
            }
            else if (IsPostgreSql)
            {
                if (ExecuteScalar("SELECT 1 FROM pg_roles WHERE rolname = 'folio'") == null) ExecuteNonQuery("CREATE USER folio PASSWORD 'changeit'");
                ExecuteNonQuery("GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO folio");
            }
            else if (IsSqlServer)
            {
                if (ExecuteScalar("SELECT 1 FROM sys.syslogins WHERE name = 'Folio'") == null) ExecuteNonQuery("CREATE LOGIN Folio WITH PASSWORD = 'changeit'; ALTER LOGIN Folio DISABLE");
                ExecuteNonQuery($@"USE {databaseName}; CREATE USER [IIS APPPOOL\DefaultAppPool] FOR LOGIN [IIS APPPOOL\DefaultAppPool] WITH DEFAULT_SCHEMA=dbo; ALTER ROLE db_owner ADD MEMBER [IIS APPPOOL\DefaultAppPool]; CREATE USER Folio FOR LOGIN Folio WITH DEFAULT_SCHEMA=dbo; ALTER ROLE db_owner ADD MEMBER Folio");
            }
        }

        private bool ConnectIfNecessary()
        {
            if (dbConnection == null || dbConnection.State != ConnectionState.Open)
            {
                dbConnection = DbProviderFactories.GetFactory(IsMySql ? "MySql.Data.MySqlClient2" : providerName).CreateConnection();
                dbConnection.ConnectionString = connectionString;
                dbConnection.Open();
                dbTransaction = dbConnection.BeginTransaction(IsolationLevel.ReadCommitted);
                return true;
            }
            return false;
        }

        public void SetCommandTimeout(int? timeout) => Database.SetCommandTimeout(timeout);

        public void ExecuteNonQuery(string commandText, int? commandTimeout = null)
        {
            ConnectIfNecessary();
            using (var dc = dbConnection.CreateCommand())
            {
                if (commandTimeout != null) dc.CommandTimeout = commandTimeout.Value;
                dc.CommandText = commandText;
                dc.Transaction = dbTransaction;
                traceSource.TraceEvent(TraceEventType.Verbose, 0, commandText);
                dc.ExecuteNonQuery();
                Commit();
            }
        }

        public object ExecuteScalar(string commandText)
        {
            ConnectIfNecessary();
            using (var dc = dbConnection.CreateCommand())
            {
                dc.CommandText = commandText;
                dc.Transaction = dbTransaction;
                traceSource.TraceEvent(TraceEventType.Verbose, 0, commandText);
                var o = dc.ExecuteScalar();
                Commit();
                return o;
            }
        }

        public int GetId()
        {
            if (getIdDbCommand == null)
            {
                getIdDbCommand = dbConnection.CreateCommand();
                getIdDbCommand.CommandText = $"SELECT {(IsSqlServer ? "CONVERT(INT, SCOPE_IDENTITY())" : IsMySql ? "CONVERT(LAST_INSERT_ID(), SIGNED INTEGER)" : "LASTVAL()")} AS Id";
                getIdDbCommand.Transaction = dbTransaction;
                getIdDbCommand.Prepare();
            }
            getIdDbCommand.Transaction = dbTransaction;
            using (var dr = getIdDbCommand.ExecuteReader())
            {
                dr.Read();
                return dr.GetInt32(0);
            }
        }

        public void DisableConstraints()
        {
            if (IsSqlServer) ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage.budget NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.loccampus NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_feesfines.feefines NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_finance_storage.fund NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_finance_storage.fund_distribution NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.holdings_record NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.instance NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.instance_relationship NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.instance_source_marc NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.item NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.loclibrary NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_circulation_storage.loan_policy NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.location NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_circulation_storage.request NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.service_point_user NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.statistical_code NOCHECK CONSTRAINT ALL; ALTER TABLE diku_mod_finance_storage.transaction NOCHECK CONSTRAINT ALL");
            else if (IsMySql) ExecuteNonQuery("SET FOREIGN_KEY_CHECKS = 0");
            else if (IsPostgreSql) ExecuteNonQuery("SET SESSION session_replication_role = replica");
            else throw new NotImplementedException();
        }

        public void EnableConstraints()
        {
            if (IsSqlServer) ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage.budget WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.loccampus WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_feesfines.feefines WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_finance_storage.fund WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_finance_storage.fund_distribution WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.holdings_record WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.instance WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.instance_relationship WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.instance_source_marc WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.item WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.loclibrary WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_circulation_storage.loan_policy WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.location WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_circulation_storage.request WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.service_point_user WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_inventory_storage.statistical_code WITH CHECK CHECK CONSTRAINT ALL; ALTER TABLE diku_mod_finance_storage.transaction WITH CHECK CHECK CONSTRAINT ALL");
            else if (IsMySql) ExecuteNonQuery("SET FOREIGN_KEY_CHECKS = 1");
            else if (IsPostgreSql) ExecuteNonQuery("SET SESSION session_replication_role = DEFAULT");
            else throw new NotImplementedException();
        }

        public DateTime GetDateTime() => (DateTime)ExecuteScalar("SELECT CURRENT_TIMESTAMP");

        private string Quote(string identifier)
        {
            //if (IsPostgreSql && identifier.Any(c => char.IsUpper(c))) return $"\"{identifier}\"";
            if (IsMySql && sqlKeywords.Contains(identifier, StringComparer.InvariantCultureIgnoreCase)) return $"`{identifier}`";
            return identifier;
        }

        private static string[] sqlKeywords = new[] { "add", "as", "both", "default", "do", "for", "from", "if", "in", "is", "left", "on", "or", "to" };

        public void Insert(Account account)
        {
            if (account.Id == null) account.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAccountDbCommand == null)
            {
                insertAccountDbCommand = dbConnection.CreateCommand();
                insertAccountDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAccountDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAccountDbCommand.Parameters.Add(dp);
                dp = insertAccountDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAccountDbCommand.Parameters.Add(dp);
                dp = insertAccountDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAccountDbCommand.Parameters.Add(dp);
                dp = insertAccountDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAccountDbCommand.Parameters.Add(dp);
                insertAccountDbCommand.Transaction = dbTransaction;
                insertAccountDbCommand.Prepare();
            }
            insertAccountDbCommand.Transaction = dbTransaction;
            insertAccountDbCommand.Parameters[0].Value = (object)account.Id ?? DBNull.Value;
            insertAccountDbCommand.Parameters[1].Value = (object)account.Content ?? DBNull.Value;
            insertAccountDbCommand.Parameters[2].Value = (object)account.CreationTime ?? DBNull.Value;
            insertAccountDbCommand.Parameters[3].Value = (object)account.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAccountDbCommand.CommandText}\r\n-- Id: {account.Id}\r\n-- Content: {account.Content}\r\n-- CreationTime: {account.CreationTime}\r\n-- CreationUserId: {account.CreationUserId}");
            insertAccountDbCommand.ExecuteNonQuery();
        }

        public void Update(Account account)
        {
            if (ConnectIfNecessary() || updateAccountDbCommand == null)
            {
                updateAccountDbCommand = dbConnection.CreateCommand();
                updateAccountDbCommand.Transaction = dbTransaction;
                updateAccountDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAccountDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAccountDbCommand.Parameters.Add(dp);
                dp = updateAccountDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAccountDbCommand.Parameters.Add(dp);
                dp = updateAccountDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAccountDbCommand.Parameters.Add(dp);
                dp = updateAccountDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAccountDbCommand.Parameters.Add(dp);
                updateAccountDbCommand.Prepare();
            }
            updateAccountDbCommand.Transaction = dbTransaction;
            updateAccountDbCommand.Parameters[0].Value = (object)account.Content ?? DBNull.Value;
            updateAccountDbCommand.Parameters[1].Value = (object)account.CreationTime ?? DBNull.Value;
            updateAccountDbCommand.Parameters[2].Value = (object)account.CreationUserId ?? DBNull.Value;
            updateAccountDbCommand.Parameters[3].Value = account.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAccountDbCommand.CommandText}\r\n-- Content: {account.Content}\r\n-- CreationTime: {account.CreationTime}\r\n-- CreationUserId: {account.CreationUserId}\r\n-- Id: {account.Id}");
            updateAccountDbCommand.ExecuteNonQuery();
        }

        public void Delete(Account account)
        {
            if (ConnectIfNecessary() || deleteAccountDbCommand == null)
            {
                deleteAccountDbCommand = dbConnection.CreateCommand();
                deleteAccountDbCommand.Transaction = dbTransaction;
                deleteAccountDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")} WHERE {Quote("id")} = @Id";
                var dp = deleteAccountDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAccountDbCommand.Parameters.Add(dp);
                deleteAccountDbCommand.Prepare();
            }
            deleteAccountDbCommand.Transaction = dbTransaction;
            deleteAccountDbCommand.Parameters[0].Value = account.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAccountDbCommand.CommandText}\r\n-- Id: {account.Id}");
            deleteAccountDbCommand.ExecuteNonQuery();
        }

        public void Insert(Account2 account2)
        {
            if (account2.Id == null) account2.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAccount2DbCommand == null)
            {
                insertAccount2DbCommand = dbConnection.CreateCommand();
                insertAccount2DbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAccount2DbCommand.Parameters.Add(dp);
                dp = insertAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAccount2DbCommand.Parameters.Add(dp);
                dp = insertAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAccount2DbCommand.Parameters.Add(dp);
                dp = insertAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAccount2DbCommand.Parameters.Add(dp);
                insertAccount2DbCommand.Transaction = dbTransaction;
                insertAccount2DbCommand.Prepare();
            }
            insertAccount2DbCommand.Transaction = dbTransaction;
            insertAccount2DbCommand.Parameters[0].Value = (object)account2.Id ?? DBNull.Value;
            insertAccount2DbCommand.Parameters[1].Value = (object)account2.Content ?? DBNull.Value;
            insertAccount2DbCommand.Parameters[2].Value = (object)account2.CreationTime ?? DBNull.Value;
            insertAccount2DbCommand.Parameters[3].Value = (object)account2.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAccount2DbCommand.CommandText}\r\n-- Id: {account2.Id}\r\n-- Content: {account2.Content}\r\n-- CreationTime: {account2.CreationTime}\r\n-- CreationUserId: {account2.CreationUserId}");
            insertAccount2DbCommand.ExecuteNonQuery();
        }

        public void Update(Account2 account2)
        {
            if (ConnectIfNecessary() || updateAccount2DbCommand == null)
            {
                updateAccount2DbCommand = dbConnection.CreateCommand();
                updateAccount2DbCommand.Transaction = dbTransaction;
                updateAccount2DbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAccount2DbCommand.Parameters.Add(dp);
                dp = updateAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAccount2DbCommand.Parameters.Add(dp);
                dp = updateAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAccount2DbCommand.Parameters.Add(dp);
                dp = updateAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAccount2DbCommand.Parameters.Add(dp);
                updateAccount2DbCommand.Prepare();
            }
            updateAccount2DbCommand.Transaction = dbTransaction;
            updateAccount2DbCommand.Parameters[0].Value = (object)account2.Content ?? DBNull.Value;
            updateAccount2DbCommand.Parameters[1].Value = (object)account2.CreationTime ?? DBNull.Value;
            updateAccount2DbCommand.Parameters[2].Value = (object)account2.CreationUserId ?? DBNull.Value;
            updateAccount2DbCommand.Parameters[3].Value = account2.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAccount2DbCommand.CommandText}\r\n-- Content: {account2.Content}\r\n-- CreationTime: {account2.CreationTime}\r\n-- CreationUserId: {account2.CreationUserId}\r\n-- Id: {account2.Id}");
            updateAccount2DbCommand.ExecuteNonQuery();
        }

        public void Delete(Account2 account2)
        {
            if (ConnectIfNecessary() || deleteAccount2DbCommand == null)
            {
                deleteAccount2DbCommand = dbConnection.CreateCommand();
                deleteAccount2DbCommand.Transaction = dbTransaction;
                deleteAccount2DbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")} WHERE {Quote("id")} = @Id";
                var dp = deleteAccount2DbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAccount2DbCommand.Parameters.Add(dp);
                deleteAccount2DbCommand.Prepare();
            }
            deleteAccount2DbCommand.Transaction = dbTransaction;
            deleteAccount2DbCommand.Parameters[0].Value = account2.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAccount2DbCommand.CommandText}\r\n-- Id: {account2.Id}");
            deleteAccount2DbCommand.ExecuteNonQuery();
        }

        public void Insert(Address address)
        {
            if (address.Id == null) address.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAddressDbCommand == null)
            {
                insertAddressDbCommand = dbConnection.CreateCommand();
                insertAddressDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAddressDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAddressDbCommand.Parameters.Add(dp);
                dp = insertAddressDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAddressDbCommand.Parameters.Add(dp);
                dp = insertAddressDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAddressDbCommand.Parameters.Add(dp);
                dp = insertAddressDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAddressDbCommand.Parameters.Add(dp);
                insertAddressDbCommand.Transaction = dbTransaction;
                insertAddressDbCommand.Prepare();
            }
            insertAddressDbCommand.Transaction = dbTransaction;
            insertAddressDbCommand.Parameters[0].Value = (object)address.Id ?? DBNull.Value;
            insertAddressDbCommand.Parameters[1].Value = (object)address.Content ?? DBNull.Value;
            insertAddressDbCommand.Parameters[2].Value = (object)address.CreationTime ?? DBNull.Value;
            insertAddressDbCommand.Parameters[3].Value = (object)address.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAddressDbCommand.CommandText}\r\n-- Id: {address.Id}\r\n-- Content: {address.Content}\r\n-- CreationTime: {address.CreationTime}\r\n-- CreationUserId: {address.CreationUserId}");
            insertAddressDbCommand.ExecuteNonQuery();
        }

        public void Update(Address address)
        {
            if (ConnectIfNecessary() || updateAddressDbCommand == null)
            {
                updateAddressDbCommand = dbConnection.CreateCommand();
                updateAddressDbCommand.Transaction = dbTransaction;
                updateAddressDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAddressDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAddressDbCommand.Parameters.Add(dp);
                dp = updateAddressDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAddressDbCommand.Parameters.Add(dp);
                dp = updateAddressDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAddressDbCommand.Parameters.Add(dp);
                dp = updateAddressDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAddressDbCommand.Parameters.Add(dp);
                updateAddressDbCommand.Prepare();
            }
            updateAddressDbCommand.Transaction = dbTransaction;
            updateAddressDbCommand.Parameters[0].Value = (object)address.Content ?? DBNull.Value;
            updateAddressDbCommand.Parameters[1].Value = (object)address.CreationTime ?? DBNull.Value;
            updateAddressDbCommand.Parameters[2].Value = (object)address.CreationUserId ?? DBNull.Value;
            updateAddressDbCommand.Parameters[3].Value = address.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAddressDbCommand.CommandText}\r\n-- Content: {address.Content}\r\n-- CreationTime: {address.CreationTime}\r\n-- CreationUserId: {address.CreationUserId}\r\n-- Id: {address.Id}");
            updateAddressDbCommand.ExecuteNonQuery();
        }

        public void Delete(Address address)
        {
            if (ConnectIfNecessary() || deleteAddressDbCommand == null)
            {
                deleteAddressDbCommand = dbConnection.CreateCommand();
                deleteAddressDbCommand.Transaction = dbTransaction;
                deleteAddressDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")} WHERE {Quote("id")} = @Id";
                var dp = deleteAddressDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAddressDbCommand.Parameters.Add(dp);
                deleteAddressDbCommand.Prepare();
            }
            deleteAddressDbCommand.Transaction = dbTransaction;
            deleteAddressDbCommand.Parameters[0].Value = address.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAddressDbCommand.CommandText}\r\n-- Id: {address.Id}");
            deleteAddressDbCommand.ExecuteNonQuery();
        }

        public void Insert(AddressType addressType)
        {
            if (addressType.Id == null) addressType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAddressTypeDbCommand == null)
            {
                insertAddressTypeDbCommand = dbConnection.CreateCommand();
                insertAddressTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAddressTypeDbCommand.Parameters.Add(dp);
                dp = insertAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAddressTypeDbCommand.Parameters.Add(dp);
                dp = insertAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAddressTypeDbCommand.Parameters.Add(dp);
                dp = insertAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAddressTypeDbCommand.Parameters.Add(dp);
                insertAddressTypeDbCommand.Transaction = dbTransaction;
                insertAddressTypeDbCommand.Prepare();
            }
            insertAddressTypeDbCommand.Transaction = dbTransaction;
            insertAddressTypeDbCommand.Parameters[0].Value = (object)addressType.Id ?? DBNull.Value;
            insertAddressTypeDbCommand.Parameters[1].Value = (object)addressType.Content ?? DBNull.Value;
            insertAddressTypeDbCommand.Parameters[2].Value = (object)addressType.CreationTime ?? DBNull.Value;
            insertAddressTypeDbCommand.Parameters[3].Value = (object)addressType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAddressTypeDbCommand.CommandText}\r\n-- Id: {addressType.Id}\r\n-- Content: {addressType.Content}\r\n-- CreationTime: {addressType.CreationTime}\r\n-- CreationUserId: {addressType.CreationUserId}");
            insertAddressTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(AddressType addressType)
        {
            if (ConnectIfNecessary() || updateAddressTypeDbCommand == null)
            {
                updateAddressTypeDbCommand = dbConnection.CreateCommand();
                updateAddressTypeDbCommand.Transaction = dbTransaction;
                updateAddressTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAddressTypeDbCommand.Parameters.Add(dp);
                dp = updateAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAddressTypeDbCommand.Parameters.Add(dp);
                dp = updateAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAddressTypeDbCommand.Parameters.Add(dp);
                dp = updateAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAddressTypeDbCommand.Parameters.Add(dp);
                updateAddressTypeDbCommand.Prepare();
            }
            updateAddressTypeDbCommand.Transaction = dbTransaction;
            updateAddressTypeDbCommand.Parameters[0].Value = (object)addressType.Content ?? DBNull.Value;
            updateAddressTypeDbCommand.Parameters[1].Value = (object)addressType.CreationTime ?? DBNull.Value;
            updateAddressTypeDbCommand.Parameters[2].Value = (object)addressType.CreationUserId ?? DBNull.Value;
            updateAddressTypeDbCommand.Parameters[3].Value = addressType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAddressTypeDbCommand.CommandText}\r\n-- Content: {addressType.Content}\r\n-- CreationTime: {addressType.CreationTime}\r\n-- CreationUserId: {addressType.CreationUserId}\r\n-- Id: {addressType.Id}");
            updateAddressTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(AddressType addressType)
        {
            if (ConnectIfNecessary() || deleteAddressTypeDbCommand == null)
            {
                deleteAddressTypeDbCommand = dbConnection.CreateCommand();
                deleteAddressTypeDbCommand.Transaction = dbTransaction;
                deleteAddressTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")} WHERE {Quote("id")} = @Id";
                var dp = deleteAddressTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAddressTypeDbCommand.Parameters.Add(dp);
                deleteAddressTypeDbCommand.Prepare();
            }
            deleteAddressTypeDbCommand.Transaction = dbTransaction;
            deleteAddressTypeDbCommand.Parameters[0].Value = addressType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAddressTypeDbCommand.CommandText}\r\n-- Id: {addressType.Id}");
            deleteAddressTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Adjustment adjustment)
        {
            if (adjustment.Id == null) adjustment.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAdjustmentDbCommand == null)
            {
                insertAdjustmentDbCommand = dbConnection.CreateCommand();
                insertAdjustmentDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAdjustmentDbCommand.Parameters.Add(dp);
                dp = insertAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAdjustmentDbCommand.Parameters.Add(dp);
                dp = insertAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAdjustmentDbCommand.Parameters.Add(dp);
                dp = insertAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAdjustmentDbCommand.Parameters.Add(dp);
                insertAdjustmentDbCommand.Transaction = dbTransaction;
                insertAdjustmentDbCommand.Prepare();
            }
            insertAdjustmentDbCommand.Transaction = dbTransaction;
            insertAdjustmentDbCommand.Parameters[0].Value = (object)adjustment.Id ?? DBNull.Value;
            insertAdjustmentDbCommand.Parameters[1].Value = (object)adjustment.Content ?? DBNull.Value;
            insertAdjustmentDbCommand.Parameters[2].Value = (object)adjustment.CreationTime ?? DBNull.Value;
            insertAdjustmentDbCommand.Parameters[3].Value = (object)adjustment.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAdjustmentDbCommand.CommandText}\r\n-- Id: {adjustment.Id}\r\n-- Content: {adjustment.Content}\r\n-- CreationTime: {adjustment.CreationTime}\r\n-- CreationUserId: {adjustment.CreationUserId}");
            insertAdjustmentDbCommand.ExecuteNonQuery();
        }

        public void Update(Adjustment adjustment)
        {
            if (ConnectIfNecessary() || updateAdjustmentDbCommand == null)
            {
                updateAdjustmentDbCommand = dbConnection.CreateCommand();
                updateAdjustmentDbCommand.Transaction = dbTransaction;
                updateAdjustmentDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAdjustmentDbCommand.Parameters.Add(dp);
                dp = updateAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAdjustmentDbCommand.Parameters.Add(dp);
                dp = updateAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAdjustmentDbCommand.Parameters.Add(dp);
                dp = updateAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAdjustmentDbCommand.Parameters.Add(dp);
                updateAdjustmentDbCommand.Prepare();
            }
            updateAdjustmentDbCommand.Transaction = dbTransaction;
            updateAdjustmentDbCommand.Parameters[0].Value = (object)adjustment.Content ?? DBNull.Value;
            updateAdjustmentDbCommand.Parameters[1].Value = (object)adjustment.CreationTime ?? DBNull.Value;
            updateAdjustmentDbCommand.Parameters[2].Value = (object)adjustment.CreationUserId ?? DBNull.Value;
            updateAdjustmentDbCommand.Parameters[3].Value = adjustment.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAdjustmentDbCommand.CommandText}\r\n-- Content: {adjustment.Content}\r\n-- CreationTime: {adjustment.CreationTime}\r\n-- CreationUserId: {adjustment.CreationUserId}\r\n-- Id: {adjustment.Id}");
            updateAdjustmentDbCommand.ExecuteNonQuery();
        }

        public void Delete(Adjustment adjustment)
        {
            if (ConnectIfNecessary() || deleteAdjustmentDbCommand == null)
            {
                deleteAdjustmentDbCommand = dbConnection.CreateCommand();
                deleteAdjustmentDbCommand.Transaction = dbTransaction;
                deleteAdjustmentDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")} WHERE {Quote("id")} = @Id";
                var dp = deleteAdjustmentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAdjustmentDbCommand.Parameters.Add(dp);
                deleteAdjustmentDbCommand.Prepare();
            }
            deleteAdjustmentDbCommand.Transaction = dbTransaction;
            deleteAdjustmentDbCommand.Parameters[0].Value = adjustment.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAdjustmentDbCommand.CommandText}\r\n-- Id: {adjustment.Id}");
            deleteAdjustmentDbCommand.ExecuteNonQuery();
        }

        public void Insert(Agreement agreement)
        {
            if (agreement.Id == null) agreement.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAgreementDbCommand == null)
            {
                insertAgreementDbCommand = dbConnection.CreateCommand();
                insertAgreementDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAgreementDbCommand.Parameters.Add(dp);
                dp = insertAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAgreementDbCommand.Parameters.Add(dp);
                dp = insertAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAgreementDbCommand.Parameters.Add(dp);
                dp = insertAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAgreementDbCommand.Parameters.Add(dp);
                insertAgreementDbCommand.Transaction = dbTransaction;
                insertAgreementDbCommand.Prepare();
            }
            insertAgreementDbCommand.Transaction = dbTransaction;
            insertAgreementDbCommand.Parameters[0].Value = (object)agreement.Id ?? DBNull.Value;
            insertAgreementDbCommand.Parameters[1].Value = (object)agreement.Content ?? DBNull.Value;
            insertAgreementDbCommand.Parameters[2].Value = (object)agreement.CreationTime ?? DBNull.Value;
            insertAgreementDbCommand.Parameters[3].Value = (object)agreement.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAgreementDbCommand.CommandText}\r\n-- Id: {agreement.Id}\r\n-- Content: {agreement.Content}\r\n-- CreationTime: {agreement.CreationTime}\r\n-- CreationUserId: {agreement.CreationUserId}");
            insertAgreementDbCommand.ExecuteNonQuery();
        }

        public void Update(Agreement agreement)
        {
            if (ConnectIfNecessary() || updateAgreementDbCommand == null)
            {
                updateAgreementDbCommand = dbConnection.CreateCommand();
                updateAgreementDbCommand.Transaction = dbTransaction;
                updateAgreementDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAgreementDbCommand.Parameters.Add(dp);
                dp = updateAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAgreementDbCommand.Parameters.Add(dp);
                dp = updateAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAgreementDbCommand.Parameters.Add(dp);
                dp = updateAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAgreementDbCommand.Parameters.Add(dp);
                updateAgreementDbCommand.Prepare();
            }
            updateAgreementDbCommand.Transaction = dbTransaction;
            updateAgreementDbCommand.Parameters[0].Value = (object)agreement.Content ?? DBNull.Value;
            updateAgreementDbCommand.Parameters[1].Value = (object)agreement.CreationTime ?? DBNull.Value;
            updateAgreementDbCommand.Parameters[2].Value = (object)agreement.CreationUserId ?? DBNull.Value;
            updateAgreementDbCommand.Parameters[3].Value = agreement.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAgreementDbCommand.CommandText}\r\n-- Content: {agreement.Content}\r\n-- CreationTime: {agreement.CreationTime}\r\n-- CreationUserId: {agreement.CreationUserId}\r\n-- Id: {agreement.Id}");
            updateAgreementDbCommand.ExecuteNonQuery();
        }

        public void Delete(Agreement agreement)
        {
            if (ConnectIfNecessary() || deleteAgreementDbCommand == null)
            {
                deleteAgreementDbCommand = dbConnection.CreateCommand();
                deleteAgreementDbCommand.Transaction = dbTransaction;
                deleteAgreementDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")} WHERE {Quote("id")} = @Id";
                var dp = deleteAgreementDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAgreementDbCommand.Parameters.Add(dp);
                deleteAgreementDbCommand.Prepare();
            }
            deleteAgreementDbCommand.Transaction = dbTransaction;
            deleteAgreementDbCommand.Parameters[0].Value = agreement.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAgreementDbCommand.CommandText}\r\n-- Id: {agreement.Id}");
            deleteAgreementDbCommand.ExecuteNonQuery();
        }

        public void Insert(Alert alert)
        {
            if (alert.Id == null) alert.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAlertDbCommand == null)
            {
                insertAlertDbCommand = dbConnection.CreateCommand();
                insertAlertDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAlertDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAlertDbCommand.Parameters.Add(dp);
                dp = insertAlertDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAlertDbCommand.Parameters.Add(dp);
                dp = insertAlertDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAlertDbCommand.Parameters.Add(dp);
                dp = insertAlertDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAlertDbCommand.Parameters.Add(dp);
                insertAlertDbCommand.Transaction = dbTransaction;
                insertAlertDbCommand.Prepare();
            }
            insertAlertDbCommand.Transaction = dbTransaction;
            insertAlertDbCommand.Parameters[0].Value = (object)alert.Id ?? DBNull.Value;
            insertAlertDbCommand.Parameters[1].Value = (object)alert.Content ?? DBNull.Value;
            insertAlertDbCommand.Parameters[2].Value = (object)alert.CreationTime ?? DBNull.Value;
            insertAlertDbCommand.Parameters[3].Value = (object)alert.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAlertDbCommand.CommandText}\r\n-- Id: {alert.Id}\r\n-- Content: {alert.Content}\r\n-- CreationTime: {alert.CreationTime}\r\n-- CreationUserId: {alert.CreationUserId}");
            insertAlertDbCommand.ExecuteNonQuery();
        }

        public void Update(Alert alert)
        {
            if (ConnectIfNecessary() || updateAlertDbCommand == null)
            {
                updateAlertDbCommand = dbConnection.CreateCommand();
                updateAlertDbCommand.Transaction = dbTransaction;
                updateAlertDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAlertDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAlertDbCommand.Parameters.Add(dp);
                dp = updateAlertDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAlertDbCommand.Parameters.Add(dp);
                dp = updateAlertDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAlertDbCommand.Parameters.Add(dp);
                dp = updateAlertDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAlertDbCommand.Parameters.Add(dp);
                updateAlertDbCommand.Prepare();
            }
            updateAlertDbCommand.Transaction = dbTransaction;
            updateAlertDbCommand.Parameters[0].Value = (object)alert.Content ?? DBNull.Value;
            updateAlertDbCommand.Parameters[1].Value = (object)alert.CreationTime ?? DBNull.Value;
            updateAlertDbCommand.Parameters[2].Value = (object)alert.CreationUserId ?? DBNull.Value;
            updateAlertDbCommand.Parameters[3].Value = alert.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAlertDbCommand.CommandText}\r\n-- Content: {alert.Content}\r\n-- CreationTime: {alert.CreationTime}\r\n-- CreationUserId: {alert.CreationUserId}\r\n-- Id: {alert.Id}");
            updateAlertDbCommand.ExecuteNonQuery();
        }

        public void Delete(Alert alert)
        {
            if (ConnectIfNecessary() || deleteAlertDbCommand == null)
            {
                deleteAlertDbCommand = dbConnection.CreateCommand();
                deleteAlertDbCommand.Transaction = dbTransaction;
                deleteAlertDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")} WHERE {Quote("id")} = @Id";
                var dp = deleteAlertDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAlertDbCommand.Parameters.Add(dp);
                deleteAlertDbCommand.Prepare();
            }
            deleteAlertDbCommand.Transaction = dbTransaction;
            deleteAlertDbCommand.Parameters[0].Value = alert.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAlertDbCommand.CommandText}\r\n-- Id: {alert.Id}");
            deleteAlertDbCommand.ExecuteNonQuery();
        }

        public void Insert(Alias alias)
        {
            if (alias.Id == null) alias.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAliasDbCommand == null)
            {
                insertAliasDbCommand = dbConnection.CreateCommand();
                insertAliasDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAliasDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAliasDbCommand.Parameters.Add(dp);
                dp = insertAliasDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAliasDbCommand.Parameters.Add(dp);
                dp = insertAliasDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAliasDbCommand.Parameters.Add(dp);
                dp = insertAliasDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAliasDbCommand.Parameters.Add(dp);
                insertAliasDbCommand.Transaction = dbTransaction;
                insertAliasDbCommand.Prepare();
            }
            insertAliasDbCommand.Transaction = dbTransaction;
            insertAliasDbCommand.Parameters[0].Value = (object)alias.Id ?? DBNull.Value;
            insertAliasDbCommand.Parameters[1].Value = (object)alias.Content ?? DBNull.Value;
            insertAliasDbCommand.Parameters[2].Value = (object)alias.CreationTime ?? DBNull.Value;
            insertAliasDbCommand.Parameters[3].Value = (object)alias.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAliasDbCommand.CommandText}\r\n-- Id: {alias.Id}\r\n-- Content: {alias.Content}\r\n-- CreationTime: {alias.CreationTime}\r\n-- CreationUserId: {alias.CreationUserId}");
            insertAliasDbCommand.ExecuteNonQuery();
        }

        public void Update(Alias alias)
        {
            if (ConnectIfNecessary() || updateAliasDbCommand == null)
            {
                updateAliasDbCommand = dbConnection.CreateCommand();
                updateAliasDbCommand.Transaction = dbTransaction;
                updateAliasDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateAliasDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAliasDbCommand.Parameters.Add(dp);
                dp = updateAliasDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAliasDbCommand.Parameters.Add(dp);
                dp = updateAliasDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAliasDbCommand.Parameters.Add(dp);
                dp = updateAliasDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAliasDbCommand.Parameters.Add(dp);
                updateAliasDbCommand.Prepare();
            }
            updateAliasDbCommand.Transaction = dbTransaction;
            updateAliasDbCommand.Parameters[0].Value = (object)alias.Content ?? DBNull.Value;
            updateAliasDbCommand.Parameters[1].Value = (object)alias.CreationTime ?? DBNull.Value;
            updateAliasDbCommand.Parameters[2].Value = (object)alias.CreationUserId ?? DBNull.Value;
            updateAliasDbCommand.Parameters[3].Value = alias.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAliasDbCommand.CommandText}\r\n-- Content: {alias.Content}\r\n-- CreationTime: {alias.CreationTime}\r\n-- CreationUserId: {alias.CreationUserId}\r\n-- Id: {alias.Id}");
            updateAliasDbCommand.ExecuteNonQuery();
        }

        public void Delete(Alias alias)
        {
            if (ConnectIfNecessary() || deleteAliasDbCommand == null)
            {
                deleteAliasDbCommand = dbConnection.CreateCommand();
                deleteAliasDbCommand.Transaction = dbTransaction;
                deleteAliasDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")} WHERE {Quote("id")} = @Id";
                var dp = deleteAliasDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAliasDbCommand.Parameters.Add(dp);
                deleteAliasDbCommand.Prepare();
            }
            deleteAliasDbCommand.Transaction = dbTransaction;
            deleteAliasDbCommand.Parameters[0].Value = alias.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAliasDbCommand.CommandText}\r\n-- Id: {alias.Id}");
            deleteAliasDbCommand.ExecuteNonQuery();
        }

        public void Insert(AlternativeTitleType alternativeTitleType)
        {
            if (alternativeTitleType.Id == null) alternativeTitleType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAlternativeTitleTypeDbCommand == null)
            {
                insertAlternativeTitleTypeDbCommand = dbConnection.CreateCommand();
                insertAlternativeTitleTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                dp = insertAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                dp = insertAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                dp = insertAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                insertAlternativeTitleTypeDbCommand.Transaction = dbTransaction;
                insertAlternativeTitleTypeDbCommand.Prepare();
            }
            insertAlternativeTitleTypeDbCommand.Transaction = dbTransaction;
            insertAlternativeTitleTypeDbCommand.Parameters[0].Value = (object)alternativeTitleType.Id ?? DBNull.Value;
            insertAlternativeTitleTypeDbCommand.Parameters[1].Value = (object)alternativeTitleType.Content ?? DBNull.Value;
            insertAlternativeTitleTypeDbCommand.Parameters[2].Value = (object)alternativeTitleType.CreationTime ?? DBNull.Value;
            insertAlternativeTitleTypeDbCommand.Parameters[3].Value = (object)alternativeTitleType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAlternativeTitleTypeDbCommand.CommandText}\r\n-- Id: {alternativeTitleType.Id}\r\n-- Content: {alternativeTitleType.Content}\r\n-- CreationTime: {alternativeTitleType.CreationTime}\r\n-- CreationUserId: {alternativeTitleType.CreationUserId}");
            insertAlternativeTitleTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(AlternativeTitleType alternativeTitleType)
        {
            if (ConnectIfNecessary() || updateAlternativeTitleTypeDbCommand == null)
            {
                updateAlternativeTitleTypeDbCommand = dbConnection.CreateCommand();
                updateAlternativeTitleTypeDbCommand.Transaction = dbTransaction;
                updateAlternativeTitleTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                dp = updateAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                dp = updateAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                dp = updateAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                updateAlternativeTitleTypeDbCommand.Prepare();
            }
            updateAlternativeTitleTypeDbCommand.Transaction = dbTransaction;
            updateAlternativeTitleTypeDbCommand.Parameters[0].Value = (object)alternativeTitleType.Content ?? DBNull.Value;
            updateAlternativeTitleTypeDbCommand.Parameters[1].Value = (object)alternativeTitleType.CreationTime ?? DBNull.Value;
            updateAlternativeTitleTypeDbCommand.Parameters[2].Value = (object)alternativeTitleType.CreationUserId ?? DBNull.Value;
            updateAlternativeTitleTypeDbCommand.Parameters[3].Value = alternativeTitleType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAlternativeTitleTypeDbCommand.CommandText}\r\n-- Content: {alternativeTitleType.Content}\r\n-- CreationTime: {alternativeTitleType.CreationTime}\r\n-- CreationUserId: {alternativeTitleType.CreationUserId}\r\n-- Id: {alternativeTitleType.Id}");
            updateAlternativeTitleTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(AlternativeTitleType alternativeTitleType)
        {
            if (ConnectIfNecessary() || deleteAlternativeTitleTypeDbCommand == null)
            {
                deleteAlternativeTitleTypeDbCommand = dbConnection.CreateCommand();
                deleteAlternativeTitleTypeDbCommand.Transaction = dbTransaction;
                deleteAlternativeTitleTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteAlternativeTitleTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAlternativeTitleTypeDbCommand.Parameters.Add(dp);
                deleteAlternativeTitleTypeDbCommand.Prepare();
            }
            deleteAlternativeTitleTypeDbCommand.Transaction = dbTransaction;
            deleteAlternativeTitleTypeDbCommand.Parameters[0].Value = alternativeTitleType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAlternativeTitleTypeDbCommand.CommandText}\r\n-- Id: {alternativeTitleType.Id}");
            deleteAlternativeTitleTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(AuditLoan auditLoan)
        {
            if (auditLoan.Id == null) auditLoan.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAuditLoanDbCommand == null)
            {
                insertAuditLoanDbCommand = dbConnection.CreateCommand();
                insertAuditLoanDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")} ({Quote("_id")}, {Quote("orig_id")}, {Quote("operation")}, {Quote("jsonb")}, {Quote("created_date")}) VALUES (@Id, @OrigId, @Operation, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime)";
                var dp = insertAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAuditLoanDbCommand.Parameters.Add(dp);
                dp = insertAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@OrigId";
                dp.DbType = DbType.Guid;
                insertAuditLoanDbCommand.Parameters.Add(dp);
                dp = insertAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Operation";
                dp.DbType = DbType.String;
                dp.Size = 2;
                insertAuditLoanDbCommand.Parameters.Add(dp);
                dp = insertAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuditLoanDbCommand.Parameters.Add(dp);
                dp = insertAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAuditLoanDbCommand.Parameters.Add(dp);
                insertAuditLoanDbCommand.Transaction = dbTransaction;
                insertAuditLoanDbCommand.Prepare();
            }
            insertAuditLoanDbCommand.Transaction = dbTransaction;
            insertAuditLoanDbCommand.Parameters[0].Value = (object)auditLoan.Id ?? DBNull.Value;
            insertAuditLoanDbCommand.Parameters[1].Value = (object)auditLoan.OrigId ?? DBNull.Value;
            insertAuditLoanDbCommand.Parameters[2].Value = (object)auditLoan.Operation ?? DBNull.Value;
            insertAuditLoanDbCommand.Parameters[3].Value = (object)auditLoan.Content ?? DBNull.Value;
            insertAuditLoanDbCommand.Parameters[4].Value = (object)auditLoan.CreationTime ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAuditLoanDbCommand.CommandText}\r\n-- Id: {auditLoan.Id}\r\n-- OrigId: {auditLoan.OrigId}\r\n-- Operation: {auditLoan.Operation}\r\n-- Content: {auditLoan.Content}\r\n-- CreationTime: {auditLoan.CreationTime}");
            insertAuditLoanDbCommand.ExecuteNonQuery();
        }

        public void Update(AuditLoan auditLoan)
        {
            if (ConnectIfNecessary() || updateAuditLoanDbCommand == null)
            {
                updateAuditLoanDbCommand = dbConnection.CreateCommand();
                updateAuditLoanDbCommand.Transaction = dbTransaction;
                updateAuditLoanDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")} SET {Quote("orig_id")} = @OrigId, {Quote("operation")} = @Operation, {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("created_date")} = @CreationTime WHERE {Quote("_id")} = @Id";
                var dp = updateAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@OrigId";
                dp.DbType = DbType.Guid;
                updateAuditLoanDbCommand.Parameters.Add(dp);
                dp = updateAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Operation";
                dp.DbType = DbType.String;
                dp.Size = 2;
                updateAuditLoanDbCommand.Parameters.Add(dp);
                dp = updateAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuditLoanDbCommand.Parameters.Add(dp);
                dp = updateAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAuditLoanDbCommand.Parameters.Add(dp);
                dp = updateAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAuditLoanDbCommand.Parameters.Add(dp);
                updateAuditLoanDbCommand.Prepare();
            }
            updateAuditLoanDbCommand.Transaction = dbTransaction;
            updateAuditLoanDbCommand.Parameters[0].Value = (object)auditLoan.OrigId ?? DBNull.Value;
            updateAuditLoanDbCommand.Parameters[1].Value = (object)auditLoan.Operation ?? DBNull.Value;
            updateAuditLoanDbCommand.Parameters[2].Value = (object)auditLoan.Content ?? DBNull.Value;
            updateAuditLoanDbCommand.Parameters[3].Value = (object)auditLoan.CreationTime ?? DBNull.Value;
            updateAuditLoanDbCommand.Parameters[4].Value = auditLoan.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAuditLoanDbCommand.CommandText}\r\n-- OrigId: {auditLoan.OrigId}\r\n-- Operation: {auditLoan.Operation}\r\n-- Content: {auditLoan.Content}\r\n-- CreationTime: {auditLoan.CreationTime}\r\n-- Id: {auditLoan.Id}");
            updateAuditLoanDbCommand.ExecuteNonQuery();
        }

        public void Delete(AuditLoan auditLoan)
        {
            if (ConnectIfNecessary() || deleteAuditLoanDbCommand == null)
            {
                deleteAuditLoanDbCommand = dbConnection.CreateCommand();
                deleteAuditLoanDbCommand.Transaction = dbTransaction;
                deleteAuditLoanDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")} WHERE {Quote("_id")} = @Id";
                var dp = deleteAuditLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAuditLoanDbCommand.Parameters.Add(dp);
                deleteAuditLoanDbCommand.Prepare();
            }
            deleteAuditLoanDbCommand.Transaction = dbTransaction;
            deleteAuditLoanDbCommand.Parameters[0].Value = auditLoan.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAuditLoanDbCommand.CommandText}\r\n-- Id: {auditLoan.Id}");
            deleteAuditLoanDbCommand.ExecuteNonQuery();
        }

        public void Insert(AuthAttempt authAttempt)
        {
            if (authAttempt.Id == null) authAttempt.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAuthAttemptDbCommand == null)
            {
                insertAuthAttemptDbCommand = dbConnection.CreateCommand();
                insertAuthAttemptDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAuthAttemptDbCommand.Parameters.Add(dp);
                dp = insertAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuthAttemptDbCommand.Parameters.Add(dp);
                dp = insertAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAuthAttemptDbCommand.Parameters.Add(dp);
                dp = insertAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuthAttemptDbCommand.Parameters.Add(dp);
                insertAuthAttemptDbCommand.Transaction = dbTransaction;
                insertAuthAttemptDbCommand.Prepare();
            }
            insertAuthAttemptDbCommand.Transaction = dbTransaction;
            insertAuthAttemptDbCommand.Parameters[0].Value = (object)authAttempt.Id ?? DBNull.Value;
            insertAuthAttemptDbCommand.Parameters[1].Value = (object)authAttempt.Content ?? DBNull.Value;
            insertAuthAttemptDbCommand.Parameters[2].Value = (object)authAttempt.CreationTime ?? DBNull.Value;
            insertAuthAttemptDbCommand.Parameters[3].Value = (object)authAttempt.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAuthAttemptDbCommand.CommandText}\r\n-- Id: {authAttempt.Id}\r\n-- Content: {authAttempt.Content}\r\n-- CreationTime: {authAttempt.CreationTime}\r\n-- CreationUserId: {authAttempt.CreationUserId}");
            insertAuthAttemptDbCommand.ExecuteNonQuery();
        }

        public void Update(AuthAttempt authAttempt)
        {
            if (ConnectIfNecessary() || updateAuthAttemptDbCommand == null)
            {
                updateAuthAttemptDbCommand = dbConnection.CreateCommand();
                updateAuthAttemptDbCommand.Transaction = dbTransaction;
                updateAuthAttemptDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuthAttemptDbCommand.Parameters.Add(dp);
                dp = updateAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAuthAttemptDbCommand.Parameters.Add(dp);
                dp = updateAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuthAttemptDbCommand.Parameters.Add(dp);
                dp = updateAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAuthAttemptDbCommand.Parameters.Add(dp);
                updateAuthAttemptDbCommand.Prepare();
            }
            updateAuthAttemptDbCommand.Transaction = dbTransaction;
            updateAuthAttemptDbCommand.Parameters[0].Value = (object)authAttempt.Content ?? DBNull.Value;
            updateAuthAttemptDbCommand.Parameters[1].Value = (object)authAttempt.CreationTime ?? DBNull.Value;
            updateAuthAttemptDbCommand.Parameters[2].Value = (object)authAttempt.CreationUserId ?? DBNull.Value;
            updateAuthAttemptDbCommand.Parameters[3].Value = authAttempt.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAuthAttemptDbCommand.CommandText}\r\n-- Content: {authAttempt.Content}\r\n-- CreationTime: {authAttempt.CreationTime}\r\n-- CreationUserId: {authAttempt.CreationUserId}\r\n-- Id: {authAttempt.Id}");
            updateAuthAttemptDbCommand.ExecuteNonQuery();
        }

        public void Delete(AuthAttempt authAttempt)
        {
            if (ConnectIfNecessary() || deleteAuthAttemptDbCommand == null)
            {
                deleteAuthAttemptDbCommand = dbConnection.CreateCommand();
                deleteAuthAttemptDbCommand.Transaction = dbTransaction;
                deleteAuthAttemptDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")} WHERE {Quote("_id")} = @Id";
                var dp = deleteAuthAttemptDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAuthAttemptDbCommand.Parameters.Add(dp);
                deleteAuthAttemptDbCommand.Prepare();
            }
            deleteAuthAttemptDbCommand.Transaction = dbTransaction;
            deleteAuthAttemptDbCommand.Parameters[0].Value = authAttempt.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAuthAttemptDbCommand.CommandText}\r\n-- Id: {authAttempt.Id}");
            deleteAuthAttemptDbCommand.ExecuteNonQuery();
        }

        public void Insert(AuthCredentialsHistory authCredentialsHistory)
        {
            if (authCredentialsHistory.Id == null) authCredentialsHistory.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAuthCredentialsHistoryDbCommand == null)
            {
                insertAuthCredentialsHistoryDbCommand = dbConnection.CreateCommand();
                insertAuthCredentialsHistoryDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                dp = insertAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                dp = insertAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                dp = insertAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                insertAuthCredentialsHistoryDbCommand.Transaction = dbTransaction;
                insertAuthCredentialsHistoryDbCommand.Prepare();
            }
            insertAuthCredentialsHistoryDbCommand.Transaction = dbTransaction;
            insertAuthCredentialsHistoryDbCommand.Parameters[0].Value = (object)authCredentialsHistory.Id ?? DBNull.Value;
            insertAuthCredentialsHistoryDbCommand.Parameters[1].Value = (object)authCredentialsHistory.Content ?? DBNull.Value;
            insertAuthCredentialsHistoryDbCommand.Parameters[2].Value = (object)authCredentialsHistory.CreationTime ?? DBNull.Value;
            insertAuthCredentialsHistoryDbCommand.Parameters[3].Value = (object)authCredentialsHistory.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAuthCredentialsHistoryDbCommand.CommandText}\r\n-- Id: {authCredentialsHistory.Id}\r\n-- Content: {authCredentialsHistory.Content}\r\n-- CreationTime: {authCredentialsHistory.CreationTime}\r\n-- CreationUserId: {authCredentialsHistory.CreationUserId}");
            insertAuthCredentialsHistoryDbCommand.ExecuteNonQuery();
        }

        public void Update(AuthCredentialsHistory authCredentialsHistory)
        {
            if (ConnectIfNecessary() || updateAuthCredentialsHistoryDbCommand == null)
            {
                updateAuthCredentialsHistoryDbCommand = dbConnection.CreateCommand();
                updateAuthCredentialsHistoryDbCommand.Transaction = dbTransaction;
                updateAuthCredentialsHistoryDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                dp = updateAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                dp = updateAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                dp = updateAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                updateAuthCredentialsHistoryDbCommand.Prepare();
            }
            updateAuthCredentialsHistoryDbCommand.Transaction = dbTransaction;
            updateAuthCredentialsHistoryDbCommand.Parameters[0].Value = (object)authCredentialsHistory.Content ?? DBNull.Value;
            updateAuthCredentialsHistoryDbCommand.Parameters[1].Value = (object)authCredentialsHistory.CreationTime ?? DBNull.Value;
            updateAuthCredentialsHistoryDbCommand.Parameters[2].Value = (object)authCredentialsHistory.CreationUserId ?? DBNull.Value;
            updateAuthCredentialsHistoryDbCommand.Parameters[3].Value = authCredentialsHistory.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAuthCredentialsHistoryDbCommand.CommandText}\r\n-- Content: {authCredentialsHistory.Content}\r\n-- CreationTime: {authCredentialsHistory.CreationTime}\r\n-- CreationUserId: {authCredentialsHistory.CreationUserId}\r\n-- Id: {authCredentialsHistory.Id}");
            updateAuthCredentialsHistoryDbCommand.ExecuteNonQuery();
        }

        public void Delete(AuthCredentialsHistory authCredentialsHistory)
        {
            if (ConnectIfNecessary() || deleteAuthCredentialsHistoryDbCommand == null)
            {
                deleteAuthCredentialsHistoryDbCommand = dbConnection.CreateCommand();
                deleteAuthCredentialsHistoryDbCommand.Transaction = dbTransaction;
                deleteAuthCredentialsHistoryDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")} WHERE {Quote("_id")} = @Id";
                var dp = deleteAuthCredentialsHistoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAuthCredentialsHistoryDbCommand.Parameters.Add(dp);
                deleteAuthCredentialsHistoryDbCommand.Prepare();
            }
            deleteAuthCredentialsHistoryDbCommand.Transaction = dbTransaction;
            deleteAuthCredentialsHistoryDbCommand.Parameters[0].Value = authCredentialsHistory.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAuthCredentialsHistoryDbCommand.CommandText}\r\n-- Id: {authCredentialsHistory.Id}");
            deleteAuthCredentialsHistoryDbCommand.ExecuteNonQuery();
        }

        public void Insert(AuthPasswordAction authPasswordAction)
        {
            if (authPasswordAction.Id == null) authPasswordAction.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertAuthPasswordActionDbCommand == null)
            {
                insertAuthPasswordActionDbCommand = dbConnection.CreateCommand();
                insertAuthPasswordActionDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertAuthPasswordActionDbCommand.Parameters.Add(dp);
                dp = insertAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuthPasswordActionDbCommand.Parameters.Add(dp);
                dp = insertAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertAuthPasswordActionDbCommand.Parameters.Add(dp);
                dp = insertAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertAuthPasswordActionDbCommand.Parameters.Add(dp);
                insertAuthPasswordActionDbCommand.Transaction = dbTransaction;
                insertAuthPasswordActionDbCommand.Prepare();
            }
            insertAuthPasswordActionDbCommand.Transaction = dbTransaction;
            insertAuthPasswordActionDbCommand.Parameters[0].Value = (object)authPasswordAction.Id ?? DBNull.Value;
            insertAuthPasswordActionDbCommand.Parameters[1].Value = (object)authPasswordAction.Content ?? DBNull.Value;
            insertAuthPasswordActionDbCommand.Parameters[2].Value = (object)authPasswordAction.CreationTime ?? DBNull.Value;
            insertAuthPasswordActionDbCommand.Parameters[3].Value = (object)authPasswordAction.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertAuthPasswordActionDbCommand.CommandText}\r\n-- Id: {authPasswordAction.Id}\r\n-- Content: {authPasswordAction.Content}\r\n-- CreationTime: {authPasswordAction.CreationTime}\r\n-- CreationUserId: {authPasswordAction.CreationUserId}");
            insertAuthPasswordActionDbCommand.ExecuteNonQuery();
        }

        public void Update(AuthPasswordAction authPasswordAction)
        {
            if (ConnectIfNecessary() || updateAuthPasswordActionDbCommand == null)
            {
                updateAuthPasswordActionDbCommand = dbConnection.CreateCommand();
                updateAuthPasswordActionDbCommand.Transaction = dbTransaction;
                updateAuthPasswordActionDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuthPasswordActionDbCommand.Parameters.Add(dp);
                dp = updateAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateAuthPasswordActionDbCommand.Parameters.Add(dp);
                dp = updateAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateAuthPasswordActionDbCommand.Parameters.Add(dp);
                dp = updateAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateAuthPasswordActionDbCommand.Parameters.Add(dp);
                updateAuthPasswordActionDbCommand.Prepare();
            }
            updateAuthPasswordActionDbCommand.Transaction = dbTransaction;
            updateAuthPasswordActionDbCommand.Parameters[0].Value = (object)authPasswordAction.Content ?? DBNull.Value;
            updateAuthPasswordActionDbCommand.Parameters[1].Value = (object)authPasswordAction.CreationTime ?? DBNull.Value;
            updateAuthPasswordActionDbCommand.Parameters[2].Value = (object)authPasswordAction.CreationUserId ?? DBNull.Value;
            updateAuthPasswordActionDbCommand.Parameters[3].Value = authPasswordAction.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateAuthPasswordActionDbCommand.CommandText}\r\n-- Content: {authPasswordAction.Content}\r\n-- CreationTime: {authPasswordAction.CreationTime}\r\n-- CreationUserId: {authPasswordAction.CreationUserId}\r\n-- Id: {authPasswordAction.Id}");
            updateAuthPasswordActionDbCommand.ExecuteNonQuery();
        }

        public void Delete(AuthPasswordAction authPasswordAction)
        {
            if (ConnectIfNecessary() || deleteAuthPasswordActionDbCommand == null)
            {
                deleteAuthPasswordActionDbCommand = dbConnection.CreateCommand();
                deleteAuthPasswordActionDbCommand.Transaction = dbTransaction;
                deleteAuthPasswordActionDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")} WHERE {Quote("_id")} = @Id";
                var dp = deleteAuthPasswordActionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteAuthPasswordActionDbCommand.Parameters.Add(dp);
                deleteAuthPasswordActionDbCommand.Prepare();
            }
            deleteAuthPasswordActionDbCommand.Transaction = dbTransaction;
            deleteAuthPasswordActionDbCommand.Parameters[0].Value = authPasswordAction.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteAuthPasswordActionDbCommand.CommandText}\r\n-- Id: {authPasswordAction.Id}");
            deleteAuthPasswordActionDbCommand.ExecuteNonQuery();
        }

        public void Insert(Block block)
        {
            if (block.Id == null) block.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertBlockDbCommand == null)
            {
                insertBlockDbCommand = dbConnection.CreateCommand();
                insertBlockDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertBlockDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertBlockDbCommand.Parameters.Add(dp);
                dp = insertBlockDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertBlockDbCommand.Parameters.Add(dp);
                dp = insertBlockDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertBlockDbCommand.Parameters.Add(dp);
                dp = insertBlockDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertBlockDbCommand.Parameters.Add(dp);
                insertBlockDbCommand.Transaction = dbTransaction;
                insertBlockDbCommand.Prepare();
            }
            insertBlockDbCommand.Transaction = dbTransaction;
            insertBlockDbCommand.Parameters[0].Value = (object)block.Id ?? DBNull.Value;
            insertBlockDbCommand.Parameters[1].Value = (object)block.Content ?? DBNull.Value;
            insertBlockDbCommand.Parameters[2].Value = (object)block.CreationTime ?? DBNull.Value;
            insertBlockDbCommand.Parameters[3].Value = (object)block.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertBlockDbCommand.CommandText}\r\n-- Id: {block.Id}\r\n-- Content: {block.Content}\r\n-- CreationTime: {block.CreationTime}\r\n-- CreationUserId: {block.CreationUserId}");
            insertBlockDbCommand.ExecuteNonQuery();
        }

        public void Update(Block block)
        {
            if (ConnectIfNecessary() || updateBlockDbCommand == null)
            {
                updateBlockDbCommand = dbConnection.CreateCommand();
                updateBlockDbCommand.Transaction = dbTransaction;
                updateBlockDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateBlockDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateBlockDbCommand.Parameters.Add(dp);
                dp = updateBlockDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateBlockDbCommand.Parameters.Add(dp);
                dp = updateBlockDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateBlockDbCommand.Parameters.Add(dp);
                dp = updateBlockDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateBlockDbCommand.Parameters.Add(dp);
                updateBlockDbCommand.Prepare();
            }
            updateBlockDbCommand.Transaction = dbTransaction;
            updateBlockDbCommand.Parameters[0].Value = (object)block.Content ?? DBNull.Value;
            updateBlockDbCommand.Parameters[1].Value = (object)block.CreationTime ?? DBNull.Value;
            updateBlockDbCommand.Parameters[2].Value = (object)block.CreationUserId ?? DBNull.Value;
            updateBlockDbCommand.Parameters[3].Value = block.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateBlockDbCommand.CommandText}\r\n-- Content: {block.Content}\r\n-- CreationTime: {block.CreationTime}\r\n-- CreationUserId: {block.CreationUserId}\r\n-- Id: {block.Id}");
            updateBlockDbCommand.ExecuteNonQuery();
        }

        public void Delete(Block block)
        {
            if (ConnectIfNecessary() || deleteBlockDbCommand == null)
            {
                deleteBlockDbCommand = dbConnection.CreateCommand();
                deleteBlockDbCommand.Transaction = dbTransaction;
                deleteBlockDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")} WHERE {Quote("id")} = @Id";
                var dp = deleteBlockDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteBlockDbCommand.Parameters.Add(dp);
                deleteBlockDbCommand.Prepare();
            }
            deleteBlockDbCommand.Transaction = dbTransaction;
            deleteBlockDbCommand.Parameters[0].Value = block.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteBlockDbCommand.CommandText}\r\n-- Id: {block.Id}");
            deleteBlockDbCommand.ExecuteNonQuery();
        }

        public void Insert(Budget budget)
        {
            if (budget.Id == null) budget.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertBudgetDbCommand == null)
            {
                insertBudgetDbCommand = dbConnection.CreateCommand();
                insertBudgetDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("fund_id")}, {Quote("fiscal_year_id")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @FundId, @FiscalYearId)";
                var dp = insertBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertBudgetDbCommand.Parameters.Add(dp);
                dp = insertBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertBudgetDbCommand.Parameters.Add(dp);
                dp = insertBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertBudgetDbCommand.Parameters.Add(dp);
                dp = insertBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertBudgetDbCommand.Parameters.Add(dp);
                dp = insertBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@FundId";
                dp.DbType = DbType.Guid;
                insertBudgetDbCommand.Parameters.Add(dp);
                dp = insertBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@FiscalYearId";
                dp.DbType = DbType.Guid;
                insertBudgetDbCommand.Parameters.Add(dp);
                insertBudgetDbCommand.Transaction = dbTransaction;
                insertBudgetDbCommand.Prepare();
            }
            insertBudgetDbCommand.Transaction = dbTransaction;
            insertBudgetDbCommand.Parameters[0].Value = (object)budget.Id ?? DBNull.Value;
            insertBudgetDbCommand.Parameters[1].Value = (object)budget.Content ?? DBNull.Value;
            insertBudgetDbCommand.Parameters[2].Value = (object)budget.CreationTime ?? DBNull.Value;
            insertBudgetDbCommand.Parameters[3].Value = (object)budget.CreationUserId ?? DBNull.Value;
            insertBudgetDbCommand.Parameters[4].Value = (object)budget.FundId ?? DBNull.Value;
            insertBudgetDbCommand.Parameters[5].Value = (object)budget.FiscalYearId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertBudgetDbCommand.CommandText}\r\n-- Id: {budget.Id}\r\n-- Content: {budget.Content}\r\n-- CreationTime: {budget.CreationTime}\r\n-- CreationUserId: {budget.CreationUserId}\r\n-- FundId: {budget.FundId}\r\n-- FiscalYearId: {budget.FiscalYearId}");
            insertBudgetDbCommand.ExecuteNonQuery();
        }

        public void Update(Budget budget)
        {
            if (ConnectIfNecessary() || updateBudgetDbCommand == null)
            {
                updateBudgetDbCommand = dbConnection.CreateCommand();
                updateBudgetDbCommand.Transaction = dbTransaction;
                updateBudgetDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("fund_id")} = @FundId, {Quote("fiscal_year_id")} = @FiscalYearId WHERE {Quote("id")} = @Id";
                var dp = updateBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateBudgetDbCommand.Parameters.Add(dp);
                dp = updateBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateBudgetDbCommand.Parameters.Add(dp);
                dp = updateBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateBudgetDbCommand.Parameters.Add(dp);
                dp = updateBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@FundId";
                dp.DbType = DbType.Guid;
                updateBudgetDbCommand.Parameters.Add(dp);
                dp = updateBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@FiscalYearId";
                dp.DbType = DbType.Guid;
                updateBudgetDbCommand.Parameters.Add(dp);
                dp = updateBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateBudgetDbCommand.Parameters.Add(dp);
                updateBudgetDbCommand.Prepare();
            }
            updateBudgetDbCommand.Transaction = dbTransaction;
            updateBudgetDbCommand.Parameters[0].Value = (object)budget.Content ?? DBNull.Value;
            updateBudgetDbCommand.Parameters[1].Value = (object)budget.CreationTime ?? DBNull.Value;
            updateBudgetDbCommand.Parameters[2].Value = (object)budget.CreationUserId ?? DBNull.Value;
            updateBudgetDbCommand.Parameters[3].Value = (object)budget.FundId ?? DBNull.Value;
            updateBudgetDbCommand.Parameters[4].Value = (object)budget.FiscalYearId ?? DBNull.Value;
            updateBudgetDbCommand.Parameters[5].Value = budget.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateBudgetDbCommand.CommandText}\r\n-- Content: {budget.Content}\r\n-- CreationTime: {budget.CreationTime}\r\n-- CreationUserId: {budget.CreationUserId}\r\n-- FundId: {budget.FundId}\r\n-- FiscalYearId: {budget.FiscalYearId}\r\n-- Id: {budget.Id}");
            updateBudgetDbCommand.ExecuteNonQuery();
        }

        public void Delete(Budget budget)
        {
            if (ConnectIfNecessary() || deleteBudgetDbCommand == null)
            {
                deleteBudgetDbCommand = dbConnection.CreateCommand();
                deleteBudgetDbCommand.Transaction = dbTransaction;
                deleteBudgetDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")} WHERE {Quote("id")} = @Id";
                var dp = deleteBudgetDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteBudgetDbCommand.Parameters.Add(dp);
                deleteBudgetDbCommand.Prepare();
            }
            deleteBudgetDbCommand.Transaction = dbTransaction;
            deleteBudgetDbCommand.Parameters[0].Value = budget.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteBudgetDbCommand.CommandText}\r\n-- Id: {budget.Id}");
            deleteBudgetDbCommand.ExecuteNonQuery();
        }

        public void Insert(CallNumberType callNumberType)
        {
            if (callNumberType.Id == null) callNumberType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCallNumberTypeDbCommand == null)
            {
                insertCallNumberTypeDbCommand = dbConnection.CreateCommand();
                insertCallNumberTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCallNumberTypeDbCommand.Parameters.Add(dp);
                dp = insertCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCallNumberTypeDbCommand.Parameters.Add(dp);
                dp = insertCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertCallNumberTypeDbCommand.Parameters.Add(dp);
                dp = insertCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCallNumberTypeDbCommand.Parameters.Add(dp);
                insertCallNumberTypeDbCommand.Transaction = dbTransaction;
                insertCallNumberTypeDbCommand.Prepare();
            }
            insertCallNumberTypeDbCommand.Transaction = dbTransaction;
            insertCallNumberTypeDbCommand.Parameters[0].Value = (object)callNumberType.Id ?? DBNull.Value;
            insertCallNumberTypeDbCommand.Parameters[1].Value = (object)callNumberType.Content ?? DBNull.Value;
            insertCallNumberTypeDbCommand.Parameters[2].Value = (object)callNumberType.CreationTime ?? DBNull.Value;
            insertCallNumberTypeDbCommand.Parameters[3].Value = (object)callNumberType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCallNumberTypeDbCommand.CommandText}\r\n-- Id: {callNumberType.Id}\r\n-- Content: {callNumberType.Content}\r\n-- CreationTime: {callNumberType.CreationTime}\r\n-- CreationUserId: {callNumberType.CreationUserId}");
            insertCallNumberTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(CallNumberType callNumberType)
        {
            if (ConnectIfNecessary() || updateCallNumberTypeDbCommand == null)
            {
                updateCallNumberTypeDbCommand = dbConnection.CreateCommand();
                updateCallNumberTypeDbCommand.Transaction = dbTransaction;
                updateCallNumberTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCallNumberTypeDbCommand.Parameters.Add(dp);
                dp = updateCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateCallNumberTypeDbCommand.Parameters.Add(dp);
                dp = updateCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCallNumberTypeDbCommand.Parameters.Add(dp);
                dp = updateCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCallNumberTypeDbCommand.Parameters.Add(dp);
                updateCallNumberTypeDbCommand.Prepare();
            }
            updateCallNumberTypeDbCommand.Transaction = dbTransaction;
            updateCallNumberTypeDbCommand.Parameters[0].Value = (object)callNumberType.Content ?? DBNull.Value;
            updateCallNumberTypeDbCommand.Parameters[1].Value = (object)callNumberType.CreationTime ?? DBNull.Value;
            updateCallNumberTypeDbCommand.Parameters[2].Value = (object)callNumberType.CreationUserId ?? DBNull.Value;
            updateCallNumberTypeDbCommand.Parameters[3].Value = callNumberType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCallNumberTypeDbCommand.CommandText}\r\n-- Content: {callNumberType.Content}\r\n-- CreationTime: {callNumberType.CreationTime}\r\n-- CreationUserId: {callNumberType.CreationUserId}\r\n-- Id: {callNumberType.Id}");
            updateCallNumberTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(CallNumberType callNumberType)
        {
            if (ConnectIfNecessary() || deleteCallNumberTypeDbCommand == null)
            {
                deleteCallNumberTypeDbCommand = dbConnection.CreateCommand();
                deleteCallNumberTypeDbCommand.Transaction = dbTransaction;
                deleteCallNumberTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteCallNumberTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCallNumberTypeDbCommand.Parameters.Add(dp);
                deleteCallNumberTypeDbCommand.Prepare();
            }
            deleteCallNumberTypeDbCommand.Transaction = dbTransaction;
            deleteCallNumberTypeDbCommand.Parameters[0].Value = callNumberType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCallNumberTypeDbCommand.CommandText}\r\n-- Id: {callNumberType.Id}");
            deleteCallNumberTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Campus campus)
        {
            if (campus.Id == null) campus.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCampusDbCommand == null)
            {
                insertCampusDbCommand = dbConnection.CreateCommand();
                insertCampusDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("institutionid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Institutionid)";
                var dp = insertCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCampusDbCommand.Parameters.Add(dp);
                dp = insertCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCampusDbCommand.Parameters.Add(dp);
                dp = insertCampusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertCampusDbCommand.Parameters.Add(dp);
                dp = insertCampusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCampusDbCommand.Parameters.Add(dp);
                dp = insertCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Institutionid";
                dp.DbType = DbType.Guid;
                insertCampusDbCommand.Parameters.Add(dp);
                insertCampusDbCommand.Transaction = dbTransaction;
                insertCampusDbCommand.Prepare();
            }
            insertCampusDbCommand.Transaction = dbTransaction;
            insertCampusDbCommand.Parameters[0].Value = (object)campus.Id ?? DBNull.Value;
            insertCampusDbCommand.Parameters[1].Value = (object)campus.Content ?? DBNull.Value;
            insertCampusDbCommand.Parameters[2].Value = (object)campus.CreationTime ?? DBNull.Value;
            insertCampusDbCommand.Parameters[3].Value = (object)campus.CreationUserId ?? DBNull.Value;
            insertCampusDbCommand.Parameters[4].Value = (object)campus.Institutionid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCampusDbCommand.CommandText}\r\n-- Id: {campus.Id}\r\n-- Content: {campus.Content}\r\n-- CreationTime: {campus.CreationTime}\r\n-- CreationUserId: {campus.CreationUserId}\r\n-- Institutionid: {campus.Institutionid}");
            insertCampusDbCommand.ExecuteNonQuery();
        }

        public void Update(Campus campus)
        {
            if (ConnectIfNecessary() || updateCampusDbCommand == null)
            {
                updateCampusDbCommand = dbConnection.CreateCommand();
                updateCampusDbCommand.Transaction = dbTransaction;
                updateCampusDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("institutionid")} = @Institutionid WHERE {Quote("_id")} = @Id";
                var dp = updateCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCampusDbCommand.Parameters.Add(dp);
                dp = updateCampusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateCampusDbCommand.Parameters.Add(dp);
                dp = updateCampusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCampusDbCommand.Parameters.Add(dp);
                dp = updateCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Institutionid";
                dp.DbType = DbType.Guid;
                updateCampusDbCommand.Parameters.Add(dp);
                dp = updateCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCampusDbCommand.Parameters.Add(dp);
                updateCampusDbCommand.Prepare();
            }
            updateCampusDbCommand.Transaction = dbTransaction;
            updateCampusDbCommand.Parameters[0].Value = (object)campus.Content ?? DBNull.Value;
            updateCampusDbCommand.Parameters[1].Value = (object)campus.CreationTime ?? DBNull.Value;
            updateCampusDbCommand.Parameters[2].Value = (object)campus.CreationUserId ?? DBNull.Value;
            updateCampusDbCommand.Parameters[3].Value = (object)campus.Institutionid ?? DBNull.Value;
            updateCampusDbCommand.Parameters[4].Value = campus.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCampusDbCommand.CommandText}\r\n-- Content: {campus.Content}\r\n-- CreationTime: {campus.CreationTime}\r\n-- CreationUserId: {campus.CreationUserId}\r\n-- Institutionid: {campus.Institutionid}\r\n-- Id: {campus.Id}");
            updateCampusDbCommand.ExecuteNonQuery();
        }

        public void Delete(Campus campus)
        {
            if (ConnectIfNecessary() || deleteCampusDbCommand == null)
            {
                deleteCampusDbCommand = dbConnection.CreateCommand();
                deleteCampusDbCommand.Transaction = dbTransaction;
                deleteCampusDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")} WHERE {Quote("_id")} = @Id";
                var dp = deleteCampusDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCampusDbCommand.Parameters.Add(dp);
                deleteCampusDbCommand.Prepare();
            }
            deleteCampusDbCommand.Transaction = dbTransaction;
            deleteCampusDbCommand.Parameters[0].Value = campus.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCampusDbCommand.CommandText}\r\n-- Id: {campus.Id}");
            deleteCampusDbCommand.ExecuteNonQuery();
        }

        public void Insert(CancellationReason cancellationReason)
        {
            if (cancellationReason.Id == null) cancellationReason.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCancellationReasonDbCommand == null)
            {
                insertCancellationReasonDbCommand = dbConnection.CreateCommand();
                insertCancellationReasonDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCancellationReasonDbCommand.Parameters.Add(dp);
                dp = insertCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCancellationReasonDbCommand.Parameters.Add(dp);
                dp = insertCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertCancellationReasonDbCommand.Parameters.Add(dp);
                dp = insertCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCancellationReasonDbCommand.Parameters.Add(dp);
                insertCancellationReasonDbCommand.Transaction = dbTransaction;
                insertCancellationReasonDbCommand.Prepare();
            }
            insertCancellationReasonDbCommand.Transaction = dbTransaction;
            insertCancellationReasonDbCommand.Parameters[0].Value = (object)cancellationReason.Id ?? DBNull.Value;
            insertCancellationReasonDbCommand.Parameters[1].Value = (object)cancellationReason.Content ?? DBNull.Value;
            insertCancellationReasonDbCommand.Parameters[2].Value = (object)cancellationReason.CreationTime ?? DBNull.Value;
            insertCancellationReasonDbCommand.Parameters[3].Value = (object)cancellationReason.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCancellationReasonDbCommand.CommandText}\r\n-- Id: {cancellationReason.Id}\r\n-- Content: {cancellationReason.Content}\r\n-- CreationTime: {cancellationReason.CreationTime}\r\n-- CreationUserId: {cancellationReason.CreationUserId}");
            insertCancellationReasonDbCommand.ExecuteNonQuery();
        }

        public void Update(CancellationReason cancellationReason)
        {
            if (ConnectIfNecessary() || updateCancellationReasonDbCommand == null)
            {
                updateCancellationReasonDbCommand = dbConnection.CreateCommand();
                updateCancellationReasonDbCommand.Transaction = dbTransaction;
                updateCancellationReasonDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCancellationReasonDbCommand.Parameters.Add(dp);
                dp = updateCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateCancellationReasonDbCommand.Parameters.Add(dp);
                dp = updateCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCancellationReasonDbCommand.Parameters.Add(dp);
                dp = updateCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCancellationReasonDbCommand.Parameters.Add(dp);
                updateCancellationReasonDbCommand.Prepare();
            }
            updateCancellationReasonDbCommand.Transaction = dbTransaction;
            updateCancellationReasonDbCommand.Parameters[0].Value = (object)cancellationReason.Content ?? DBNull.Value;
            updateCancellationReasonDbCommand.Parameters[1].Value = (object)cancellationReason.CreationTime ?? DBNull.Value;
            updateCancellationReasonDbCommand.Parameters[2].Value = (object)cancellationReason.CreationUserId ?? DBNull.Value;
            updateCancellationReasonDbCommand.Parameters[3].Value = cancellationReason.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCancellationReasonDbCommand.CommandText}\r\n-- Content: {cancellationReason.Content}\r\n-- CreationTime: {cancellationReason.CreationTime}\r\n-- CreationUserId: {cancellationReason.CreationUserId}\r\n-- Id: {cancellationReason.Id}");
            updateCancellationReasonDbCommand.ExecuteNonQuery();
        }

        public void Delete(CancellationReason cancellationReason)
        {
            if (ConnectIfNecessary() || deleteCancellationReasonDbCommand == null)
            {
                deleteCancellationReasonDbCommand = dbConnection.CreateCommand();
                deleteCancellationReasonDbCommand.Transaction = dbTransaction;
                deleteCancellationReasonDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")} WHERE {Quote("_id")} = @Id";
                var dp = deleteCancellationReasonDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCancellationReasonDbCommand.Parameters.Add(dp);
                deleteCancellationReasonDbCommand.Prepare();
            }
            deleteCancellationReasonDbCommand.Transaction = dbTransaction;
            deleteCancellationReasonDbCommand.Parameters[0].Value = cancellationReason.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCancellationReasonDbCommand.CommandText}\r\n-- Id: {cancellationReason.Id}");
            deleteCancellationReasonDbCommand.ExecuteNonQuery();
        }

        public void Insert(Category category)
        {
            if (category.Id == null) category.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCategoryDbCommand == null)
            {
                insertCategoryDbCommand = dbConnection.CreateCommand();
                insertCategoryDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCategoryDbCommand.Parameters.Add(dp);
                dp = insertCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCategoryDbCommand.Parameters.Add(dp);
                dp = insertCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertCategoryDbCommand.Parameters.Add(dp);
                dp = insertCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCategoryDbCommand.Parameters.Add(dp);
                insertCategoryDbCommand.Transaction = dbTransaction;
                insertCategoryDbCommand.Prepare();
            }
            insertCategoryDbCommand.Transaction = dbTransaction;
            insertCategoryDbCommand.Parameters[0].Value = (object)category.Id ?? DBNull.Value;
            insertCategoryDbCommand.Parameters[1].Value = (object)category.Content ?? DBNull.Value;
            insertCategoryDbCommand.Parameters[2].Value = (object)category.CreationTime ?? DBNull.Value;
            insertCategoryDbCommand.Parameters[3].Value = (object)category.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCategoryDbCommand.CommandText}\r\n-- Id: {category.Id}\r\n-- Content: {category.Content}\r\n-- CreationTime: {category.CreationTime}\r\n-- CreationUserId: {category.CreationUserId}");
            insertCategoryDbCommand.ExecuteNonQuery();
        }

        public void Update(Category category)
        {
            if (ConnectIfNecessary() || updateCategoryDbCommand == null)
            {
                updateCategoryDbCommand = dbConnection.CreateCommand();
                updateCategoryDbCommand.Transaction = dbTransaction;
                updateCategoryDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCategoryDbCommand.Parameters.Add(dp);
                dp = updateCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateCategoryDbCommand.Parameters.Add(dp);
                dp = updateCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCategoryDbCommand.Parameters.Add(dp);
                dp = updateCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCategoryDbCommand.Parameters.Add(dp);
                updateCategoryDbCommand.Prepare();
            }
            updateCategoryDbCommand.Transaction = dbTransaction;
            updateCategoryDbCommand.Parameters[0].Value = (object)category.Content ?? DBNull.Value;
            updateCategoryDbCommand.Parameters[1].Value = (object)category.CreationTime ?? DBNull.Value;
            updateCategoryDbCommand.Parameters[2].Value = (object)category.CreationUserId ?? DBNull.Value;
            updateCategoryDbCommand.Parameters[3].Value = category.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCategoryDbCommand.CommandText}\r\n-- Content: {category.Content}\r\n-- CreationTime: {category.CreationTime}\r\n-- CreationUserId: {category.CreationUserId}\r\n-- Id: {category.Id}");
            updateCategoryDbCommand.ExecuteNonQuery();
        }

        public void Delete(Category category)
        {
            if (ConnectIfNecessary() || deleteCategoryDbCommand == null)
            {
                deleteCategoryDbCommand = dbConnection.CreateCommand();
                deleteCategoryDbCommand.Transaction = dbTransaction;
                deleteCategoryDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")} WHERE {Quote("id")} = @Id";
                var dp = deleteCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCategoryDbCommand.Parameters.Add(dp);
                deleteCategoryDbCommand.Prepare();
            }
            deleteCategoryDbCommand.Transaction = dbTransaction;
            deleteCategoryDbCommand.Parameters[0].Value = category.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCategoryDbCommand.CommandText}\r\n-- Id: {category.Id}");
            deleteCategoryDbCommand.ExecuteNonQuery();
        }

        public void Insert(CirculationRule circulationRule)
        {
            if (circulationRule.Id == null) circulationRule.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCirculationRuleDbCommand == null)
            {
                insertCirculationRuleDbCommand = dbConnection.CreateCommand();
                insertCirculationRuleDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}circulation_rules")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("lock")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @Lock)";
                var dp = insertCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCirculationRuleDbCommand.Parameters.Add(dp);
                dp = insertCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCirculationRuleDbCommand.Parameters.Add(dp);
                dp = insertCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Lock";
                dp.DbType = DbType.Boolean;
                insertCirculationRuleDbCommand.Parameters.Add(dp);
                insertCirculationRuleDbCommand.Transaction = dbTransaction;
                insertCirculationRuleDbCommand.Prepare();
            }
            insertCirculationRuleDbCommand.Transaction = dbTransaction;
            insertCirculationRuleDbCommand.Parameters[0].Value = (object)circulationRule.Id ?? DBNull.Value;
            insertCirculationRuleDbCommand.Parameters[1].Value = (object)circulationRule.Content ?? DBNull.Value;
            insertCirculationRuleDbCommand.Parameters[2].Value = (object)circulationRule.Lock ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCirculationRuleDbCommand.CommandText}\r\n-- Id: {circulationRule.Id}\r\n-- Content: {circulationRule.Content}\r\n-- Lock: {circulationRule.Lock}");
            insertCirculationRuleDbCommand.ExecuteNonQuery();
        }

        public void Update(CirculationRule circulationRule)
        {
            if (ConnectIfNecessary() || updateCirculationRuleDbCommand == null)
            {
                updateCirculationRuleDbCommand = dbConnection.CreateCommand();
                updateCirculationRuleDbCommand.Transaction = dbTransaction;
                updateCirculationRuleDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}circulation_rules")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("lock")} = @Lock WHERE {Quote("_id")} = @Id";
                var dp = updateCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCirculationRuleDbCommand.Parameters.Add(dp);
                dp = updateCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Lock";
                dp.DbType = DbType.Boolean;
                updateCirculationRuleDbCommand.Parameters.Add(dp);
                dp = updateCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCirculationRuleDbCommand.Parameters.Add(dp);
                updateCirculationRuleDbCommand.Prepare();
            }
            updateCirculationRuleDbCommand.Transaction = dbTransaction;
            updateCirculationRuleDbCommand.Parameters[0].Value = (object)circulationRule.Content ?? DBNull.Value;
            updateCirculationRuleDbCommand.Parameters[1].Value = (object)circulationRule.Lock ?? DBNull.Value;
            updateCirculationRuleDbCommand.Parameters[2].Value = circulationRule.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCirculationRuleDbCommand.CommandText}\r\n-- Content: {circulationRule.Content}\r\n-- Lock: {circulationRule.Lock}\r\n-- Id: {circulationRule.Id}");
            updateCirculationRuleDbCommand.ExecuteNonQuery();
        }

        public void Delete(CirculationRule circulationRule)
        {
            if (ConnectIfNecessary() || deleteCirculationRuleDbCommand == null)
            {
                deleteCirculationRuleDbCommand = dbConnection.CreateCommand();
                deleteCirculationRuleDbCommand.Transaction = dbTransaction;
                deleteCirculationRuleDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}circulation_rules")} WHERE {Quote("_id")} = @Id";
                var dp = deleteCirculationRuleDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCirculationRuleDbCommand.Parameters.Add(dp);
                deleteCirculationRuleDbCommand.Prepare();
            }
            deleteCirculationRuleDbCommand.Transaction = dbTransaction;
            deleteCirculationRuleDbCommand.Parameters[0].Value = circulationRule.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCirculationRuleDbCommand.CommandText}\r\n-- Id: {circulationRule.Id}");
            deleteCirculationRuleDbCommand.ExecuteNonQuery();
        }

        public void Insert(Claim claim)
        {
            if (claim.Id == null) claim.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertClaimDbCommand == null)
            {
                insertClaimDbCommand = dbConnection.CreateCommand();
                insertClaimDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertClaimDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertClaimDbCommand.Parameters.Add(dp);
                dp = insertClaimDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertClaimDbCommand.Parameters.Add(dp);
                dp = insertClaimDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertClaimDbCommand.Parameters.Add(dp);
                dp = insertClaimDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertClaimDbCommand.Parameters.Add(dp);
                insertClaimDbCommand.Transaction = dbTransaction;
                insertClaimDbCommand.Prepare();
            }
            insertClaimDbCommand.Transaction = dbTransaction;
            insertClaimDbCommand.Parameters[0].Value = (object)claim.Id ?? DBNull.Value;
            insertClaimDbCommand.Parameters[1].Value = (object)claim.Content ?? DBNull.Value;
            insertClaimDbCommand.Parameters[2].Value = (object)claim.CreationTime ?? DBNull.Value;
            insertClaimDbCommand.Parameters[3].Value = (object)claim.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertClaimDbCommand.CommandText}\r\n-- Id: {claim.Id}\r\n-- Content: {claim.Content}\r\n-- CreationTime: {claim.CreationTime}\r\n-- CreationUserId: {claim.CreationUserId}");
            insertClaimDbCommand.ExecuteNonQuery();
        }

        public void Update(Claim claim)
        {
            if (ConnectIfNecessary() || updateClaimDbCommand == null)
            {
                updateClaimDbCommand = dbConnection.CreateCommand();
                updateClaimDbCommand.Transaction = dbTransaction;
                updateClaimDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateClaimDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateClaimDbCommand.Parameters.Add(dp);
                dp = updateClaimDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateClaimDbCommand.Parameters.Add(dp);
                dp = updateClaimDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateClaimDbCommand.Parameters.Add(dp);
                dp = updateClaimDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateClaimDbCommand.Parameters.Add(dp);
                updateClaimDbCommand.Prepare();
            }
            updateClaimDbCommand.Transaction = dbTransaction;
            updateClaimDbCommand.Parameters[0].Value = (object)claim.Content ?? DBNull.Value;
            updateClaimDbCommand.Parameters[1].Value = (object)claim.CreationTime ?? DBNull.Value;
            updateClaimDbCommand.Parameters[2].Value = (object)claim.CreationUserId ?? DBNull.Value;
            updateClaimDbCommand.Parameters[3].Value = claim.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateClaimDbCommand.CommandText}\r\n-- Content: {claim.Content}\r\n-- CreationTime: {claim.CreationTime}\r\n-- CreationUserId: {claim.CreationUserId}\r\n-- Id: {claim.Id}");
            updateClaimDbCommand.ExecuteNonQuery();
        }

        public void Delete(Claim claim)
        {
            if (ConnectIfNecessary() || deleteClaimDbCommand == null)
            {
                deleteClaimDbCommand = dbConnection.CreateCommand();
                deleteClaimDbCommand.Transaction = dbTransaction;
                deleteClaimDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")} WHERE {Quote("id")} = @Id";
                var dp = deleteClaimDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteClaimDbCommand.Parameters.Add(dp);
                deleteClaimDbCommand.Prepare();
            }
            deleteClaimDbCommand.Transaction = dbTransaction;
            deleteClaimDbCommand.Parameters[0].Value = claim.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteClaimDbCommand.CommandText}\r\n-- Id: {claim.Id}");
            deleteClaimDbCommand.ExecuteNonQuery();
        }

        public void Insert(ClassificationType classificationType)
        {
            if (classificationType.Id == null) classificationType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertClassificationTypeDbCommand == null)
            {
                insertClassificationTypeDbCommand = dbConnection.CreateCommand();
                insertClassificationTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertClassificationTypeDbCommand.Parameters.Add(dp);
                dp = insertClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertClassificationTypeDbCommand.Parameters.Add(dp);
                dp = insertClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertClassificationTypeDbCommand.Parameters.Add(dp);
                dp = insertClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertClassificationTypeDbCommand.Parameters.Add(dp);
                insertClassificationTypeDbCommand.Transaction = dbTransaction;
                insertClassificationTypeDbCommand.Prepare();
            }
            insertClassificationTypeDbCommand.Transaction = dbTransaction;
            insertClassificationTypeDbCommand.Parameters[0].Value = (object)classificationType.Id ?? DBNull.Value;
            insertClassificationTypeDbCommand.Parameters[1].Value = (object)classificationType.Content ?? DBNull.Value;
            insertClassificationTypeDbCommand.Parameters[2].Value = (object)classificationType.CreationTime ?? DBNull.Value;
            insertClassificationTypeDbCommand.Parameters[3].Value = (object)classificationType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertClassificationTypeDbCommand.CommandText}\r\n-- Id: {classificationType.Id}\r\n-- Content: {classificationType.Content}\r\n-- CreationTime: {classificationType.CreationTime}\r\n-- CreationUserId: {classificationType.CreationUserId}");
            insertClassificationTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(ClassificationType classificationType)
        {
            if (ConnectIfNecessary() || updateClassificationTypeDbCommand == null)
            {
                updateClassificationTypeDbCommand = dbConnection.CreateCommand();
                updateClassificationTypeDbCommand.Transaction = dbTransaction;
                updateClassificationTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateClassificationTypeDbCommand.Parameters.Add(dp);
                dp = updateClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateClassificationTypeDbCommand.Parameters.Add(dp);
                dp = updateClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateClassificationTypeDbCommand.Parameters.Add(dp);
                dp = updateClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateClassificationTypeDbCommand.Parameters.Add(dp);
                updateClassificationTypeDbCommand.Prepare();
            }
            updateClassificationTypeDbCommand.Transaction = dbTransaction;
            updateClassificationTypeDbCommand.Parameters[0].Value = (object)classificationType.Content ?? DBNull.Value;
            updateClassificationTypeDbCommand.Parameters[1].Value = (object)classificationType.CreationTime ?? DBNull.Value;
            updateClassificationTypeDbCommand.Parameters[2].Value = (object)classificationType.CreationUserId ?? DBNull.Value;
            updateClassificationTypeDbCommand.Parameters[3].Value = classificationType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateClassificationTypeDbCommand.CommandText}\r\n-- Content: {classificationType.Content}\r\n-- CreationTime: {classificationType.CreationTime}\r\n-- CreationUserId: {classificationType.CreationUserId}\r\n-- Id: {classificationType.Id}");
            updateClassificationTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(ClassificationType classificationType)
        {
            if (ConnectIfNecessary() || deleteClassificationTypeDbCommand == null)
            {
                deleteClassificationTypeDbCommand = dbConnection.CreateCommand();
                deleteClassificationTypeDbCommand.Transaction = dbTransaction;
                deleteClassificationTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteClassificationTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteClassificationTypeDbCommand.Parameters.Add(dp);
                deleteClassificationTypeDbCommand.Prepare();
            }
            deleteClassificationTypeDbCommand.Transaction = dbTransaction;
            deleteClassificationTypeDbCommand.Parameters[0].Value = classificationType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteClassificationTypeDbCommand.CommandText}\r\n-- Id: {classificationType.Id}");
            deleteClassificationTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Comment comment)
        {
            if (comment.Id == null) comment.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCommentDbCommand == null)
            {
                insertCommentDbCommand = dbConnection.CreateCommand();
                insertCommentDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertCommentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCommentDbCommand.Parameters.Add(dp);
                dp = insertCommentDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCommentDbCommand.Parameters.Add(dp);
                dp = insertCommentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertCommentDbCommand.Parameters.Add(dp);
                dp = insertCommentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCommentDbCommand.Parameters.Add(dp);
                insertCommentDbCommand.Transaction = dbTransaction;
                insertCommentDbCommand.Prepare();
            }
            insertCommentDbCommand.Transaction = dbTransaction;
            insertCommentDbCommand.Parameters[0].Value = (object)comment.Id ?? DBNull.Value;
            insertCommentDbCommand.Parameters[1].Value = (object)comment.Content ?? DBNull.Value;
            insertCommentDbCommand.Parameters[2].Value = (object)comment.CreationTime ?? DBNull.Value;
            insertCommentDbCommand.Parameters[3].Value = (object)comment.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCommentDbCommand.CommandText}\r\n-- Id: {comment.Id}\r\n-- Content: {comment.Content}\r\n-- CreationTime: {comment.CreationTime}\r\n-- CreationUserId: {comment.CreationUserId}");
            insertCommentDbCommand.ExecuteNonQuery();
        }

        public void Update(Comment comment)
        {
            if (ConnectIfNecessary() || updateCommentDbCommand == null)
            {
                updateCommentDbCommand = dbConnection.CreateCommand();
                updateCommentDbCommand.Transaction = dbTransaction;
                updateCommentDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateCommentDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCommentDbCommand.Parameters.Add(dp);
                dp = updateCommentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateCommentDbCommand.Parameters.Add(dp);
                dp = updateCommentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCommentDbCommand.Parameters.Add(dp);
                dp = updateCommentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCommentDbCommand.Parameters.Add(dp);
                updateCommentDbCommand.Prepare();
            }
            updateCommentDbCommand.Transaction = dbTransaction;
            updateCommentDbCommand.Parameters[0].Value = (object)comment.Content ?? DBNull.Value;
            updateCommentDbCommand.Parameters[1].Value = (object)comment.CreationTime ?? DBNull.Value;
            updateCommentDbCommand.Parameters[2].Value = (object)comment.CreationUserId ?? DBNull.Value;
            updateCommentDbCommand.Parameters[3].Value = comment.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCommentDbCommand.CommandText}\r\n-- Content: {comment.Content}\r\n-- CreationTime: {comment.CreationTime}\r\n-- CreationUserId: {comment.CreationUserId}\r\n-- Id: {comment.Id}");
            updateCommentDbCommand.ExecuteNonQuery();
        }

        public void Delete(Comment comment)
        {
            if (ConnectIfNecessary() || deleteCommentDbCommand == null)
            {
                deleteCommentDbCommand = dbConnection.CreateCommand();
                deleteCommentDbCommand.Transaction = dbTransaction;
                deleteCommentDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")} WHERE {Quote("id")} = @Id";
                var dp = deleteCommentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCommentDbCommand.Parameters.Add(dp);
                deleteCommentDbCommand.Prepare();
            }
            deleteCommentDbCommand.Transaction = dbTransaction;
            deleteCommentDbCommand.Parameters[0].Value = comment.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCommentDbCommand.CommandText}\r\n-- Id: {comment.Id}");
            deleteCommentDbCommand.ExecuteNonQuery();
        }

        public void Insert(Contact contact)
        {
            if (contact.Id == null) contact.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertContactDbCommand == null)
            {
                insertContactDbCommand = dbConnection.CreateCommand();
                insertContactDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertContactDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertContactDbCommand.Parameters.Add(dp);
                dp = insertContactDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContactDbCommand.Parameters.Add(dp);
                dp = insertContactDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertContactDbCommand.Parameters.Add(dp);
                dp = insertContactDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContactDbCommand.Parameters.Add(dp);
                insertContactDbCommand.Transaction = dbTransaction;
                insertContactDbCommand.Prepare();
            }
            insertContactDbCommand.Transaction = dbTransaction;
            insertContactDbCommand.Parameters[0].Value = (object)contact.Id ?? DBNull.Value;
            insertContactDbCommand.Parameters[1].Value = (object)contact.Content ?? DBNull.Value;
            insertContactDbCommand.Parameters[2].Value = (object)contact.CreationTime ?? DBNull.Value;
            insertContactDbCommand.Parameters[3].Value = (object)contact.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertContactDbCommand.CommandText}\r\n-- Id: {contact.Id}\r\n-- Content: {contact.Content}\r\n-- CreationTime: {contact.CreationTime}\r\n-- CreationUserId: {contact.CreationUserId}");
            insertContactDbCommand.ExecuteNonQuery();
        }

        public void Update(Contact contact)
        {
            if (ConnectIfNecessary() || updateContactDbCommand == null)
            {
                updateContactDbCommand = dbConnection.CreateCommand();
                updateContactDbCommand.Transaction = dbTransaction;
                updateContactDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateContactDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContactDbCommand.Parameters.Add(dp);
                dp = updateContactDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateContactDbCommand.Parameters.Add(dp);
                dp = updateContactDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContactDbCommand.Parameters.Add(dp);
                dp = updateContactDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateContactDbCommand.Parameters.Add(dp);
                updateContactDbCommand.Prepare();
            }
            updateContactDbCommand.Transaction = dbTransaction;
            updateContactDbCommand.Parameters[0].Value = (object)contact.Content ?? DBNull.Value;
            updateContactDbCommand.Parameters[1].Value = (object)contact.CreationTime ?? DBNull.Value;
            updateContactDbCommand.Parameters[2].Value = (object)contact.CreationUserId ?? DBNull.Value;
            updateContactDbCommand.Parameters[3].Value = contact.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateContactDbCommand.CommandText}\r\n-- Content: {contact.Content}\r\n-- CreationTime: {contact.CreationTime}\r\n-- CreationUserId: {contact.CreationUserId}\r\n-- Id: {contact.Id}");
            updateContactDbCommand.ExecuteNonQuery();
        }

        public void Delete(Contact contact)
        {
            if (ConnectIfNecessary() || deleteContactDbCommand == null)
            {
                deleteContactDbCommand = dbConnection.CreateCommand();
                deleteContactDbCommand.Transaction = dbTransaction;
                deleteContactDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")} WHERE {Quote("id")} = @Id";
                var dp = deleteContactDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteContactDbCommand.Parameters.Add(dp);
                deleteContactDbCommand.Prepare();
            }
            deleteContactDbCommand.Transaction = dbTransaction;
            deleteContactDbCommand.Parameters[0].Value = contact.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteContactDbCommand.CommandText}\r\n-- Id: {contact.Id}");
            deleteContactDbCommand.ExecuteNonQuery();
        }

        public void Insert(ContactCategory contactCategory)
        {
            if (contactCategory.Id == null) contactCategory.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertContactCategoryDbCommand == null)
            {
                insertContactCategoryDbCommand = dbConnection.CreateCommand();
                insertContactCategoryDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertContactCategoryDbCommand.Parameters.Add(dp);
                dp = insertContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContactCategoryDbCommand.Parameters.Add(dp);
                dp = insertContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertContactCategoryDbCommand.Parameters.Add(dp);
                dp = insertContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContactCategoryDbCommand.Parameters.Add(dp);
                insertContactCategoryDbCommand.Transaction = dbTransaction;
                insertContactCategoryDbCommand.Prepare();
            }
            insertContactCategoryDbCommand.Transaction = dbTransaction;
            insertContactCategoryDbCommand.Parameters[0].Value = (object)contactCategory.Id ?? DBNull.Value;
            insertContactCategoryDbCommand.Parameters[1].Value = (object)contactCategory.Content ?? DBNull.Value;
            insertContactCategoryDbCommand.Parameters[2].Value = (object)contactCategory.CreationTime ?? DBNull.Value;
            insertContactCategoryDbCommand.Parameters[3].Value = (object)contactCategory.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertContactCategoryDbCommand.CommandText}\r\n-- Id: {contactCategory.Id}\r\n-- Content: {contactCategory.Content}\r\n-- CreationTime: {contactCategory.CreationTime}\r\n-- CreationUserId: {contactCategory.CreationUserId}");
            insertContactCategoryDbCommand.ExecuteNonQuery();
        }

        public void Update(ContactCategory contactCategory)
        {
            if (ConnectIfNecessary() || updateContactCategoryDbCommand == null)
            {
                updateContactCategoryDbCommand = dbConnection.CreateCommand();
                updateContactCategoryDbCommand.Transaction = dbTransaction;
                updateContactCategoryDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContactCategoryDbCommand.Parameters.Add(dp);
                dp = updateContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateContactCategoryDbCommand.Parameters.Add(dp);
                dp = updateContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContactCategoryDbCommand.Parameters.Add(dp);
                dp = updateContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateContactCategoryDbCommand.Parameters.Add(dp);
                updateContactCategoryDbCommand.Prepare();
            }
            updateContactCategoryDbCommand.Transaction = dbTransaction;
            updateContactCategoryDbCommand.Parameters[0].Value = (object)contactCategory.Content ?? DBNull.Value;
            updateContactCategoryDbCommand.Parameters[1].Value = (object)contactCategory.CreationTime ?? DBNull.Value;
            updateContactCategoryDbCommand.Parameters[2].Value = (object)contactCategory.CreationUserId ?? DBNull.Value;
            updateContactCategoryDbCommand.Parameters[3].Value = contactCategory.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateContactCategoryDbCommand.CommandText}\r\n-- Content: {contactCategory.Content}\r\n-- CreationTime: {contactCategory.CreationTime}\r\n-- CreationUserId: {contactCategory.CreationUserId}\r\n-- Id: {contactCategory.Id}");
            updateContactCategoryDbCommand.ExecuteNonQuery();
        }

        public void Delete(ContactCategory contactCategory)
        {
            if (ConnectIfNecessary() || deleteContactCategoryDbCommand == null)
            {
                deleteContactCategoryDbCommand = dbConnection.CreateCommand();
                deleteContactCategoryDbCommand.Transaction = dbTransaction;
                deleteContactCategoryDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")} WHERE {Quote("id")} = @Id";
                var dp = deleteContactCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteContactCategoryDbCommand.Parameters.Add(dp);
                deleteContactCategoryDbCommand.Prepare();
            }
            deleteContactCategoryDbCommand.Transaction = dbTransaction;
            deleteContactCategoryDbCommand.Parameters[0].Value = contactCategory.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteContactCategoryDbCommand.CommandText}\r\n-- Id: {contactCategory.Id}");
            deleteContactCategoryDbCommand.ExecuteNonQuery();
        }

        public void Insert(ContributorNameType contributorNameType)
        {
            if (contributorNameType.Id == null) contributorNameType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertContributorNameTypeDbCommand == null)
            {
                insertContributorNameTypeDbCommand = dbConnection.CreateCommand();
                insertContributorNameTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertContributorNameTypeDbCommand.Parameters.Add(dp);
                dp = insertContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContributorNameTypeDbCommand.Parameters.Add(dp);
                dp = insertContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertContributorNameTypeDbCommand.Parameters.Add(dp);
                dp = insertContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContributorNameTypeDbCommand.Parameters.Add(dp);
                insertContributorNameTypeDbCommand.Transaction = dbTransaction;
                insertContributorNameTypeDbCommand.Prepare();
            }
            insertContributorNameTypeDbCommand.Transaction = dbTransaction;
            insertContributorNameTypeDbCommand.Parameters[0].Value = (object)contributorNameType.Id ?? DBNull.Value;
            insertContributorNameTypeDbCommand.Parameters[1].Value = (object)contributorNameType.Content ?? DBNull.Value;
            insertContributorNameTypeDbCommand.Parameters[2].Value = (object)contributorNameType.CreationTime ?? DBNull.Value;
            insertContributorNameTypeDbCommand.Parameters[3].Value = (object)contributorNameType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertContributorNameTypeDbCommand.CommandText}\r\n-- Id: {contributorNameType.Id}\r\n-- Content: {contributorNameType.Content}\r\n-- CreationTime: {contributorNameType.CreationTime}\r\n-- CreationUserId: {contributorNameType.CreationUserId}");
            insertContributorNameTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(ContributorNameType contributorNameType)
        {
            if (ConnectIfNecessary() || updateContributorNameTypeDbCommand == null)
            {
                updateContributorNameTypeDbCommand = dbConnection.CreateCommand();
                updateContributorNameTypeDbCommand.Transaction = dbTransaction;
                updateContributorNameTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContributorNameTypeDbCommand.Parameters.Add(dp);
                dp = updateContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateContributorNameTypeDbCommand.Parameters.Add(dp);
                dp = updateContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContributorNameTypeDbCommand.Parameters.Add(dp);
                dp = updateContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateContributorNameTypeDbCommand.Parameters.Add(dp);
                updateContributorNameTypeDbCommand.Prepare();
            }
            updateContributorNameTypeDbCommand.Transaction = dbTransaction;
            updateContributorNameTypeDbCommand.Parameters[0].Value = (object)contributorNameType.Content ?? DBNull.Value;
            updateContributorNameTypeDbCommand.Parameters[1].Value = (object)contributorNameType.CreationTime ?? DBNull.Value;
            updateContributorNameTypeDbCommand.Parameters[2].Value = (object)contributorNameType.CreationUserId ?? DBNull.Value;
            updateContributorNameTypeDbCommand.Parameters[3].Value = contributorNameType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateContributorNameTypeDbCommand.CommandText}\r\n-- Content: {contributorNameType.Content}\r\n-- CreationTime: {contributorNameType.CreationTime}\r\n-- CreationUserId: {contributorNameType.CreationUserId}\r\n-- Id: {contributorNameType.Id}");
            updateContributorNameTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(ContributorNameType contributorNameType)
        {
            if (ConnectIfNecessary() || deleteContributorNameTypeDbCommand == null)
            {
                deleteContributorNameTypeDbCommand = dbConnection.CreateCommand();
                deleteContributorNameTypeDbCommand.Transaction = dbTransaction;
                deleteContributorNameTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteContributorNameTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteContributorNameTypeDbCommand.Parameters.Add(dp);
                deleteContributorNameTypeDbCommand.Prepare();
            }
            deleteContributorNameTypeDbCommand.Transaction = dbTransaction;
            deleteContributorNameTypeDbCommand.Parameters[0].Value = contributorNameType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteContributorNameTypeDbCommand.CommandText}\r\n-- Id: {contributorNameType.Id}");
            deleteContributorNameTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(ContributorType contributorType)
        {
            if (contributorType.Id == null) contributorType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertContributorTypeDbCommand == null)
            {
                insertContributorTypeDbCommand = dbConnection.CreateCommand();
                insertContributorTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_type")} ({Quote("_id")}, {Quote("jsonb")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")})";
                var dp = insertContributorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertContributorTypeDbCommand.Parameters.Add(dp);
                dp = insertContributorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertContributorTypeDbCommand.Parameters.Add(dp);
                insertContributorTypeDbCommand.Transaction = dbTransaction;
                insertContributorTypeDbCommand.Prepare();
            }
            insertContributorTypeDbCommand.Transaction = dbTransaction;
            insertContributorTypeDbCommand.Parameters[0].Value = (object)contributorType.Id ?? DBNull.Value;
            insertContributorTypeDbCommand.Parameters[1].Value = (object)contributorType.Content ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertContributorTypeDbCommand.CommandText}\r\n-- Id: {contributorType.Id}\r\n-- Content: {contributorType.Content}");
            insertContributorTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(ContributorType contributorType)
        {
            if (ConnectIfNecessary() || updateContributorTypeDbCommand == null)
            {
                updateContributorTypeDbCommand = dbConnection.CreateCommand();
                updateContributorTypeDbCommand.Transaction = dbTransaction;
                updateContributorTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")} WHERE {Quote("_id")} = @Id";
                var dp = updateContributorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateContributorTypeDbCommand.Parameters.Add(dp);
                dp = updateContributorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateContributorTypeDbCommand.Parameters.Add(dp);
                updateContributorTypeDbCommand.Prepare();
            }
            updateContributorTypeDbCommand.Transaction = dbTransaction;
            updateContributorTypeDbCommand.Parameters[0].Value = (object)contributorType.Content ?? DBNull.Value;
            updateContributorTypeDbCommand.Parameters[1].Value = contributorType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateContributorTypeDbCommand.CommandText}\r\n-- Content: {contributorType.Content}\r\n-- Id: {contributorType.Id}");
            updateContributorTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(ContributorType contributorType)
        {
            if (ConnectIfNecessary() || deleteContributorTypeDbCommand == null)
            {
                deleteContributorTypeDbCommand = dbConnection.CreateCommand();
                deleteContributorTypeDbCommand.Transaction = dbTransaction;
                deleteContributorTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteContributorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteContributorTypeDbCommand.Parameters.Add(dp);
                deleteContributorTypeDbCommand.Prepare();
            }
            deleteContributorTypeDbCommand.Transaction = dbTransaction;
            deleteContributorTypeDbCommand.Parameters[0].Value = contributorType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteContributorTypeDbCommand.CommandText}\r\n-- Id: {contributorType.Id}");
            deleteContributorTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Cost cost)
        {
            if (cost.Id == null) cost.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertCostDbCommand == null)
            {
                insertCostDbCommand = dbConnection.CreateCommand();
                insertCostDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertCostDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertCostDbCommand.Parameters.Add(dp);
                dp = insertCostDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCostDbCommand.Parameters.Add(dp);
                dp = insertCostDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertCostDbCommand.Parameters.Add(dp);
                dp = insertCostDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertCostDbCommand.Parameters.Add(dp);
                insertCostDbCommand.Transaction = dbTransaction;
                insertCostDbCommand.Prepare();
            }
            insertCostDbCommand.Transaction = dbTransaction;
            insertCostDbCommand.Parameters[0].Value = (object)cost.Id ?? DBNull.Value;
            insertCostDbCommand.Parameters[1].Value = (object)cost.Content ?? DBNull.Value;
            insertCostDbCommand.Parameters[2].Value = (object)cost.CreationTime ?? DBNull.Value;
            insertCostDbCommand.Parameters[3].Value = (object)cost.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertCostDbCommand.CommandText}\r\n-- Id: {cost.Id}\r\n-- Content: {cost.Content}\r\n-- CreationTime: {cost.CreationTime}\r\n-- CreationUserId: {cost.CreationUserId}");
            insertCostDbCommand.ExecuteNonQuery();
        }

        public void Update(Cost cost)
        {
            if (ConnectIfNecessary() || updateCostDbCommand == null)
            {
                updateCostDbCommand = dbConnection.CreateCommand();
                updateCostDbCommand.Transaction = dbTransaction;
                updateCostDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateCostDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCostDbCommand.Parameters.Add(dp);
                dp = updateCostDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateCostDbCommand.Parameters.Add(dp);
                dp = updateCostDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateCostDbCommand.Parameters.Add(dp);
                dp = updateCostDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateCostDbCommand.Parameters.Add(dp);
                updateCostDbCommand.Prepare();
            }
            updateCostDbCommand.Transaction = dbTransaction;
            updateCostDbCommand.Parameters[0].Value = (object)cost.Content ?? DBNull.Value;
            updateCostDbCommand.Parameters[1].Value = (object)cost.CreationTime ?? DBNull.Value;
            updateCostDbCommand.Parameters[2].Value = (object)cost.CreationUserId ?? DBNull.Value;
            updateCostDbCommand.Parameters[3].Value = cost.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateCostDbCommand.CommandText}\r\n-- Content: {cost.Content}\r\n-- CreationTime: {cost.CreationTime}\r\n-- CreationUserId: {cost.CreationUserId}\r\n-- Id: {cost.Id}");
            updateCostDbCommand.ExecuteNonQuery();
        }

        public void Delete(Cost cost)
        {
            if (ConnectIfNecessary() || deleteCostDbCommand == null)
            {
                deleteCostDbCommand = dbConnection.CreateCommand();
                deleteCostDbCommand.Transaction = dbTransaction;
                deleteCostDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")} WHERE {Quote("id")} = @Id";
                var dp = deleteCostDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteCostDbCommand.Parameters.Add(dp);
                deleteCostDbCommand.Prepare();
            }
            deleteCostDbCommand.Transaction = dbTransaction;
            deleteCostDbCommand.Parameters[0].Value = cost.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteCostDbCommand.CommandText}\r\n-- Id: {cost.Id}");
            deleteCostDbCommand.ExecuteNonQuery();
        }

        public void Insert(Detail detail)
        {
            if (detail.Id == null) detail.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertDetailDbCommand == null)
            {
                insertDetailDbCommand = dbConnection.CreateCommand();
                insertDetailDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertDetailDbCommand.Parameters.Add(dp);
                dp = insertDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertDetailDbCommand.Parameters.Add(dp);
                dp = insertDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertDetailDbCommand.Parameters.Add(dp);
                dp = insertDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertDetailDbCommand.Parameters.Add(dp);
                insertDetailDbCommand.Transaction = dbTransaction;
                insertDetailDbCommand.Prepare();
            }
            insertDetailDbCommand.Transaction = dbTransaction;
            insertDetailDbCommand.Parameters[0].Value = (object)detail.Id ?? DBNull.Value;
            insertDetailDbCommand.Parameters[1].Value = (object)detail.Content ?? DBNull.Value;
            insertDetailDbCommand.Parameters[2].Value = (object)detail.CreationTime ?? DBNull.Value;
            insertDetailDbCommand.Parameters[3].Value = (object)detail.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertDetailDbCommand.CommandText}\r\n-- Id: {detail.Id}\r\n-- Content: {detail.Content}\r\n-- CreationTime: {detail.CreationTime}\r\n-- CreationUserId: {detail.CreationUserId}");
            insertDetailDbCommand.ExecuteNonQuery();
        }

        public void Update(Detail detail)
        {
            if (ConnectIfNecessary() || updateDetailDbCommand == null)
            {
                updateDetailDbCommand = dbConnection.CreateCommand();
                updateDetailDbCommand.Transaction = dbTransaction;
                updateDetailDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateDetailDbCommand.Parameters.Add(dp);
                dp = updateDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateDetailDbCommand.Parameters.Add(dp);
                dp = updateDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateDetailDbCommand.Parameters.Add(dp);
                dp = updateDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateDetailDbCommand.Parameters.Add(dp);
                updateDetailDbCommand.Prepare();
            }
            updateDetailDbCommand.Transaction = dbTransaction;
            updateDetailDbCommand.Parameters[0].Value = (object)detail.Content ?? DBNull.Value;
            updateDetailDbCommand.Parameters[1].Value = (object)detail.CreationTime ?? DBNull.Value;
            updateDetailDbCommand.Parameters[2].Value = (object)detail.CreationUserId ?? DBNull.Value;
            updateDetailDbCommand.Parameters[3].Value = detail.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateDetailDbCommand.CommandText}\r\n-- Content: {detail.Content}\r\n-- CreationTime: {detail.CreationTime}\r\n-- CreationUserId: {detail.CreationUserId}\r\n-- Id: {detail.Id}");
            updateDetailDbCommand.ExecuteNonQuery();
        }

        public void Delete(Detail detail)
        {
            if (ConnectIfNecessary() || deleteDetailDbCommand == null)
            {
                deleteDetailDbCommand = dbConnection.CreateCommand();
                deleteDetailDbCommand.Transaction = dbTransaction;
                deleteDetailDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")} WHERE {Quote("id")} = @Id";
                var dp = deleteDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteDetailDbCommand.Parameters.Add(dp);
                deleteDetailDbCommand.Prepare();
            }
            deleteDetailDbCommand.Transaction = dbTransaction;
            deleteDetailDbCommand.Parameters[0].Value = detail.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteDetailDbCommand.CommandText}\r\n-- Id: {detail.Id}");
            deleteDetailDbCommand.ExecuteNonQuery();
        }

        public void Insert(ElectronicAccessRelationship electronicAccessRelationship)
        {
            if (electronicAccessRelationship.Id == null) electronicAccessRelationship.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertElectronicAccessRelationshipDbCommand == null)
            {
                insertElectronicAccessRelationshipDbCommand = dbConnection.CreateCommand();
                insertElectronicAccessRelationshipDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                dp = insertElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                dp = insertElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                dp = insertElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                insertElectronicAccessRelationshipDbCommand.Transaction = dbTransaction;
                insertElectronicAccessRelationshipDbCommand.Prepare();
            }
            insertElectronicAccessRelationshipDbCommand.Transaction = dbTransaction;
            insertElectronicAccessRelationshipDbCommand.Parameters[0].Value = (object)electronicAccessRelationship.Id ?? DBNull.Value;
            insertElectronicAccessRelationshipDbCommand.Parameters[1].Value = (object)electronicAccessRelationship.Content ?? DBNull.Value;
            insertElectronicAccessRelationshipDbCommand.Parameters[2].Value = (object)electronicAccessRelationship.CreationTime ?? DBNull.Value;
            insertElectronicAccessRelationshipDbCommand.Parameters[3].Value = (object)electronicAccessRelationship.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertElectronicAccessRelationshipDbCommand.CommandText}\r\n-- Id: {electronicAccessRelationship.Id}\r\n-- Content: {electronicAccessRelationship.Content}\r\n-- CreationTime: {electronicAccessRelationship.CreationTime}\r\n-- CreationUserId: {electronicAccessRelationship.CreationUserId}");
            insertElectronicAccessRelationshipDbCommand.ExecuteNonQuery();
        }

        public void Update(ElectronicAccessRelationship electronicAccessRelationship)
        {
            if (ConnectIfNecessary() || updateElectronicAccessRelationshipDbCommand == null)
            {
                updateElectronicAccessRelationshipDbCommand = dbConnection.CreateCommand();
                updateElectronicAccessRelationshipDbCommand.Transaction = dbTransaction;
                updateElectronicAccessRelationshipDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                dp = updateElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                dp = updateElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                dp = updateElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                updateElectronicAccessRelationshipDbCommand.Prepare();
            }
            updateElectronicAccessRelationshipDbCommand.Transaction = dbTransaction;
            updateElectronicAccessRelationshipDbCommand.Parameters[0].Value = (object)electronicAccessRelationship.Content ?? DBNull.Value;
            updateElectronicAccessRelationshipDbCommand.Parameters[1].Value = (object)electronicAccessRelationship.CreationTime ?? DBNull.Value;
            updateElectronicAccessRelationshipDbCommand.Parameters[2].Value = (object)electronicAccessRelationship.CreationUserId ?? DBNull.Value;
            updateElectronicAccessRelationshipDbCommand.Parameters[3].Value = electronicAccessRelationship.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateElectronicAccessRelationshipDbCommand.CommandText}\r\n-- Content: {electronicAccessRelationship.Content}\r\n-- CreationTime: {electronicAccessRelationship.CreationTime}\r\n-- CreationUserId: {electronicAccessRelationship.CreationUserId}\r\n-- Id: {electronicAccessRelationship.Id}");
            updateElectronicAccessRelationshipDbCommand.ExecuteNonQuery();
        }

        public void Delete(ElectronicAccessRelationship electronicAccessRelationship)
        {
            if (ConnectIfNecessary() || deleteElectronicAccessRelationshipDbCommand == null)
            {
                deleteElectronicAccessRelationshipDbCommand = dbConnection.CreateCommand();
                deleteElectronicAccessRelationshipDbCommand.Transaction = dbTransaction;
                deleteElectronicAccessRelationshipDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")} WHERE {Quote("_id")} = @Id";
                var dp = deleteElectronicAccessRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteElectronicAccessRelationshipDbCommand.Parameters.Add(dp);
                deleteElectronicAccessRelationshipDbCommand.Prepare();
            }
            deleteElectronicAccessRelationshipDbCommand.Transaction = dbTransaction;
            deleteElectronicAccessRelationshipDbCommand.Parameters[0].Value = electronicAccessRelationship.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteElectronicAccessRelationshipDbCommand.CommandText}\r\n-- Id: {electronicAccessRelationship.Id}");
            deleteElectronicAccessRelationshipDbCommand.ExecuteNonQuery();
        }

        public void Insert(Email email)
        {
            if (email.Id == null) email.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertEmailDbCommand == null)
            {
                insertEmailDbCommand = dbConnection.CreateCommand();
                insertEmailDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertEmailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertEmailDbCommand.Parameters.Add(dp);
                dp = insertEmailDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertEmailDbCommand.Parameters.Add(dp);
                dp = insertEmailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertEmailDbCommand.Parameters.Add(dp);
                dp = insertEmailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertEmailDbCommand.Parameters.Add(dp);
                insertEmailDbCommand.Transaction = dbTransaction;
                insertEmailDbCommand.Prepare();
            }
            insertEmailDbCommand.Transaction = dbTransaction;
            insertEmailDbCommand.Parameters[0].Value = (object)email.Id ?? DBNull.Value;
            insertEmailDbCommand.Parameters[1].Value = (object)email.Content ?? DBNull.Value;
            insertEmailDbCommand.Parameters[2].Value = (object)email.CreationTime ?? DBNull.Value;
            insertEmailDbCommand.Parameters[3].Value = (object)email.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertEmailDbCommand.CommandText}\r\n-- Id: {email.Id}\r\n-- Content: {email.Content}\r\n-- CreationTime: {email.CreationTime}\r\n-- CreationUserId: {email.CreationUserId}");
            insertEmailDbCommand.ExecuteNonQuery();
        }

        public void Update(Email email)
        {
            if (ConnectIfNecessary() || updateEmailDbCommand == null)
            {
                updateEmailDbCommand = dbConnection.CreateCommand();
                updateEmailDbCommand.Transaction = dbTransaction;
                updateEmailDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateEmailDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateEmailDbCommand.Parameters.Add(dp);
                dp = updateEmailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateEmailDbCommand.Parameters.Add(dp);
                dp = updateEmailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateEmailDbCommand.Parameters.Add(dp);
                dp = updateEmailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateEmailDbCommand.Parameters.Add(dp);
                updateEmailDbCommand.Prepare();
            }
            updateEmailDbCommand.Transaction = dbTransaction;
            updateEmailDbCommand.Parameters[0].Value = (object)email.Content ?? DBNull.Value;
            updateEmailDbCommand.Parameters[1].Value = (object)email.CreationTime ?? DBNull.Value;
            updateEmailDbCommand.Parameters[2].Value = (object)email.CreationUserId ?? DBNull.Value;
            updateEmailDbCommand.Parameters[3].Value = email.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateEmailDbCommand.CommandText}\r\n-- Content: {email.Content}\r\n-- CreationTime: {email.CreationTime}\r\n-- CreationUserId: {email.CreationUserId}\r\n-- Id: {email.Id}");
            updateEmailDbCommand.ExecuteNonQuery();
        }

        public void Delete(Email email)
        {
            if (ConnectIfNecessary() || deleteEmailDbCommand == null)
            {
                deleteEmailDbCommand = dbConnection.CreateCommand();
                deleteEmailDbCommand.Transaction = dbTransaction;
                deleteEmailDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")} WHERE {Quote("id")} = @Id";
                var dp = deleteEmailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteEmailDbCommand.Parameters.Add(dp);
                deleteEmailDbCommand.Prepare();
            }
            deleteEmailDbCommand.Transaction = dbTransaction;
            deleteEmailDbCommand.Parameters[0].Value = email.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteEmailDbCommand.CommandText}\r\n-- Id: {email.Id}");
            deleteEmailDbCommand.ExecuteNonQuery();
        }

        public void Insert(Eresource eresource)
        {
            if (eresource.Id == null) eresource.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertEresourceDbCommand == null)
            {
                insertEresourceDbCommand = dbConnection.CreateCommand();
                insertEresourceDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertEresourceDbCommand.Parameters.Add(dp);
                dp = insertEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertEresourceDbCommand.Parameters.Add(dp);
                dp = insertEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertEresourceDbCommand.Parameters.Add(dp);
                dp = insertEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertEresourceDbCommand.Parameters.Add(dp);
                insertEresourceDbCommand.Transaction = dbTransaction;
                insertEresourceDbCommand.Prepare();
            }
            insertEresourceDbCommand.Transaction = dbTransaction;
            insertEresourceDbCommand.Parameters[0].Value = (object)eresource.Id ?? DBNull.Value;
            insertEresourceDbCommand.Parameters[1].Value = (object)eresource.Content ?? DBNull.Value;
            insertEresourceDbCommand.Parameters[2].Value = (object)eresource.CreationTime ?? DBNull.Value;
            insertEresourceDbCommand.Parameters[3].Value = (object)eresource.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertEresourceDbCommand.CommandText}\r\n-- Id: {eresource.Id}\r\n-- Content: {eresource.Content}\r\n-- CreationTime: {eresource.CreationTime}\r\n-- CreationUserId: {eresource.CreationUserId}");
            insertEresourceDbCommand.ExecuteNonQuery();
        }

        public void Update(Eresource eresource)
        {
            if (ConnectIfNecessary() || updateEresourceDbCommand == null)
            {
                updateEresourceDbCommand = dbConnection.CreateCommand();
                updateEresourceDbCommand.Transaction = dbTransaction;
                updateEresourceDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateEresourceDbCommand.Parameters.Add(dp);
                dp = updateEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateEresourceDbCommand.Parameters.Add(dp);
                dp = updateEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateEresourceDbCommand.Parameters.Add(dp);
                dp = updateEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateEresourceDbCommand.Parameters.Add(dp);
                updateEresourceDbCommand.Prepare();
            }
            updateEresourceDbCommand.Transaction = dbTransaction;
            updateEresourceDbCommand.Parameters[0].Value = (object)eresource.Content ?? DBNull.Value;
            updateEresourceDbCommand.Parameters[1].Value = (object)eresource.CreationTime ?? DBNull.Value;
            updateEresourceDbCommand.Parameters[2].Value = (object)eresource.CreationUserId ?? DBNull.Value;
            updateEresourceDbCommand.Parameters[3].Value = eresource.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateEresourceDbCommand.CommandText}\r\n-- Content: {eresource.Content}\r\n-- CreationTime: {eresource.CreationTime}\r\n-- CreationUserId: {eresource.CreationUserId}\r\n-- Id: {eresource.Id}");
            updateEresourceDbCommand.ExecuteNonQuery();
        }

        public void Delete(Eresource eresource)
        {
            if (ConnectIfNecessary() || deleteEresourceDbCommand == null)
            {
                deleteEresourceDbCommand = dbConnection.CreateCommand();
                deleteEresourceDbCommand.Transaction = dbTransaction;
                deleteEresourceDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")} WHERE {Quote("id")} = @Id";
                var dp = deleteEresourceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteEresourceDbCommand.Parameters.Add(dp);
                deleteEresourceDbCommand.Prepare();
            }
            deleteEresourceDbCommand.Transaction = dbTransaction;
            deleteEresourceDbCommand.Parameters[0].Value = eresource.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteEresourceDbCommand.CommandText}\r\n-- Id: {eresource.Id}");
            deleteEresourceDbCommand.ExecuteNonQuery();
        }

        public void Insert(EventLog eventLog)
        {
            if (eventLog.Id == null) eventLog.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertEventLogDbCommand == null)
            {
                insertEventLogDbCommand = dbConnection.CreateCommand();
                insertEventLogDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertEventLogDbCommand.Parameters.Add(dp);
                dp = insertEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertEventLogDbCommand.Parameters.Add(dp);
                dp = insertEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertEventLogDbCommand.Parameters.Add(dp);
                dp = insertEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertEventLogDbCommand.Parameters.Add(dp);
                insertEventLogDbCommand.Transaction = dbTransaction;
                insertEventLogDbCommand.Prepare();
            }
            insertEventLogDbCommand.Transaction = dbTransaction;
            insertEventLogDbCommand.Parameters[0].Value = (object)eventLog.Id ?? DBNull.Value;
            insertEventLogDbCommand.Parameters[1].Value = (object)eventLog.Content ?? DBNull.Value;
            insertEventLogDbCommand.Parameters[2].Value = (object)eventLog.CreationTime ?? DBNull.Value;
            insertEventLogDbCommand.Parameters[3].Value = (object)eventLog.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertEventLogDbCommand.CommandText}\r\n-- Id: {eventLog.Id}\r\n-- Content: {eventLog.Content}\r\n-- CreationTime: {eventLog.CreationTime}\r\n-- CreationUserId: {eventLog.CreationUserId}");
            insertEventLogDbCommand.ExecuteNonQuery();
        }

        public void Update(EventLog eventLog)
        {
            if (ConnectIfNecessary() || updateEventLogDbCommand == null)
            {
                updateEventLogDbCommand = dbConnection.CreateCommand();
                updateEventLogDbCommand.Transaction = dbTransaction;
                updateEventLogDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateEventLogDbCommand.Parameters.Add(dp);
                dp = updateEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateEventLogDbCommand.Parameters.Add(dp);
                dp = updateEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateEventLogDbCommand.Parameters.Add(dp);
                dp = updateEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateEventLogDbCommand.Parameters.Add(dp);
                updateEventLogDbCommand.Prepare();
            }
            updateEventLogDbCommand.Transaction = dbTransaction;
            updateEventLogDbCommand.Parameters[0].Value = (object)eventLog.Content ?? DBNull.Value;
            updateEventLogDbCommand.Parameters[1].Value = (object)eventLog.CreationTime ?? DBNull.Value;
            updateEventLogDbCommand.Parameters[2].Value = (object)eventLog.CreationUserId ?? DBNull.Value;
            updateEventLogDbCommand.Parameters[3].Value = eventLog.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateEventLogDbCommand.CommandText}\r\n-- Content: {eventLog.Content}\r\n-- CreationTime: {eventLog.CreationTime}\r\n-- CreationUserId: {eventLog.CreationUserId}\r\n-- Id: {eventLog.Id}");
            updateEventLogDbCommand.ExecuteNonQuery();
        }

        public void Delete(EventLog eventLog)
        {
            if (ConnectIfNecessary() || deleteEventLogDbCommand == null)
            {
                deleteEventLogDbCommand = dbConnection.CreateCommand();
                deleteEventLogDbCommand.Transaction = dbTransaction;
                deleteEventLogDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")} WHERE {Quote("_id")} = @Id";
                var dp = deleteEventLogDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteEventLogDbCommand.Parameters.Add(dp);
                deleteEventLogDbCommand.Prepare();
            }
            deleteEventLogDbCommand.Transaction = dbTransaction;
            deleteEventLogDbCommand.Parameters[0].Value = eventLog.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteEventLogDbCommand.CommandText}\r\n-- Id: {eventLog.Id}");
            deleteEventLogDbCommand.ExecuteNonQuery();
        }

        public void Insert(Fee fee)
        {
            if (fee.Id == null) fee.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFeeDbCommand == null)
            {
                insertFeeDbCommand = dbConnection.CreateCommand();
                insertFeeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("ownerid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Ownerid)";
                var dp = insertFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFeeDbCommand.Parameters.Add(dp);
                dp = insertFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFeeDbCommand.Parameters.Add(dp);
                dp = insertFeeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertFeeDbCommand.Parameters.Add(dp);
                dp = insertFeeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFeeDbCommand.Parameters.Add(dp);
                dp = insertFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Ownerid";
                dp.DbType = DbType.Guid;
                insertFeeDbCommand.Parameters.Add(dp);
                insertFeeDbCommand.Transaction = dbTransaction;
                insertFeeDbCommand.Prepare();
            }
            insertFeeDbCommand.Transaction = dbTransaction;
            insertFeeDbCommand.Parameters[0].Value = (object)fee.Id ?? DBNull.Value;
            insertFeeDbCommand.Parameters[1].Value = (object)fee.Content ?? DBNull.Value;
            insertFeeDbCommand.Parameters[2].Value = (object)fee.CreationTime ?? DBNull.Value;
            insertFeeDbCommand.Parameters[3].Value = (object)fee.CreationUserId ?? DBNull.Value;
            insertFeeDbCommand.Parameters[4].Value = (object)fee.Ownerid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFeeDbCommand.CommandText}\r\n-- Id: {fee.Id}\r\n-- Content: {fee.Content}\r\n-- CreationTime: {fee.CreationTime}\r\n-- CreationUserId: {fee.CreationUserId}\r\n-- Ownerid: {fee.Ownerid}");
            insertFeeDbCommand.ExecuteNonQuery();
        }

        public void Update(Fee fee)
        {
            if (ConnectIfNecessary() || updateFeeDbCommand == null)
            {
                updateFeeDbCommand = dbConnection.CreateCommand();
                updateFeeDbCommand.Transaction = dbTransaction;
                updateFeeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("ownerid")} = @Ownerid WHERE {Quote("id")} = @Id";
                var dp = updateFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFeeDbCommand.Parameters.Add(dp);
                dp = updateFeeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateFeeDbCommand.Parameters.Add(dp);
                dp = updateFeeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFeeDbCommand.Parameters.Add(dp);
                dp = updateFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Ownerid";
                dp.DbType = DbType.Guid;
                updateFeeDbCommand.Parameters.Add(dp);
                dp = updateFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFeeDbCommand.Parameters.Add(dp);
                updateFeeDbCommand.Prepare();
            }
            updateFeeDbCommand.Transaction = dbTransaction;
            updateFeeDbCommand.Parameters[0].Value = (object)fee.Content ?? DBNull.Value;
            updateFeeDbCommand.Parameters[1].Value = (object)fee.CreationTime ?? DBNull.Value;
            updateFeeDbCommand.Parameters[2].Value = (object)fee.CreationUserId ?? DBNull.Value;
            updateFeeDbCommand.Parameters[3].Value = (object)fee.Ownerid ?? DBNull.Value;
            updateFeeDbCommand.Parameters[4].Value = fee.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFeeDbCommand.CommandText}\r\n-- Content: {fee.Content}\r\n-- CreationTime: {fee.CreationTime}\r\n-- CreationUserId: {fee.CreationUserId}\r\n-- Ownerid: {fee.Ownerid}\r\n-- Id: {fee.Id}");
            updateFeeDbCommand.ExecuteNonQuery();
        }

        public void Delete(Fee fee)
        {
            if (ConnectIfNecessary() || deleteFeeDbCommand == null)
            {
                deleteFeeDbCommand = dbConnection.CreateCommand();
                deleteFeeDbCommand.Transaction = dbTransaction;
                deleteFeeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")} WHERE {Quote("id")} = @Id";
                var dp = deleteFeeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFeeDbCommand.Parameters.Add(dp);
                deleteFeeDbCommand.Prepare();
            }
            deleteFeeDbCommand.Transaction = dbTransaction;
            deleteFeeDbCommand.Parameters[0].Value = fee.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFeeDbCommand.CommandText}\r\n-- Id: {fee.Id}");
            deleteFeeDbCommand.ExecuteNonQuery();
        }

        public void Insert(FeeAction feeAction)
        {
            if (feeAction.Id == null) feeAction.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFeeActionDbCommand == null)
            {
                insertFeeActionDbCommand = dbConnection.CreateCommand();
                insertFeeActionDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFeeActionDbCommand.Parameters.Add(dp);
                dp = insertFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFeeActionDbCommand.Parameters.Add(dp);
                dp = insertFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertFeeActionDbCommand.Parameters.Add(dp);
                dp = insertFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFeeActionDbCommand.Parameters.Add(dp);
                insertFeeActionDbCommand.Transaction = dbTransaction;
                insertFeeActionDbCommand.Prepare();
            }
            insertFeeActionDbCommand.Transaction = dbTransaction;
            insertFeeActionDbCommand.Parameters[0].Value = (object)feeAction.Id ?? DBNull.Value;
            insertFeeActionDbCommand.Parameters[1].Value = (object)feeAction.Content ?? DBNull.Value;
            insertFeeActionDbCommand.Parameters[2].Value = (object)feeAction.CreationTime ?? DBNull.Value;
            insertFeeActionDbCommand.Parameters[3].Value = (object)feeAction.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFeeActionDbCommand.CommandText}\r\n-- Id: {feeAction.Id}\r\n-- Content: {feeAction.Content}\r\n-- CreationTime: {feeAction.CreationTime}\r\n-- CreationUserId: {feeAction.CreationUserId}");
            insertFeeActionDbCommand.ExecuteNonQuery();
        }

        public void Update(FeeAction feeAction)
        {
            if (ConnectIfNecessary() || updateFeeActionDbCommand == null)
            {
                updateFeeActionDbCommand = dbConnection.CreateCommand();
                updateFeeActionDbCommand.Transaction = dbTransaction;
                updateFeeActionDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFeeActionDbCommand.Parameters.Add(dp);
                dp = updateFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateFeeActionDbCommand.Parameters.Add(dp);
                dp = updateFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFeeActionDbCommand.Parameters.Add(dp);
                dp = updateFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFeeActionDbCommand.Parameters.Add(dp);
                updateFeeActionDbCommand.Prepare();
            }
            updateFeeActionDbCommand.Transaction = dbTransaction;
            updateFeeActionDbCommand.Parameters[0].Value = (object)feeAction.Content ?? DBNull.Value;
            updateFeeActionDbCommand.Parameters[1].Value = (object)feeAction.CreationTime ?? DBNull.Value;
            updateFeeActionDbCommand.Parameters[2].Value = (object)feeAction.CreationUserId ?? DBNull.Value;
            updateFeeActionDbCommand.Parameters[3].Value = feeAction.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFeeActionDbCommand.CommandText}\r\n-- Content: {feeAction.Content}\r\n-- CreationTime: {feeAction.CreationTime}\r\n-- CreationUserId: {feeAction.CreationUserId}\r\n-- Id: {feeAction.Id}");
            updateFeeActionDbCommand.ExecuteNonQuery();
        }

        public void Delete(FeeAction feeAction)
        {
            if (ConnectIfNecessary() || deleteFeeActionDbCommand == null)
            {
                deleteFeeActionDbCommand = dbConnection.CreateCommand();
                deleteFeeActionDbCommand.Transaction = dbTransaction;
                deleteFeeActionDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")} WHERE {Quote("id")} = @Id";
                var dp = deleteFeeActionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFeeActionDbCommand.Parameters.Add(dp);
                deleteFeeActionDbCommand.Prepare();
            }
            deleteFeeActionDbCommand.Transaction = dbTransaction;
            deleteFeeActionDbCommand.Parameters[0].Value = feeAction.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFeeActionDbCommand.CommandText}\r\n-- Id: {feeAction.Id}");
            deleteFeeActionDbCommand.ExecuteNonQuery();
        }

        public void Insert(FiscalYear fiscalYear)
        {
            if (fiscalYear.Id == null) fiscalYear.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFiscalYearDbCommand == null)
            {
                insertFiscalYearDbCommand = dbConnection.CreateCommand();
                insertFiscalYearDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFiscalYearDbCommand.Parameters.Add(dp);
                dp = insertFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFiscalYearDbCommand.Parameters.Add(dp);
                dp = insertFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertFiscalYearDbCommand.Parameters.Add(dp);
                dp = insertFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFiscalYearDbCommand.Parameters.Add(dp);
                insertFiscalYearDbCommand.Transaction = dbTransaction;
                insertFiscalYearDbCommand.Prepare();
            }
            insertFiscalYearDbCommand.Transaction = dbTransaction;
            insertFiscalYearDbCommand.Parameters[0].Value = (object)fiscalYear.Id ?? DBNull.Value;
            insertFiscalYearDbCommand.Parameters[1].Value = (object)fiscalYear.Content ?? DBNull.Value;
            insertFiscalYearDbCommand.Parameters[2].Value = (object)fiscalYear.CreationTime ?? DBNull.Value;
            insertFiscalYearDbCommand.Parameters[3].Value = (object)fiscalYear.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFiscalYearDbCommand.CommandText}\r\n-- Id: {fiscalYear.Id}\r\n-- Content: {fiscalYear.Content}\r\n-- CreationTime: {fiscalYear.CreationTime}\r\n-- CreationUserId: {fiscalYear.CreationUserId}");
            insertFiscalYearDbCommand.ExecuteNonQuery();
        }

        public void Update(FiscalYear fiscalYear)
        {
            if (ConnectIfNecessary() || updateFiscalYearDbCommand == null)
            {
                updateFiscalYearDbCommand = dbConnection.CreateCommand();
                updateFiscalYearDbCommand.Transaction = dbTransaction;
                updateFiscalYearDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFiscalYearDbCommand.Parameters.Add(dp);
                dp = updateFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateFiscalYearDbCommand.Parameters.Add(dp);
                dp = updateFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFiscalYearDbCommand.Parameters.Add(dp);
                dp = updateFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFiscalYearDbCommand.Parameters.Add(dp);
                updateFiscalYearDbCommand.Prepare();
            }
            updateFiscalYearDbCommand.Transaction = dbTransaction;
            updateFiscalYearDbCommand.Parameters[0].Value = (object)fiscalYear.Content ?? DBNull.Value;
            updateFiscalYearDbCommand.Parameters[1].Value = (object)fiscalYear.CreationTime ?? DBNull.Value;
            updateFiscalYearDbCommand.Parameters[2].Value = (object)fiscalYear.CreationUserId ?? DBNull.Value;
            updateFiscalYearDbCommand.Parameters[3].Value = fiscalYear.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFiscalYearDbCommand.CommandText}\r\n-- Content: {fiscalYear.Content}\r\n-- CreationTime: {fiscalYear.CreationTime}\r\n-- CreationUserId: {fiscalYear.CreationUserId}\r\n-- Id: {fiscalYear.Id}");
            updateFiscalYearDbCommand.ExecuteNonQuery();
        }

        public void Delete(FiscalYear fiscalYear)
        {
            if (ConnectIfNecessary() || deleteFiscalYearDbCommand == null)
            {
                deleteFiscalYearDbCommand = dbConnection.CreateCommand();
                deleteFiscalYearDbCommand.Transaction = dbTransaction;
                deleteFiscalYearDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")} WHERE {Quote("id")} = @Id";
                var dp = deleteFiscalYearDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFiscalYearDbCommand.Parameters.Add(dp);
                deleteFiscalYearDbCommand.Prepare();
            }
            deleteFiscalYearDbCommand.Transaction = dbTransaction;
            deleteFiscalYearDbCommand.Parameters[0].Value = fiscalYear.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFiscalYearDbCommand.CommandText}\r\n-- Id: {fiscalYear.Id}");
            deleteFiscalYearDbCommand.ExecuteNonQuery();
        }

        public void Insert(FixedDueDateSchedule fixedDueDateSchedule)
        {
            if (fixedDueDateSchedule.Id == null) fixedDueDateSchedule.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFixedDueDateScheduleDbCommand == null)
            {
                insertFixedDueDateScheduleDbCommand = dbConnection.CreateCommand();
                insertFixedDueDateScheduleDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}fixed_due_date_schedule")} ({Quote("_id")}, {Quote("jsonb")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")})";
                var dp = insertFixedDueDateScheduleDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFixedDueDateScheduleDbCommand.Parameters.Add(dp);
                dp = insertFixedDueDateScheduleDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFixedDueDateScheduleDbCommand.Parameters.Add(dp);
                insertFixedDueDateScheduleDbCommand.Transaction = dbTransaction;
                insertFixedDueDateScheduleDbCommand.Prepare();
            }
            insertFixedDueDateScheduleDbCommand.Transaction = dbTransaction;
            insertFixedDueDateScheduleDbCommand.Parameters[0].Value = (object)fixedDueDateSchedule.Id ?? DBNull.Value;
            insertFixedDueDateScheduleDbCommand.Parameters[1].Value = (object)fixedDueDateSchedule.Content ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFixedDueDateScheduleDbCommand.CommandText}\r\n-- Id: {fixedDueDateSchedule.Id}\r\n-- Content: {fixedDueDateSchedule.Content}");
            insertFixedDueDateScheduleDbCommand.ExecuteNonQuery();
        }

        public void Update(FixedDueDateSchedule fixedDueDateSchedule)
        {
            if (ConnectIfNecessary() || updateFixedDueDateScheduleDbCommand == null)
            {
                updateFixedDueDateScheduleDbCommand = dbConnection.CreateCommand();
                updateFixedDueDateScheduleDbCommand.Transaction = dbTransaction;
                updateFixedDueDateScheduleDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}fixed_due_date_schedule")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")} WHERE {Quote("_id")} = @Id";
                var dp = updateFixedDueDateScheduleDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFixedDueDateScheduleDbCommand.Parameters.Add(dp);
                dp = updateFixedDueDateScheduleDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFixedDueDateScheduleDbCommand.Parameters.Add(dp);
                updateFixedDueDateScheduleDbCommand.Prepare();
            }
            updateFixedDueDateScheduleDbCommand.Transaction = dbTransaction;
            updateFixedDueDateScheduleDbCommand.Parameters[0].Value = (object)fixedDueDateSchedule.Content ?? DBNull.Value;
            updateFixedDueDateScheduleDbCommand.Parameters[1].Value = fixedDueDateSchedule.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFixedDueDateScheduleDbCommand.CommandText}\r\n-- Content: {fixedDueDateSchedule.Content}\r\n-- Id: {fixedDueDateSchedule.Id}");
            updateFixedDueDateScheduleDbCommand.ExecuteNonQuery();
        }

        public void Delete(FixedDueDateSchedule fixedDueDateSchedule)
        {
            if (ConnectIfNecessary() || deleteFixedDueDateScheduleDbCommand == null)
            {
                deleteFixedDueDateScheduleDbCommand = dbConnection.CreateCommand();
                deleteFixedDueDateScheduleDbCommand.Transaction = dbTransaction;
                deleteFixedDueDateScheduleDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}fixed_due_date_schedule")} WHERE {Quote("_id")} = @Id";
                var dp = deleteFixedDueDateScheduleDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFixedDueDateScheduleDbCommand.Parameters.Add(dp);
                deleteFixedDueDateScheduleDbCommand.Prepare();
            }
            deleteFixedDueDateScheduleDbCommand.Transaction = dbTransaction;
            deleteFixedDueDateScheduleDbCommand.Parameters[0].Value = fixedDueDateSchedule.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFixedDueDateScheduleDbCommand.CommandText}\r\n-- Id: {fixedDueDateSchedule.Id}");
            deleteFixedDueDateScheduleDbCommand.ExecuteNonQuery();
        }

        public void Insert(Fund fund)
        {
            if (fund.Id == null) fund.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFundDbCommand == null)
            {
                insertFundDbCommand = dbConnection.CreateCommand();
                insertFundDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("ledger_id")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @LedgerId)";
                var dp = insertFundDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFundDbCommand.Parameters.Add(dp);
                dp = insertFundDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFundDbCommand.Parameters.Add(dp);
                dp = insertFundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertFundDbCommand.Parameters.Add(dp);
                dp = insertFundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFundDbCommand.Parameters.Add(dp);
                dp = insertFundDbCommand.CreateParameter();
                dp.ParameterName = "@LedgerId";
                dp.DbType = DbType.Guid;
                insertFundDbCommand.Parameters.Add(dp);
                insertFundDbCommand.Transaction = dbTransaction;
                insertFundDbCommand.Prepare();
            }
            insertFundDbCommand.Transaction = dbTransaction;
            insertFundDbCommand.Parameters[0].Value = (object)fund.Id ?? DBNull.Value;
            insertFundDbCommand.Parameters[1].Value = (object)fund.Content ?? DBNull.Value;
            insertFundDbCommand.Parameters[2].Value = (object)fund.CreationTime ?? DBNull.Value;
            insertFundDbCommand.Parameters[3].Value = (object)fund.CreationUserId ?? DBNull.Value;
            insertFundDbCommand.Parameters[4].Value = (object)fund.LedgerId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFundDbCommand.CommandText}\r\n-- Id: {fund.Id}\r\n-- Content: {fund.Content}\r\n-- CreationTime: {fund.CreationTime}\r\n-- CreationUserId: {fund.CreationUserId}\r\n-- LedgerId: {fund.LedgerId}");
            insertFundDbCommand.ExecuteNonQuery();
        }

        public void Update(Fund fund)
        {
            if (ConnectIfNecessary() || updateFundDbCommand == null)
            {
                updateFundDbCommand = dbConnection.CreateCommand();
                updateFundDbCommand.Transaction = dbTransaction;
                updateFundDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("ledger_id")} = @LedgerId WHERE {Quote("id")} = @Id";
                var dp = updateFundDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFundDbCommand.Parameters.Add(dp);
                dp = updateFundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateFundDbCommand.Parameters.Add(dp);
                dp = updateFundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFundDbCommand.Parameters.Add(dp);
                dp = updateFundDbCommand.CreateParameter();
                dp.ParameterName = "@LedgerId";
                dp.DbType = DbType.Guid;
                updateFundDbCommand.Parameters.Add(dp);
                dp = updateFundDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFundDbCommand.Parameters.Add(dp);
                updateFundDbCommand.Prepare();
            }
            updateFundDbCommand.Transaction = dbTransaction;
            updateFundDbCommand.Parameters[0].Value = (object)fund.Content ?? DBNull.Value;
            updateFundDbCommand.Parameters[1].Value = (object)fund.CreationTime ?? DBNull.Value;
            updateFundDbCommand.Parameters[2].Value = (object)fund.CreationUserId ?? DBNull.Value;
            updateFundDbCommand.Parameters[3].Value = (object)fund.LedgerId ?? DBNull.Value;
            updateFundDbCommand.Parameters[4].Value = fund.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFundDbCommand.CommandText}\r\n-- Content: {fund.Content}\r\n-- CreationTime: {fund.CreationTime}\r\n-- CreationUserId: {fund.CreationUserId}\r\n-- LedgerId: {fund.LedgerId}\r\n-- Id: {fund.Id}");
            updateFundDbCommand.ExecuteNonQuery();
        }

        public void Delete(Fund fund)
        {
            if (ConnectIfNecessary() || deleteFundDbCommand == null)
            {
                deleteFundDbCommand = dbConnection.CreateCommand();
                deleteFundDbCommand.Transaction = dbTransaction;
                deleteFundDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")} WHERE {Quote("id")} = @Id";
                var dp = deleteFundDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFundDbCommand.Parameters.Add(dp);
                deleteFundDbCommand.Prepare();
            }
            deleteFundDbCommand.Transaction = dbTransaction;
            deleteFundDbCommand.Parameters[0].Value = fund.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFundDbCommand.CommandText}\r\n-- Id: {fund.Id}");
            deleteFundDbCommand.ExecuteNonQuery();
        }

        public void Insert(FundDistribution fundDistribution)
        {
            if (fundDistribution.Id == null) fundDistribution.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFundDistributionDbCommand == null)
            {
                insertFundDistributionDbCommand = dbConnection.CreateCommand();
                insertFundDistributionDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("budget_id")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @BudgetId)";
                var dp = insertFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFundDistributionDbCommand.Parameters.Add(dp);
                dp = insertFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFundDistributionDbCommand.Parameters.Add(dp);
                dp = insertFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertFundDistributionDbCommand.Parameters.Add(dp);
                dp = insertFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFundDistributionDbCommand.Parameters.Add(dp);
                dp = insertFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@BudgetId";
                dp.DbType = DbType.Guid;
                insertFundDistributionDbCommand.Parameters.Add(dp);
                insertFundDistributionDbCommand.Transaction = dbTransaction;
                insertFundDistributionDbCommand.Prepare();
            }
            insertFundDistributionDbCommand.Transaction = dbTransaction;
            insertFundDistributionDbCommand.Parameters[0].Value = (object)fundDistribution.Id ?? DBNull.Value;
            insertFundDistributionDbCommand.Parameters[1].Value = (object)fundDistribution.Content ?? DBNull.Value;
            insertFundDistributionDbCommand.Parameters[2].Value = (object)fundDistribution.CreationTime ?? DBNull.Value;
            insertFundDistributionDbCommand.Parameters[3].Value = (object)fundDistribution.CreationUserId ?? DBNull.Value;
            insertFundDistributionDbCommand.Parameters[4].Value = (object)fundDistribution.BudgetId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFundDistributionDbCommand.CommandText}\r\n-- Id: {fundDistribution.Id}\r\n-- Content: {fundDistribution.Content}\r\n-- CreationTime: {fundDistribution.CreationTime}\r\n-- CreationUserId: {fundDistribution.CreationUserId}\r\n-- BudgetId: {fundDistribution.BudgetId}");
            insertFundDistributionDbCommand.ExecuteNonQuery();
        }

        public void Update(FundDistribution fundDistribution)
        {
            if (ConnectIfNecessary() || updateFundDistributionDbCommand == null)
            {
                updateFundDistributionDbCommand = dbConnection.CreateCommand();
                updateFundDistributionDbCommand.Transaction = dbTransaction;
                updateFundDistributionDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("budget_id")} = @BudgetId WHERE {Quote("id")} = @Id";
                var dp = updateFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFundDistributionDbCommand.Parameters.Add(dp);
                dp = updateFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateFundDistributionDbCommand.Parameters.Add(dp);
                dp = updateFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFundDistributionDbCommand.Parameters.Add(dp);
                dp = updateFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@BudgetId";
                dp.DbType = DbType.Guid;
                updateFundDistributionDbCommand.Parameters.Add(dp);
                dp = updateFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFundDistributionDbCommand.Parameters.Add(dp);
                updateFundDistributionDbCommand.Prepare();
            }
            updateFundDistributionDbCommand.Transaction = dbTransaction;
            updateFundDistributionDbCommand.Parameters[0].Value = (object)fundDistribution.Content ?? DBNull.Value;
            updateFundDistributionDbCommand.Parameters[1].Value = (object)fundDistribution.CreationTime ?? DBNull.Value;
            updateFundDistributionDbCommand.Parameters[2].Value = (object)fundDistribution.CreationUserId ?? DBNull.Value;
            updateFundDistributionDbCommand.Parameters[3].Value = (object)fundDistribution.BudgetId ?? DBNull.Value;
            updateFundDistributionDbCommand.Parameters[4].Value = fundDistribution.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFundDistributionDbCommand.CommandText}\r\n-- Content: {fundDistribution.Content}\r\n-- CreationTime: {fundDistribution.CreationTime}\r\n-- CreationUserId: {fundDistribution.CreationUserId}\r\n-- BudgetId: {fundDistribution.BudgetId}\r\n-- Id: {fundDistribution.Id}");
            updateFundDistributionDbCommand.ExecuteNonQuery();
        }

        public void Delete(FundDistribution fundDistribution)
        {
            if (ConnectIfNecessary() || deleteFundDistributionDbCommand == null)
            {
                deleteFundDistributionDbCommand = dbConnection.CreateCommand();
                deleteFundDistributionDbCommand.Transaction = dbTransaction;
                deleteFundDistributionDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")} WHERE {Quote("id")} = @Id";
                var dp = deleteFundDistributionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFundDistributionDbCommand.Parameters.Add(dp);
                deleteFundDistributionDbCommand.Prepare();
            }
            deleteFundDistributionDbCommand.Transaction = dbTransaction;
            deleteFundDistributionDbCommand.Parameters[0].Value = fundDistribution.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFundDistributionDbCommand.CommandText}\r\n-- Id: {fundDistribution.Id}");
            deleteFundDistributionDbCommand.ExecuteNonQuery();
        }

        public void Insert(FundDistribution2 fundDistribution2)
        {
            if (fundDistribution2.Id == null) fundDistribution2.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertFundDistribution2DbCommand == null)
            {
                insertFundDistribution2DbCommand = dbConnection.CreateCommand();
                insertFundDistribution2DbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertFundDistribution2DbCommand.Parameters.Add(dp);
                dp = insertFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFundDistribution2DbCommand.Parameters.Add(dp);
                dp = insertFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertFundDistribution2DbCommand.Parameters.Add(dp);
                dp = insertFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertFundDistribution2DbCommand.Parameters.Add(dp);
                insertFundDistribution2DbCommand.Transaction = dbTransaction;
                insertFundDistribution2DbCommand.Prepare();
            }
            insertFundDistribution2DbCommand.Transaction = dbTransaction;
            insertFundDistribution2DbCommand.Parameters[0].Value = (object)fundDistribution2.Id ?? DBNull.Value;
            insertFundDistribution2DbCommand.Parameters[1].Value = (object)fundDistribution2.Content ?? DBNull.Value;
            insertFundDistribution2DbCommand.Parameters[2].Value = (object)fundDistribution2.CreationTime ?? DBNull.Value;
            insertFundDistribution2DbCommand.Parameters[3].Value = (object)fundDistribution2.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertFundDistribution2DbCommand.CommandText}\r\n-- Id: {fundDistribution2.Id}\r\n-- Content: {fundDistribution2.Content}\r\n-- CreationTime: {fundDistribution2.CreationTime}\r\n-- CreationUserId: {fundDistribution2.CreationUserId}");
            insertFundDistribution2DbCommand.ExecuteNonQuery();
        }

        public void Update(FundDistribution2 fundDistribution2)
        {
            if (ConnectIfNecessary() || updateFundDistribution2DbCommand == null)
            {
                updateFundDistribution2DbCommand = dbConnection.CreateCommand();
                updateFundDistribution2DbCommand.Transaction = dbTransaction;
                updateFundDistribution2DbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFundDistribution2DbCommand.Parameters.Add(dp);
                dp = updateFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateFundDistribution2DbCommand.Parameters.Add(dp);
                dp = updateFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateFundDistribution2DbCommand.Parameters.Add(dp);
                dp = updateFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateFundDistribution2DbCommand.Parameters.Add(dp);
                updateFundDistribution2DbCommand.Prepare();
            }
            updateFundDistribution2DbCommand.Transaction = dbTransaction;
            updateFundDistribution2DbCommand.Parameters[0].Value = (object)fundDistribution2.Content ?? DBNull.Value;
            updateFundDistribution2DbCommand.Parameters[1].Value = (object)fundDistribution2.CreationTime ?? DBNull.Value;
            updateFundDistribution2DbCommand.Parameters[2].Value = (object)fundDistribution2.CreationUserId ?? DBNull.Value;
            updateFundDistribution2DbCommand.Parameters[3].Value = fundDistribution2.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateFundDistribution2DbCommand.CommandText}\r\n-- Content: {fundDistribution2.Content}\r\n-- CreationTime: {fundDistribution2.CreationTime}\r\n-- CreationUserId: {fundDistribution2.CreationUserId}\r\n-- Id: {fundDistribution2.Id}");
            updateFundDistribution2DbCommand.ExecuteNonQuery();
        }

        public void Delete(FundDistribution2 fundDistribution2)
        {
            if (ConnectIfNecessary() || deleteFundDistribution2DbCommand == null)
            {
                deleteFundDistribution2DbCommand = dbConnection.CreateCommand();
                deleteFundDistribution2DbCommand.Transaction = dbTransaction;
                deleteFundDistribution2DbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")} WHERE {Quote("id")} = @Id";
                var dp = deleteFundDistribution2DbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteFundDistribution2DbCommand.Parameters.Add(dp);
                deleteFundDistribution2DbCommand.Prepare();
            }
            deleteFundDistribution2DbCommand.Transaction = dbTransaction;
            deleteFundDistribution2DbCommand.Parameters[0].Value = fundDistribution2.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteFundDistribution2DbCommand.CommandText}\r\n-- Id: {fundDistribution2.Id}");
            deleteFundDistribution2DbCommand.ExecuteNonQuery();
        }

        public void Insert(Group group)
        {
            if (group.Id == null) group.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertGroupDbCommand == null)
            {
                insertGroupDbCommand = dbConnection.CreateCommand();
                insertGroupDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertGroupDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertGroupDbCommand.Parameters.Add(dp);
                dp = insertGroupDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertGroupDbCommand.Parameters.Add(dp);
                dp = insertGroupDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertGroupDbCommand.Parameters.Add(dp);
                dp = insertGroupDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertGroupDbCommand.Parameters.Add(dp);
                insertGroupDbCommand.Transaction = dbTransaction;
                insertGroupDbCommand.Prepare();
            }
            insertGroupDbCommand.Transaction = dbTransaction;
            insertGroupDbCommand.Parameters[0].Value = (object)group.Id ?? DBNull.Value;
            insertGroupDbCommand.Parameters[1].Value = (object)group.Content ?? DBNull.Value;
            insertGroupDbCommand.Parameters[2].Value = (object)group.CreationTime ?? DBNull.Value;
            insertGroupDbCommand.Parameters[3].Value = (object)group.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertGroupDbCommand.CommandText}\r\n-- Id: {group.Id}\r\n-- Content: {group.Content}\r\n-- CreationTime: {group.CreationTime}\r\n-- CreationUserId: {group.CreationUserId}");
            insertGroupDbCommand.ExecuteNonQuery();
        }

        public void Update(Group group)
        {
            if (ConnectIfNecessary() || updateGroupDbCommand == null)
            {
                updateGroupDbCommand = dbConnection.CreateCommand();
                updateGroupDbCommand.Transaction = dbTransaction;
                updateGroupDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateGroupDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateGroupDbCommand.Parameters.Add(dp);
                dp = updateGroupDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateGroupDbCommand.Parameters.Add(dp);
                dp = updateGroupDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateGroupDbCommand.Parameters.Add(dp);
                dp = updateGroupDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateGroupDbCommand.Parameters.Add(dp);
                updateGroupDbCommand.Prepare();
            }
            updateGroupDbCommand.Transaction = dbTransaction;
            updateGroupDbCommand.Parameters[0].Value = (object)group.Content ?? DBNull.Value;
            updateGroupDbCommand.Parameters[1].Value = (object)group.CreationTime ?? DBNull.Value;
            updateGroupDbCommand.Parameters[2].Value = (object)group.CreationUserId ?? DBNull.Value;
            updateGroupDbCommand.Parameters[3].Value = group.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateGroupDbCommand.CommandText}\r\n-- Content: {group.Content}\r\n-- CreationTime: {group.CreationTime}\r\n-- CreationUserId: {group.CreationUserId}\r\n-- Id: {group.Id}");
            updateGroupDbCommand.ExecuteNonQuery();
        }

        public void Delete(Group group)
        {
            if (ConnectIfNecessary() || deleteGroupDbCommand == null)
            {
                deleteGroupDbCommand = dbConnection.CreateCommand();
                deleteGroupDbCommand.Transaction = dbTransaction;
                deleteGroupDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")} WHERE {Quote("id")} = @Id";
                var dp = deleteGroupDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteGroupDbCommand.Parameters.Add(dp);
                deleteGroupDbCommand.Prepare();
            }
            deleteGroupDbCommand.Transaction = dbTransaction;
            deleteGroupDbCommand.Parameters[0].Value = group.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteGroupDbCommand.CommandText}\r\n-- Id: {group.Id}");
            deleteGroupDbCommand.ExecuteNonQuery();
        }

        public void Insert(Holding holding)
        {
            if (holding.Id == null) holding.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertHoldingDbCommand == null)
            {
                insertHoldingDbCommand = dbConnection.CreateCommand();
                insertHoldingDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("instanceid")}, {Quote("permanentlocationid")}, {Quote("temporarylocationid")}, {Quote("holdingstypeid")}, {Quote("callnumbertypeid")}, {Quote("illpolicyid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Instanceid, @Permanentlocationid, @Temporarylocationid, @Holdingstypeid, @Callnumbertypeid, @Illpolicyid)";
                var dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Instanceid";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Permanentlocationid";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Temporarylocationid";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Holdingstypeid";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Callnumbertypeid";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                dp = insertHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Illpolicyid";
                dp.DbType = DbType.Guid;
                insertHoldingDbCommand.Parameters.Add(dp);
                insertHoldingDbCommand.Transaction = dbTransaction;
                insertHoldingDbCommand.Prepare();
            }
            insertHoldingDbCommand.Transaction = dbTransaction;
            insertHoldingDbCommand.Parameters[0].Value = (object)holding.Id ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[1].Value = (object)holding.Content ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[2].Value = (object)holding.CreationTime ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[3].Value = (object)holding.CreationUserId ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[4].Value = (object)holding.Instanceid ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[5].Value = (object)holding.Permanentlocationid ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[6].Value = (object)holding.Temporarylocationid ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[7].Value = (object)holding.Holdingstypeid ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[8].Value = (object)holding.Callnumbertypeid ?? DBNull.Value;
            insertHoldingDbCommand.Parameters[9].Value = (object)holding.Illpolicyid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertHoldingDbCommand.CommandText}\r\n-- Id: {holding.Id}\r\n-- Content: {holding.Content}\r\n-- CreationTime: {holding.CreationTime}\r\n-- CreationUserId: {holding.CreationUserId}\r\n-- Instanceid: {holding.Instanceid}\r\n-- Permanentlocationid: {holding.Permanentlocationid}\r\n-- Temporarylocationid: {holding.Temporarylocationid}\r\n-- Holdingstypeid: {holding.Holdingstypeid}\r\n-- Callnumbertypeid: {holding.Callnumbertypeid}\r\n-- Illpolicyid: {holding.Illpolicyid}");
            insertHoldingDbCommand.ExecuteNonQuery();
        }

        public void Update(Holding holding)
        {
            if (ConnectIfNecessary() || updateHoldingDbCommand == null)
            {
                updateHoldingDbCommand = dbConnection.CreateCommand();
                updateHoldingDbCommand.Transaction = dbTransaction;
                updateHoldingDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("instanceid")} = @Instanceid, {Quote("permanentlocationid")} = @Permanentlocationid, {Quote("temporarylocationid")} = @Temporarylocationid, {Quote("holdingstypeid")} = @Holdingstypeid, {Quote("callnumbertypeid")} = @Callnumbertypeid, {Quote("illpolicyid")} = @Illpolicyid WHERE {Quote("_id")} = @Id";
                var dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Instanceid";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Permanentlocationid";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Temporarylocationid";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Holdingstypeid";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Callnumbertypeid";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Illpolicyid";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                dp = updateHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateHoldingDbCommand.Parameters.Add(dp);
                updateHoldingDbCommand.Prepare();
            }
            updateHoldingDbCommand.Transaction = dbTransaction;
            updateHoldingDbCommand.Parameters[0].Value = (object)holding.Content ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[1].Value = (object)holding.CreationTime ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[2].Value = (object)holding.CreationUserId ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[3].Value = (object)holding.Instanceid ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[4].Value = (object)holding.Permanentlocationid ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[5].Value = (object)holding.Temporarylocationid ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[6].Value = (object)holding.Holdingstypeid ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[7].Value = (object)holding.Callnumbertypeid ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[8].Value = (object)holding.Illpolicyid ?? DBNull.Value;
            updateHoldingDbCommand.Parameters[9].Value = holding.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateHoldingDbCommand.CommandText}\r\n-- Content: {holding.Content}\r\n-- CreationTime: {holding.CreationTime}\r\n-- CreationUserId: {holding.CreationUserId}\r\n-- Instanceid: {holding.Instanceid}\r\n-- Permanentlocationid: {holding.Permanentlocationid}\r\n-- Temporarylocationid: {holding.Temporarylocationid}\r\n-- Holdingstypeid: {holding.Holdingstypeid}\r\n-- Callnumbertypeid: {holding.Callnumbertypeid}\r\n-- Illpolicyid: {holding.Illpolicyid}\r\n-- Id: {holding.Id}");
            updateHoldingDbCommand.ExecuteNonQuery();
        }

        public void Delete(Holding holding)
        {
            if (ConnectIfNecessary() || deleteHoldingDbCommand == null)
            {
                deleteHoldingDbCommand = dbConnection.CreateCommand();
                deleteHoldingDbCommand.Transaction = dbTransaction;
                deleteHoldingDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")} WHERE {Quote("_id")} = @Id";
                var dp = deleteHoldingDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteHoldingDbCommand.Parameters.Add(dp);
                deleteHoldingDbCommand.Prepare();
            }
            deleteHoldingDbCommand.Transaction = dbTransaction;
            deleteHoldingDbCommand.Parameters[0].Value = holding.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteHoldingDbCommand.CommandText}\r\n-- Id: {holding.Id}");
            deleteHoldingDbCommand.ExecuteNonQuery();
        }

        public void Insert(HoldingNoteType holdingNoteType)
        {
            if (holdingNoteType.Id == null) holdingNoteType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertHoldingNoteTypeDbCommand == null)
            {
                insertHoldingNoteTypeDbCommand = dbConnection.CreateCommand();
                insertHoldingNoteTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertHoldingNoteTypeDbCommand.Parameters.Add(dp);
                dp = insertHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertHoldingNoteTypeDbCommand.Parameters.Add(dp);
                dp = insertHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertHoldingNoteTypeDbCommand.Parameters.Add(dp);
                dp = insertHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertHoldingNoteTypeDbCommand.Parameters.Add(dp);
                insertHoldingNoteTypeDbCommand.Transaction = dbTransaction;
                insertHoldingNoteTypeDbCommand.Prepare();
            }
            insertHoldingNoteTypeDbCommand.Transaction = dbTransaction;
            insertHoldingNoteTypeDbCommand.Parameters[0].Value = (object)holdingNoteType.Id ?? DBNull.Value;
            insertHoldingNoteTypeDbCommand.Parameters[1].Value = (object)holdingNoteType.Content ?? DBNull.Value;
            insertHoldingNoteTypeDbCommand.Parameters[2].Value = (object)holdingNoteType.CreationTime ?? DBNull.Value;
            insertHoldingNoteTypeDbCommand.Parameters[3].Value = (object)holdingNoteType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertHoldingNoteTypeDbCommand.CommandText}\r\n-- Id: {holdingNoteType.Id}\r\n-- Content: {holdingNoteType.Content}\r\n-- CreationTime: {holdingNoteType.CreationTime}\r\n-- CreationUserId: {holdingNoteType.CreationUserId}");
            insertHoldingNoteTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(HoldingNoteType holdingNoteType)
        {
            if (ConnectIfNecessary() || updateHoldingNoteTypeDbCommand == null)
            {
                updateHoldingNoteTypeDbCommand = dbConnection.CreateCommand();
                updateHoldingNoteTypeDbCommand.Transaction = dbTransaction;
                updateHoldingNoteTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateHoldingNoteTypeDbCommand.Parameters.Add(dp);
                dp = updateHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateHoldingNoteTypeDbCommand.Parameters.Add(dp);
                dp = updateHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateHoldingNoteTypeDbCommand.Parameters.Add(dp);
                dp = updateHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateHoldingNoteTypeDbCommand.Parameters.Add(dp);
                updateHoldingNoteTypeDbCommand.Prepare();
            }
            updateHoldingNoteTypeDbCommand.Transaction = dbTransaction;
            updateHoldingNoteTypeDbCommand.Parameters[0].Value = (object)holdingNoteType.Content ?? DBNull.Value;
            updateHoldingNoteTypeDbCommand.Parameters[1].Value = (object)holdingNoteType.CreationTime ?? DBNull.Value;
            updateHoldingNoteTypeDbCommand.Parameters[2].Value = (object)holdingNoteType.CreationUserId ?? DBNull.Value;
            updateHoldingNoteTypeDbCommand.Parameters[3].Value = holdingNoteType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateHoldingNoteTypeDbCommand.CommandText}\r\n-- Content: {holdingNoteType.Content}\r\n-- CreationTime: {holdingNoteType.CreationTime}\r\n-- CreationUserId: {holdingNoteType.CreationUserId}\r\n-- Id: {holdingNoteType.Id}");
            updateHoldingNoteTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(HoldingNoteType holdingNoteType)
        {
            if (ConnectIfNecessary() || deleteHoldingNoteTypeDbCommand == null)
            {
                deleteHoldingNoteTypeDbCommand = dbConnection.CreateCommand();
                deleteHoldingNoteTypeDbCommand.Transaction = dbTransaction;
                deleteHoldingNoteTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteHoldingNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteHoldingNoteTypeDbCommand.Parameters.Add(dp);
                deleteHoldingNoteTypeDbCommand.Prepare();
            }
            deleteHoldingNoteTypeDbCommand.Transaction = dbTransaction;
            deleteHoldingNoteTypeDbCommand.Parameters[0].Value = holdingNoteType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteHoldingNoteTypeDbCommand.CommandText}\r\n-- Id: {holdingNoteType.Id}");
            deleteHoldingNoteTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(HoldingType holdingType)
        {
            if (holdingType.Id == null) holdingType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertHoldingTypeDbCommand == null)
            {
                insertHoldingTypeDbCommand = dbConnection.CreateCommand();
                insertHoldingTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertHoldingTypeDbCommand.Parameters.Add(dp);
                dp = insertHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertHoldingTypeDbCommand.Parameters.Add(dp);
                dp = insertHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertHoldingTypeDbCommand.Parameters.Add(dp);
                dp = insertHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertHoldingTypeDbCommand.Parameters.Add(dp);
                insertHoldingTypeDbCommand.Transaction = dbTransaction;
                insertHoldingTypeDbCommand.Prepare();
            }
            insertHoldingTypeDbCommand.Transaction = dbTransaction;
            insertHoldingTypeDbCommand.Parameters[0].Value = (object)holdingType.Id ?? DBNull.Value;
            insertHoldingTypeDbCommand.Parameters[1].Value = (object)holdingType.Content ?? DBNull.Value;
            insertHoldingTypeDbCommand.Parameters[2].Value = (object)holdingType.CreationTime ?? DBNull.Value;
            insertHoldingTypeDbCommand.Parameters[3].Value = (object)holdingType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertHoldingTypeDbCommand.CommandText}\r\n-- Id: {holdingType.Id}\r\n-- Content: {holdingType.Content}\r\n-- CreationTime: {holdingType.CreationTime}\r\n-- CreationUserId: {holdingType.CreationUserId}");
            insertHoldingTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(HoldingType holdingType)
        {
            if (ConnectIfNecessary() || updateHoldingTypeDbCommand == null)
            {
                updateHoldingTypeDbCommand = dbConnection.CreateCommand();
                updateHoldingTypeDbCommand.Transaction = dbTransaction;
                updateHoldingTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateHoldingTypeDbCommand.Parameters.Add(dp);
                dp = updateHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateHoldingTypeDbCommand.Parameters.Add(dp);
                dp = updateHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateHoldingTypeDbCommand.Parameters.Add(dp);
                dp = updateHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateHoldingTypeDbCommand.Parameters.Add(dp);
                updateHoldingTypeDbCommand.Prepare();
            }
            updateHoldingTypeDbCommand.Transaction = dbTransaction;
            updateHoldingTypeDbCommand.Parameters[0].Value = (object)holdingType.Content ?? DBNull.Value;
            updateHoldingTypeDbCommand.Parameters[1].Value = (object)holdingType.CreationTime ?? DBNull.Value;
            updateHoldingTypeDbCommand.Parameters[2].Value = (object)holdingType.CreationUserId ?? DBNull.Value;
            updateHoldingTypeDbCommand.Parameters[3].Value = holdingType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateHoldingTypeDbCommand.CommandText}\r\n-- Content: {holdingType.Content}\r\n-- CreationTime: {holdingType.CreationTime}\r\n-- CreationUserId: {holdingType.CreationUserId}\r\n-- Id: {holdingType.Id}");
            updateHoldingTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(HoldingType holdingType)
        {
            if (ConnectIfNecessary() || deleteHoldingTypeDbCommand == null)
            {
                deleteHoldingTypeDbCommand = dbConnection.CreateCommand();
                deleteHoldingTypeDbCommand.Transaction = dbTransaction;
                deleteHoldingTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteHoldingTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteHoldingTypeDbCommand.Parameters.Add(dp);
                deleteHoldingTypeDbCommand.Prepare();
            }
            deleteHoldingTypeDbCommand.Transaction = dbTransaction;
            deleteHoldingTypeDbCommand.Parameters[0].Value = holdingType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteHoldingTypeDbCommand.CommandText}\r\n-- Id: {holdingType.Id}");
            deleteHoldingTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(IdType idType)
        {
            if (idType.Id == null) idType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertIdTypeDbCommand == null)
            {
                insertIdTypeDbCommand = dbConnection.CreateCommand();
                insertIdTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertIdTypeDbCommand.Parameters.Add(dp);
                dp = insertIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertIdTypeDbCommand.Parameters.Add(dp);
                dp = insertIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertIdTypeDbCommand.Parameters.Add(dp);
                dp = insertIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertIdTypeDbCommand.Parameters.Add(dp);
                insertIdTypeDbCommand.Transaction = dbTransaction;
                insertIdTypeDbCommand.Prepare();
            }
            insertIdTypeDbCommand.Transaction = dbTransaction;
            insertIdTypeDbCommand.Parameters[0].Value = (object)idType.Id ?? DBNull.Value;
            insertIdTypeDbCommand.Parameters[1].Value = (object)idType.Content ?? DBNull.Value;
            insertIdTypeDbCommand.Parameters[2].Value = (object)idType.CreationTime ?? DBNull.Value;
            insertIdTypeDbCommand.Parameters[3].Value = (object)idType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertIdTypeDbCommand.CommandText}\r\n-- Id: {idType.Id}\r\n-- Content: {idType.Content}\r\n-- CreationTime: {idType.CreationTime}\r\n-- CreationUserId: {idType.CreationUserId}");
            insertIdTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(IdType idType)
        {
            if (ConnectIfNecessary() || updateIdTypeDbCommand == null)
            {
                updateIdTypeDbCommand = dbConnection.CreateCommand();
                updateIdTypeDbCommand.Transaction = dbTransaction;
                updateIdTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateIdTypeDbCommand.Parameters.Add(dp);
                dp = updateIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateIdTypeDbCommand.Parameters.Add(dp);
                dp = updateIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateIdTypeDbCommand.Parameters.Add(dp);
                dp = updateIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateIdTypeDbCommand.Parameters.Add(dp);
                updateIdTypeDbCommand.Prepare();
            }
            updateIdTypeDbCommand.Transaction = dbTransaction;
            updateIdTypeDbCommand.Parameters[0].Value = (object)idType.Content ?? DBNull.Value;
            updateIdTypeDbCommand.Parameters[1].Value = (object)idType.CreationTime ?? DBNull.Value;
            updateIdTypeDbCommand.Parameters[2].Value = (object)idType.CreationUserId ?? DBNull.Value;
            updateIdTypeDbCommand.Parameters[3].Value = idType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateIdTypeDbCommand.CommandText}\r\n-- Content: {idType.Content}\r\n-- CreationTime: {idType.CreationTime}\r\n-- CreationUserId: {idType.CreationUserId}\r\n-- Id: {idType.Id}");
            updateIdTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(IdType idType)
        {
            if (ConnectIfNecessary() || deleteIdTypeDbCommand == null)
            {
                deleteIdTypeDbCommand = dbConnection.CreateCommand();
                deleteIdTypeDbCommand.Transaction = dbTransaction;
                deleteIdTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteIdTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteIdTypeDbCommand.Parameters.Add(dp);
                deleteIdTypeDbCommand.Prepare();
            }
            deleteIdTypeDbCommand.Transaction = dbTransaction;
            deleteIdTypeDbCommand.Parameters[0].Value = idType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteIdTypeDbCommand.CommandText}\r\n-- Id: {idType.Id}");
            deleteIdTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(IllPolicy illPolicy)
        {
            if (illPolicy.Id == null) illPolicy.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertIllPolicyDbCommand == null)
            {
                insertIllPolicyDbCommand = dbConnection.CreateCommand();
                insertIllPolicyDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertIllPolicyDbCommand.Parameters.Add(dp);
                dp = insertIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertIllPolicyDbCommand.Parameters.Add(dp);
                dp = insertIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertIllPolicyDbCommand.Parameters.Add(dp);
                dp = insertIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertIllPolicyDbCommand.Parameters.Add(dp);
                insertIllPolicyDbCommand.Transaction = dbTransaction;
                insertIllPolicyDbCommand.Prepare();
            }
            insertIllPolicyDbCommand.Transaction = dbTransaction;
            insertIllPolicyDbCommand.Parameters[0].Value = (object)illPolicy.Id ?? DBNull.Value;
            insertIllPolicyDbCommand.Parameters[1].Value = (object)illPolicy.Content ?? DBNull.Value;
            insertIllPolicyDbCommand.Parameters[2].Value = (object)illPolicy.CreationTime ?? DBNull.Value;
            insertIllPolicyDbCommand.Parameters[3].Value = (object)illPolicy.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertIllPolicyDbCommand.CommandText}\r\n-- Id: {illPolicy.Id}\r\n-- Content: {illPolicy.Content}\r\n-- CreationTime: {illPolicy.CreationTime}\r\n-- CreationUserId: {illPolicy.CreationUserId}");
            insertIllPolicyDbCommand.ExecuteNonQuery();
        }

        public void Update(IllPolicy illPolicy)
        {
            if (ConnectIfNecessary() || updateIllPolicyDbCommand == null)
            {
                updateIllPolicyDbCommand = dbConnection.CreateCommand();
                updateIllPolicyDbCommand.Transaction = dbTransaction;
                updateIllPolicyDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateIllPolicyDbCommand.Parameters.Add(dp);
                dp = updateIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateIllPolicyDbCommand.Parameters.Add(dp);
                dp = updateIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateIllPolicyDbCommand.Parameters.Add(dp);
                dp = updateIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateIllPolicyDbCommand.Parameters.Add(dp);
                updateIllPolicyDbCommand.Prepare();
            }
            updateIllPolicyDbCommand.Transaction = dbTransaction;
            updateIllPolicyDbCommand.Parameters[0].Value = (object)illPolicy.Content ?? DBNull.Value;
            updateIllPolicyDbCommand.Parameters[1].Value = (object)illPolicy.CreationTime ?? DBNull.Value;
            updateIllPolicyDbCommand.Parameters[2].Value = (object)illPolicy.CreationUserId ?? DBNull.Value;
            updateIllPolicyDbCommand.Parameters[3].Value = illPolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateIllPolicyDbCommand.CommandText}\r\n-- Content: {illPolicy.Content}\r\n-- CreationTime: {illPolicy.CreationTime}\r\n-- CreationUserId: {illPolicy.CreationUserId}\r\n-- Id: {illPolicy.Id}");
            updateIllPolicyDbCommand.ExecuteNonQuery();
        }

        public void Delete(IllPolicy illPolicy)
        {
            if (ConnectIfNecessary() || deleteIllPolicyDbCommand == null)
            {
                deleteIllPolicyDbCommand = dbConnection.CreateCommand();
                deleteIllPolicyDbCommand.Transaction = dbTransaction;
                deleteIllPolicyDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")} WHERE {Quote("_id")} = @Id";
                var dp = deleteIllPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteIllPolicyDbCommand.Parameters.Add(dp);
                deleteIllPolicyDbCommand.Prepare();
            }
            deleteIllPolicyDbCommand.Transaction = dbTransaction;
            deleteIllPolicyDbCommand.Parameters[0].Value = illPolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteIllPolicyDbCommand.CommandText}\r\n-- Id: {illPolicy.Id}");
            deleteIllPolicyDbCommand.ExecuteNonQuery();
        }

        public void Insert(Instance instance)
        {
            if (instance.Id == null) instance.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceDbCommand == null)
            {
                insertInstanceDbCommand = dbConnection.CreateCommand();
                insertInstanceDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("instancestatusid")}, {Quote("modeofissuanceid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Instancestatusid, @Modeofissuanceid)";
                var dp = insertInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceDbCommand.Parameters.Add(dp);
                dp = insertInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceDbCommand.Parameters.Add(dp);
                dp = insertInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInstanceDbCommand.Parameters.Add(dp);
                dp = insertInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceDbCommand.Parameters.Add(dp);
                dp = insertInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Instancestatusid";
                dp.DbType = DbType.Guid;
                insertInstanceDbCommand.Parameters.Add(dp);
                dp = insertInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Modeofissuanceid";
                dp.DbType = DbType.Guid;
                insertInstanceDbCommand.Parameters.Add(dp);
                insertInstanceDbCommand.Transaction = dbTransaction;
                insertInstanceDbCommand.Prepare();
            }
            insertInstanceDbCommand.Transaction = dbTransaction;
            insertInstanceDbCommand.Parameters[0].Value = (object)instance.Id ?? DBNull.Value;
            insertInstanceDbCommand.Parameters[1].Value = (object)instance.Content ?? DBNull.Value;
            insertInstanceDbCommand.Parameters[2].Value = (object)instance.CreationTime ?? DBNull.Value;
            insertInstanceDbCommand.Parameters[3].Value = (object)instance.CreationUserId ?? DBNull.Value;
            insertInstanceDbCommand.Parameters[4].Value = (object)instance.Instancestatusid ?? DBNull.Value;
            insertInstanceDbCommand.Parameters[5].Value = (object)instance.Modeofissuanceid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceDbCommand.CommandText}\r\n-- Id: {instance.Id}\r\n-- Content: {instance.Content}\r\n-- CreationTime: {instance.CreationTime}\r\n-- CreationUserId: {instance.CreationUserId}\r\n-- Instancestatusid: {instance.Instancestatusid}\r\n-- Modeofissuanceid: {instance.Modeofissuanceid}");
            insertInstanceDbCommand.ExecuteNonQuery();
        }

        public void Update(Instance instance)
        {
            if (ConnectIfNecessary() || updateInstanceDbCommand == null)
            {
                updateInstanceDbCommand = dbConnection.CreateCommand();
                updateInstanceDbCommand.Transaction = dbTransaction;
                updateInstanceDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("instancestatusid")} = @Instancestatusid, {Quote("modeofissuanceid")} = @Modeofissuanceid WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceDbCommand.Parameters.Add(dp);
                dp = updateInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInstanceDbCommand.Parameters.Add(dp);
                dp = updateInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceDbCommand.Parameters.Add(dp);
                dp = updateInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Instancestatusid";
                dp.DbType = DbType.Guid;
                updateInstanceDbCommand.Parameters.Add(dp);
                dp = updateInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Modeofissuanceid";
                dp.DbType = DbType.Guid;
                updateInstanceDbCommand.Parameters.Add(dp);
                dp = updateInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceDbCommand.Parameters.Add(dp);
                updateInstanceDbCommand.Prepare();
            }
            updateInstanceDbCommand.Transaction = dbTransaction;
            updateInstanceDbCommand.Parameters[0].Value = (object)instance.Content ?? DBNull.Value;
            updateInstanceDbCommand.Parameters[1].Value = (object)instance.CreationTime ?? DBNull.Value;
            updateInstanceDbCommand.Parameters[2].Value = (object)instance.CreationUserId ?? DBNull.Value;
            updateInstanceDbCommand.Parameters[3].Value = (object)instance.Instancestatusid ?? DBNull.Value;
            updateInstanceDbCommand.Parameters[4].Value = (object)instance.Modeofissuanceid ?? DBNull.Value;
            updateInstanceDbCommand.Parameters[5].Value = instance.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceDbCommand.CommandText}\r\n-- Content: {instance.Content}\r\n-- CreationTime: {instance.CreationTime}\r\n-- CreationUserId: {instance.CreationUserId}\r\n-- Instancestatusid: {instance.Instancestatusid}\r\n-- Modeofissuanceid: {instance.Modeofissuanceid}\r\n-- Id: {instance.Id}");
            updateInstanceDbCommand.ExecuteNonQuery();
        }

        public void Delete(Instance instance)
        {
            if (ConnectIfNecessary() || deleteInstanceDbCommand == null)
            {
                deleteInstanceDbCommand = dbConnection.CreateCommand();
                deleteInstanceDbCommand.Transaction = dbTransaction;
                deleteInstanceDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceDbCommand.Parameters.Add(dp);
                deleteInstanceDbCommand.Prepare();
            }
            deleteInstanceDbCommand.Transaction = dbTransaction;
            deleteInstanceDbCommand.Parameters[0].Value = instance.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceDbCommand.CommandText}\r\n-- Id: {instance.Id}");
            deleteInstanceDbCommand.ExecuteNonQuery();
        }

        public void Insert(InstanceFormat instanceFormat)
        {
            if (instanceFormat.Id == null) instanceFormat.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceFormatDbCommand == null)
            {
                insertInstanceFormatDbCommand = dbConnection.CreateCommand();
                insertInstanceFormatDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_format")} ({Quote("_id")}, {Quote("jsonb")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")})";
                var dp = insertInstanceFormatDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceFormatDbCommand.Parameters.Add(dp);
                dp = insertInstanceFormatDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceFormatDbCommand.Parameters.Add(dp);
                insertInstanceFormatDbCommand.Transaction = dbTransaction;
                insertInstanceFormatDbCommand.Prepare();
            }
            insertInstanceFormatDbCommand.Transaction = dbTransaction;
            insertInstanceFormatDbCommand.Parameters[0].Value = (object)instanceFormat.Id ?? DBNull.Value;
            insertInstanceFormatDbCommand.Parameters[1].Value = (object)instanceFormat.Content ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceFormatDbCommand.CommandText}\r\n-- Id: {instanceFormat.Id}\r\n-- Content: {instanceFormat.Content}");
            insertInstanceFormatDbCommand.ExecuteNonQuery();
        }

        public void Update(InstanceFormat instanceFormat)
        {
            if (ConnectIfNecessary() || updateInstanceFormatDbCommand == null)
            {
                updateInstanceFormatDbCommand = dbConnection.CreateCommand();
                updateInstanceFormatDbCommand.Transaction = dbTransaction;
                updateInstanceFormatDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_format")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")} WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceFormatDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceFormatDbCommand.Parameters.Add(dp);
                dp = updateInstanceFormatDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceFormatDbCommand.Parameters.Add(dp);
                updateInstanceFormatDbCommand.Prepare();
            }
            updateInstanceFormatDbCommand.Transaction = dbTransaction;
            updateInstanceFormatDbCommand.Parameters[0].Value = (object)instanceFormat.Content ?? DBNull.Value;
            updateInstanceFormatDbCommand.Parameters[1].Value = instanceFormat.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceFormatDbCommand.CommandText}\r\n-- Content: {instanceFormat.Content}\r\n-- Id: {instanceFormat.Id}");
            updateInstanceFormatDbCommand.ExecuteNonQuery();
        }

        public void Delete(InstanceFormat instanceFormat)
        {
            if (ConnectIfNecessary() || deleteInstanceFormatDbCommand == null)
            {
                deleteInstanceFormatDbCommand = dbConnection.CreateCommand();
                deleteInstanceFormatDbCommand.Transaction = dbTransaction;
                deleteInstanceFormatDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_format")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceFormatDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceFormatDbCommand.Parameters.Add(dp);
                deleteInstanceFormatDbCommand.Prepare();
            }
            deleteInstanceFormatDbCommand.Transaction = dbTransaction;
            deleteInstanceFormatDbCommand.Parameters[0].Value = instanceFormat.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceFormatDbCommand.CommandText}\r\n-- Id: {instanceFormat.Id}");
            deleteInstanceFormatDbCommand.ExecuteNonQuery();
        }

        public void Insert(InstanceRelationship instanceRelationship)
        {
            if (instanceRelationship.Id == null) instanceRelationship.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceRelationshipDbCommand == null)
            {
                insertInstanceRelationshipDbCommand = dbConnection.CreateCommand();
                insertInstanceRelationshipDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("superinstanceid")}, {Quote("subinstanceid")}, {Quote("instancerelationshiptypeid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Superinstanceid, @Subinstanceid, @Instancerelationshiptypeid)";
                var dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Superinstanceid";
                dp.DbType = DbType.Guid;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Subinstanceid";
                dp.DbType = DbType.Guid;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Instancerelationshiptypeid";
                dp.DbType = DbType.Guid;
                insertInstanceRelationshipDbCommand.Parameters.Add(dp);
                insertInstanceRelationshipDbCommand.Transaction = dbTransaction;
                insertInstanceRelationshipDbCommand.Prepare();
            }
            insertInstanceRelationshipDbCommand.Transaction = dbTransaction;
            insertInstanceRelationshipDbCommand.Parameters[0].Value = (object)instanceRelationship.Id ?? DBNull.Value;
            insertInstanceRelationshipDbCommand.Parameters[1].Value = (object)instanceRelationship.Content ?? DBNull.Value;
            insertInstanceRelationshipDbCommand.Parameters[2].Value = (object)instanceRelationship.CreationTime ?? DBNull.Value;
            insertInstanceRelationshipDbCommand.Parameters[3].Value = (object)instanceRelationship.CreationUserId ?? DBNull.Value;
            insertInstanceRelationshipDbCommand.Parameters[4].Value = (object)instanceRelationship.Superinstanceid ?? DBNull.Value;
            insertInstanceRelationshipDbCommand.Parameters[5].Value = (object)instanceRelationship.Subinstanceid ?? DBNull.Value;
            insertInstanceRelationshipDbCommand.Parameters[6].Value = (object)instanceRelationship.Instancerelationshiptypeid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceRelationshipDbCommand.CommandText}\r\n-- Id: {instanceRelationship.Id}\r\n-- Content: {instanceRelationship.Content}\r\n-- CreationTime: {instanceRelationship.CreationTime}\r\n-- CreationUserId: {instanceRelationship.CreationUserId}\r\n-- Superinstanceid: {instanceRelationship.Superinstanceid}\r\n-- Subinstanceid: {instanceRelationship.Subinstanceid}\r\n-- Instancerelationshiptypeid: {instanceRelationship.Instancerelationshiptypeid}");
            insertInstanceRelationshipDbCommand.ExecuteNonQuery();
        }

        public void Update(InstanceRelationship instanceRelationship)
        {
            if (ConnectIfNecessary() || updateInstanceRelationshipDbCommand == null)
            {
                updateInstanceRelationshipDbCommand = dbConnection.CreateCommand();
                updateInstanceRelationshipDbCommand.Transaction = dbTransaction;
                updateInstanceRelationshipDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("superinstanceid")} = @Superinstanceid, {Quote("subinstanceid")} = @Subinstanceid, {Quote("instancerelationshiptypeid")} = @Instancerelationshiptypeid WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Superinstanceid";
                dp.DbType = DbType.Guid;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Subinstanceid";
                dp.DbType = DbType.Guid;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Instancerelationshiptypeid";
                dp.DbType = DbType.Guid;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceRelationshipDbCommand.Parameters.Add(dp);
                updateInstanceRelationshipDbCommand.Prepare();
            }
            updateInstanceRelationshipDbCommand.Transaction = dbTransaction;
            updateInstanceRelationshipDbCommand.Parameters[0].Value = (object)instanceRelationship.Content ?? DBNull.Value;
            updateInstanceRelationshipDbCommand.Parameters[1].Value = (object)instanceRelationship.CreationTime ?? DBNull.Value;
            updateInstanceRelationshipDbCommand.Parameters[2].Value = (object)instanceRelationship.CreationUserId ?? DBNull.Value;
            updateInstanceRelationshipDbCommand.Parameters[3].Value = (object)instanceRelationship.Superinstanceid ?? DBNull.Value;
            updateInstanceRelationshipDbCommand.Parameters[4].Value = (object)instanceRelationship.Subinstanceid ?? DBNull.Value;
            updateInstanceRelationshipDbCommand.Parameters[5].Value = (object)instanceRelationship.Instancerelationshiptypeid ?? DBNull.Value;
            updateInstanceRelationshipDbCommand.Parameters[6].Value = instanceRelationship.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceRelationshipDbCommand.CommandText}\r\n-- Content: {instanceRelationship.Content}\r\n-- CreationTime: {instanceRelationship.CreationTime}\r\n-- CreationUserId: {instanceRelationship.CreationUserId}\r\n-- Superinstanceid: {instanceRelationship.Superinstanceid}\r\n-- Subinstanceid: {instanceRelationship.Subinstanceid}\r\n-- Instancerelationshiptypeid: {instanceRelationship.Instancerelationshiptypeid}\r\n-- Id: {instanceRelationship.Id}");
            updateInstanceRelationshipDbCommand.ExecuteNonQuery();
        }

        public void Delete(InstanceRelationship instanceRelationship)
        {
            if (ConnectIfNecessary() || deleteInstanceRelationshipDbCommand == null)
            {
                deleteInstanceRelationshipDbCommand = dbConnection.CreateCommand();
                deleteInstanceRelationshipDbCommand.Transaction = dbTransaction;
                deleteInstanceRelationshipDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceRelationshipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceRelationshipDbCommand.Parameters.Add(dp);
                deleteInstanceRelationshipDbCommand.Prepare();
            }
            deleteInstanceRelationshipDbCommand.Transaction = dbTransaction;
            deleteInstanceRelationshipDbCommand.Parameters[0].Value = instanceRelationship.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceRelationshipDbCommand.CommandText}\r\n-- Id: {instanceRelationship.Id}");
            deleteInstanceRelationshipDbCommand.ExecuteNonQuery();
        }

        public void Insert(InstanceRelationshipType instanceRelationshipType)
        {
            if (instanceRelationshipType.Id == null) instanceRelationshipType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceRelationshipTypeDbCommand == null)
            {
                insertInstanceRelationshipTypeDbCommand = dbConnection.CreateCommand();
                insertInstanceRelationshipTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                dp = insertInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                insertInstanceRelationshipTypeDbCommand.Transaction = dbTransaction;
                insertInstanceRelationshipTypeDbCommand.Prepare();
            }
            insertInstanceRelationshipTypeDbCommand.Transaction = dbTransaction;
            insertInstanceRelationshipTypeDbCommand.Parameters[0].Value = (object)instanceRelationshipType.Id ?? DBNull.Value;
            insertInstanceRelationshipTypeDbCommand.Parameters[1].Value = (object)instanceRelationshipType.Content ?? DBNull.Value;
            insertInstanceRelationshipTypeDbCommand.Parameters[2].Value = (object)instanceRelationshipType.CreationTime ?? DBNull.Value;
            insertInstanceRelationshipTypeDbCommand.Parameters[3].Value = (object)instanceRelationshipType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceRelationshipTypeDbCommand.CommandText}\r\n-- Id: {instanceRelationshipType.Id}\r\n-- Content: {instanceRelationshipType.Content}\r\n-- CreationTime: {instanceRelationshipType.CreationTime}\r\n-- CreationUserId: {instanceRelationshipType.CreationUserId}");
            insertInstanceRelationshipTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(InstanceRelationshipType instanceRelationshipType)
        {
            if (ConnectIfNecessary() || updateInstanceRelationshipTypeDbCommand == null)
            {
                updateInstanceRelationshipTypeDbCommand = dbConnection.CreateCommand();
                updateInstanceRelationshipTypeDbCommand.Transaction = dbTransaction;
                updateInstanceRelationshipTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                dp = updateInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                updateInstanceRelationshipTypeDbCommand.Prepare();
            }
            updateInstanceRelationshipTypeDbCommand.Transaction = dbTransaction;
            updateInstanceRelationshipTypeDbCommand.Parameters[0].Value = (object)instanceRelationshipType.Content ?? DBNull.Value;
            updateInstanceRelationshipTypeDbCommand.Parameters[1].Value = (object)instanceRelationshipType.CreationTime ?? DBNull.Value;
            updateInstanceRelationshipTypeDbCommand.Parameters[2].Value = (object)instanceRelationshipType.CreationUserId ?? DBNull.Value;
            updateInstanceRelationshipTypeDbCommand.Parameters[3].Value = instanceRelationshipType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceRelationshipTypeDbCommand.CommandText}\r\n-- Content: {instanceRelationshipType.Content}\r\n-- CreationTime: {instanceRelationshipType.CreationTime}\r\n-- CreationUserId: {instanceRelationshipType.CreationUserId}\r\n-- Id: {instanceRelationshipType.Id}");
            updateInstanceRelationshipTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(InstanceRelationshipType instanceRelationshipType)
        {
            if (ConnectIfNecessary() || deleteInstanceRelationshipTypeDbCommand == null)
            {
                deleteInstanceRelationshipTypeDbCommand = dbConnection.CreateCommand();
                deleteInstanceRelationshipTypeDbCommand.Transaction = dbTransaction;
                deleteInstanceRelationshipTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceRelationshipTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceRelationshipTypeDbCommand.Parameters.Add(dp);
                deleteInstanceRelationshipTypeDbCommand.Prepare();
            }
            deleteInstanceRelationshipTypeDbCommand.Transaction = dbTransaction;
            deleteInstanceRelationshipTypeDbCommand.Parameters[0].Value = instanceRelationshipType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceRelationshipTypeDbCommand.CommandText}\r\n-- Id: {instanceRelationshipType.Id}");
            deleteInstanceRelationshipTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(InstanceSourceMarc instanceSourceMarc)
        {
            if (instanceSourceMarc.Id == null) instanceSourceMarc.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceSourceMarcDbCommand == null)
            {
                insertInstanceSourceMarcDbCommand = dbConnection.CreateCommand();
                insertInstanceSourceMarcDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceSourceMarcDbCommand.Parameters.Add(dp);
                dp = insertInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceSourceMarcDbCommand.Parameters.Add(dp);
                dp = insertInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInstanceSourceMarcDbCommand.Parameters.Add(dp);
                dp = insertInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceSourceMarcDbCommand.Parameters.Add(dp);
                insertInstanceSourceMarcDbCommand.Transaction = dbTransaction;
                insertInstanceSourceMarcDbCommand.Prepare();
            }
            insertInstanceSourceMarcDbCommand.Transaction = dbTransaction;
            insertInstanceSourceMarcDbCommand.Parameters[0].Value = (object)instanceSourceMarc.Id ?? DBNull.Value;
            insertInstanceSourceMarcDbCommand.Parameters[1].Value = (object)instanceSourceMarc.Content ?? DBNull.Value;
            insertInstanceSourceMarcDbCommand.Parameters[2].Value = (object)instanceSourceMarc.CreationTime ?? DBNull.Value;
            insertInstanceSourceMarcDbCommand.Parameters[3].Value = (object)instanceSourceMarc.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceSourceMarcDbCommand.CommandText}\r\n-- Id: {instanceSourceMarc.Id}\r\n-- Content: {instanceSourceMarc.Content}\r\n-- CreationTime: {instanceSourceMarc.CreationTime}\r\n-- CreationUserId: {instanceSourceMarc.CreationUserId}");
            insertInstanceSourceMarcDbCommand.ExecuteNonQuery();
        }

        public void Update(InstanceSourceMarc instanceSourceMarc)
        {
            if (ConnectIfNecessary() || updateInstanceSourceMarcDbCommand == null)
            {
                updateInstanceSourceMarcDbCommand = dbConnection.CreateCommand();
                updateInstanceSourceMarcDbCommand.Transaction = dbTransaction;
                updateInstanceSourceMarcDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceSourceMarcDbCommand.Parameters.Add(dp);
                dp = updateInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInstanceSourceMarcDbCommand.Parameters.Add(dp);
                dp = updateInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceSourceMarcDbCommand.Parameters.Add(dp);
                dp = updateInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceSourceMarcDbCommand.Parameters.Add(dp);
                updateInstanceSourceMarcDbCommand.Prepare();
            }
            updateInstanceSourceMarcDbCommand.Transaction = dbTransaction;
            updateInstanceSourceMarcDbCommand.Parameters[0].Value = (object)instanceSourceMarc.Content ?? DBNull.Value;
            updateInstanceSourceMarcDbCommand.Parameters[1].Value = (object)instanceSourceMarc.CreationTime ?? DBNull.Value;
            updateInstanceSourceMarcDbCommand.Parameters[2].Value = (object)instanceSourceMarc.CreationUserId ?? DBNull.Value;
            updateInstanceSourceMarcDbCommand.Parameters[3].Value = instanceSourceMarc.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceSourceMarcDbCommand.CommandText}\r\n-- Content: {instanceSourceMarc.Content}\r\n-- CreationTime: {instanceSourceMarc.CreationTime}\r\n-- CreationUserId: {instanceSourceMarc.CreationUserId}\r\n-- Id: {instanceSourceMarc.Id}");
            updateInstanceSourceMarcDbCommand.ExecuteNonQuery();
        }

        public void Delete(InstanceSourceMarc instanceSourceMarc)
        {
            if (ConnectIfNecessary() || deleteInstanceSourceMarcDbCommand == null)
            {
                deleteInstanceSourceMarcDbCommand = dbConnection.CreateCommand();
                deleteInstanceSourceMarcDbCommand.Transaction = dbTransaction;
                deleteInstanceSourceMarcDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceSourceMarcDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceSourceMarcDbCommand.Parameters.Add(dp);
                deleteInstanceSourceMarcDbCommand.Prepare();
            }
            deleteInstanceSourceMarcDbCommand.Transaction = dbTransaction;
            deleteInstanceSourceMarcDbCommand.Parameters[0].Value = instanceSourceMarc.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceSourceMarcDbCommand.CommandText}\r\n-- Id: {instanceSourceMarc.Id}");
            deleteInstanceSourceMarcDbCommand.ExecuteNonQuery();
        }

        public void Insert(InstanceStatus instanceStatus)
        {
            if (instanceStatus.Id == null) instanceStatus.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceStatusDbCommand == null)
            {
                insertInstanceStatusDbCommand = dbConnection.CreateCommand();
                insertInstanceStatusDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceStatusDbCommand.Parameters.Add(dp);
                dp = insertInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceStatusDbCommand.Parameters.Add(dp);
                dp = insertInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInstanceStatusDbCommand.Parameters.Add(dp);
                dp = insertInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceStatusDbCommand.Parameters.Add(dp);
                insertInstanceStatusDbCommand.Transaction = dbTransaction;
                insertInstanceStatusDbCommand.Prepare();
            }
            insertInstanceStatusDbCommand.Transaction = dbTransaction;
            insertInstanceStatusDbCommand.Parameters[0].Value = (object)instanceStatus.Id ?? DBNull.Value;
            insertInstanceStatusDbCommand.Parameters[1].Value = (object)instanceStatus.Content ?? DBNull.Value;
            insertInstanceStatusDbCommand.Parameters[2].Value = (object)instanceStatus.CreationTime ?? DBNull.Value;
            insertInstanceStatusDbCommand.Parameters[3].Value = (object)instanceStatus.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceStatusDbCommand.CommandText}\r\n-- Id: {instanceStatus.Id}\r\n-- Content: {instanceStatus.Content}\r\n-- CreationTime: {instanceStatus.CreationTime}\r\n-- CreationUserId: {instanceStatus.CreationUserId}");
            insertInstanceStatusDbCommand.ExecuteNonQuery();
        }

        public void Update(InstanceStatus instanceStatus)
        {
            if (ConnectIfNecessary() || updateInstanceStatusDbCommand == null)
            {
                updateInstanceStatusDbCommand = dbConnection.CreateCommand();
                updateInstanceStatusDbCommand.Transaction = dbTransaction;
                updateInstanceStatusDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceStatusDbCommand.Parameters.Add(dp);
                dp = updateInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInstanceStatusDbCommand.Parameters.Add(dp);
                dp = updateInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceStatusDbCommand.Parameters.Add(dp);
                dp = updateInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceStatusDbCommand.Parameters.Add(dp);
                updateInstanceStatusDbCommand.Prepare();
            }
            updateInstanceStatusDbCommand.Transaction = dbTransaction;
            updateInstanceStatusDbCommand.Parameters[0].Value = (object)instanceStatus.Content ?? DBNull.Value;
            updateInstanceStatusDbCommand.Parameters[1].Value = (object)instanceStatus.CreationTime ?? DBNull.Value;
            updateInstanceStatusDbCommand.Parameters[2].Value = (object)instanceStatus.CreationUserId ?? DBNull.Value;
            updateInstanceStatusDbCommand.Parameters[3].Value = instanceStatus.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceStatusDbCommand.CommandText}\r\n-- Content: {instanceStatus.Content}\r\n-- CreationTime: {instanceStatus.CreationTime}\r\n-- CreationUserId: {instanceStatus.CreationUserId}\r\n-- Id: {instanceStatus.Id}");
            updateInstanceStatusDbCommand.ExecuteNonQuery();
        }

        public void Delete(InstanceStatus instanceStatus)
        {
            if (ConnectIfNecessary() || deleteInstanceStatusDbCommand == null)
            {
                deleteInstanceStatusDbCommand = dbConnection.CreateCommand();
                deleteInstanceStatusDbCommand.Transaction = dbTransaction;
                deleteInstanceStatusDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceStatusDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceStatusDbCommand.Parameters.Add(dp);
                deleteInstanceStatusDbCommand.Prepare();
            }
            deleteInstanceStatusDbCommand.Transaction = dbTransaction;
            deleteInstanceStatusDbCommand.Parameters[0].Value = instanceStatus.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceStatusDbCommand.CommandText}\r\n-- Id: {instanceStatus.Id}");
            deleteInstanceStatusDbCommand.ExecuteNonQuery();
        }

        public void Insert(InstanceType instanceType)
        {
            if (instanceType.Id == null) instanceType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstanceTypeDbCommand == null)
            {
                insertInstanceTypeDbCommand = dbConnection.CreateCommand();
                insertInstanceTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_type")} ({Quote("_id")}, {Quote("jsonb")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")})";
                var dp = insertInstanceTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstanceTypeDbCommand.Parameters.Add(dp);
                dp = insertInstanceTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstanceTypeDbCommand.Parameters.Add(dp);
                insertInstanceTypeDbCommand.Transaction = dbTransaction;
                insertInstanceTypeDbCommand.Prepare();
            }
            insertInstanceTypeDbCommand.Transaction = dbTransaction;
            insertInstanceTypeDbCommand.Parameters[0].Value = (object)instanceType.Id ?? DBNull.Value;
            insertInstanceTypeDbCommand.Parameters[1].Value = (object)instanceType.Content ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstanceTypeDbCommand.CommandText}\r\n-- Id: {instanceType.Id}\r\n-- Content: {instanceType.Content}");
            insertInstanceTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(InstanceType instanceType)
        {
            if (ConnectIfNecessary() || updateInstanceTypeDbCommand == null)
            {
                updateInstanceTypeDbCommand = dbConnection.CreateCommand();
                updateInstanceTypeDbCommand.Transaction = dbTransaction;
                updateInstanceTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")} WHERE {Quote("_id")} = @Id";
                var dp = updateInstanceTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstanceTypeDbCommand.Parameters.Add(dp);
                dp = updateInstanceTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstanceTypeDbCommand.Parameters.Add(dp);
                updateInstanceTypeDbCommand.Prepare();
            }
            updateInstanceTypeDbCommand.Transaction = dbTransaction;
            updateInstanceTypeDbCommand.Parameters[0].Value = (object)instanceType.Content ?? DBNull.Value;
            updateInstanceTypeDbCommand.Parameters[1].Value = instanceType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstanceTypeDbCommand.CommandText}\r\n-- Content: {instanceType.Content}\r\n-- Id: {instanceType.Id}");
            updateInstanceTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(InstanceType instanceType)
        {
            if (ConnectIfNecessary() || deleteInstanceTypeDbCommand == null)
            {
                deleteInstanceTypeDbCommand = dbConnection.CreateCommand();
                deleteInstanceTypeDbCommand.Transaction = dbTransaction;
                deleteInstanceTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstanceTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstanceTypeDbCommand.Parameters.Add(dp);
                deleteInstanceTypeDbCommand.Prepare();
            }
            deleteInstanceTypeDbCommand.Transaction = dbTransaction;
            deleteInstanceTypeDbCommand.Parameters[0].Value = instanceType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstanceTypeDbCommand.CommandText}\r\n-- Id: {instanceType.Id}");
            deleteInstanceTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Institution institution)
        {
            if (institution.Id == null) institution.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInstitutionDbCommand == null)
            {
                insertInstitutionDbCommand = dbConnection.CreateCommand();
                insertInstitutionDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInstitutionDbCommand.Parameters.Add(dp);
                dp = insertInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstitutionDbCommand.Parameters.Add(dp);
                dp = insertInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInstitutionDbCommand.Parameters.Add(dp);
                dp = insertInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInstitutionDbCommand.Parameters.Add(dp);
                insertInstitutionDbCommand.Transaction = dbTransaction;
                insertInstitutionDbCommand.Prepare();
            }
            insertInstitutionDbCommand.Transaction = dbTransaction;
            insertInstitutionDbCommand.Parameters[0].Value = (object)institution.Id ?? DBNull.Value;
            insertInstitutionDbCommand.Parameters[1].Value = (object)institution.Content ?? DBNull.Value;
            insertInstitutionDbCommand.Parameters[2].Value = (object)institution.CreationTime ?? DBNull.Value;
            insertInstitutionDbCommand.Parameters[3].Value = (object)institution.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInstitutionDbCommand.CommandText}\r\n-- Id: {institution.Id}\r\n-- Content: {institution.Content}\r\n-- CreationTime: {institution.CreationTime}\r\n-- CreationUserId: {institution.CreationUserId}");
            insertInstitutionDbCommand.ExecuteNonQuery();
        }

        public void Update(Institution institution)
        {
            if (ConnectIfNecessary() || updateInstitutionDbCommand == null)
            {
                updateInstitutionDbCommand = dbConnection.CreateCommand();
                updateInstitutionDbCommand.Transaction = dbTransaction;
                updateInstitutionDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstitutionDbCommand.Parameters.Add(dp);
                dp = updateInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInstitutionDbCommand.Parameters.Add(dp);
                dp = updateInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInstitutionDbCommand.Parameters.Add(dp);
                dp = updateInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInstitutionDbCommand.Parameters.Add(dp);
                updateInstitutionDbCommand.Prepare();
            }
            updateInstitutionDbCommand.Transaction = dbTransaction;
            updateInstitutionDbCommand.Parameters[0].Value = (object)institution.Content ?? DBNull.Value;
            updateInstitutionDbCommand.Parameters[1].Value = (object)institution.CreationTime ?? DBNull.Value;
            updateInstitutionDbCommand.Parameters[2].Value = (object)institution.CreationUserId ?? DBNull.Value;
            updateInstitutionDbCommand.Parameters[3].Value = institution.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInstitutionDbCommand.CommandText}\r\n-- Content: {institution.Content}\r\n-- CreationTime: {institution.CreationTime}\r\n-- CreationUserId: {institution.CreationUserId}\r\n-- Id: {institution.Id}");
            updateInstitutionDbCommand.ExecuteNonQuery();
        }

        public void Delete(Institution institution)
        {
            if (ConnectIfNecessary() || deleteInstitutionDbCommand == null)
            {
                deleteInstitutionDbCommand = dbConnection.CreateCommand();
                deleteInstitutionDbCommand.Transaction = dbTransaction;
                deleteInstitutionDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")} WHERE {Quote("_id")} = @Id";
                var dp = deleteInstitutionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInstitutionDbCommand.Parameters.Add(dp);
                deleteInstitutionDbCommand.Prepare();
            }
            deleteInstitutionDbCommand.Transaction = dbTransaction;
            deleteInstitutionDbCommand.Parameters[0].Value = institution.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInstitutionDbCommand.CommandText}\r\n-- Id: {institution.Id}");
            deleteInstitutionDbCommand.ExecuteNonQuery();
        }

        public void Insert(Interface @interface)
        {
            if (@interface.Id == null) @interface.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertInterfaceDbCommand == null)
            {
                insertInterfaceDbCommand = dbConnection.CreateCommand();
                insertInterfaceDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertInterfaceDbCommand.Parameters.Add(dp);
                dp = insertInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInterfaceDbCommand.Parameters.Add(dp);
                dp = insertInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertInterfaceDbCommand.Parameters.Add(dp);
                dp = insertInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertInterfaceDbCommand.Parameters.Add(dp);
                insertInterfaceDbCommand.Transaction = dbTransaction;
                insertInterfaceDbCommand.Prepare();
            }
            insertInterfaceDbCommand.Transaction = dbTransaction;
            insertInterfaceDbCommand.Parameters[0].Value = (object)@interface.Id ?? DBNull.Value;
            insertInterfaceDbCommand.Parameters[1].Value = (object)@interface.Content ?? DBNull.Value;
            insertInterfaceDbCommand.Parameters[2].Value = (object)@interface.CreationTime ?? DBNull.Value;
            insertInterfaceDbCommand.Parameters[3].Value = (object)@interface.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertInterfaceDbCommand.CommandText}\r\n-- Id: {@interface.Id}\r\n-- Content: {@interface.Content}\r\n-- CreationTime: {@interface.CreationTime}\r\n-- CreationUserId: {@interface.CreationUserId}");
            insertInterfaceDbCommand.ExecuteNonQuery();
        }

        public void Update(Interface @interface)
        {
            if (ConnectIfNecessary() || updateInterfaceDbCommand == null)
            {
                updateInterfaceDbCommand = dbConnection.CreateCommand();
                updateInterfaceDbCommand.Transaction = dbTransaction;
                updateInterfaceDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInterfaceDbCommand.Parameters.Add(dp);
                dp = updateInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateInterfaceDbCommand.Parameters.Add(dp);
                dp = updateInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateInterfaceDbCommand.Parameters.Add(dp);
                dp = updateInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateInterfaceDbCommand.Parameters.Add(dp);
                updateInterfaceDbCommand.Prepare();
            }
            updateInterfaceDbCommand.Transaction = dbTransaction;
            updateInterfaceDbCommand.Parameters[0].Value = (object)@interface.Content ?? DBNull.Value;
            updateInterfaceDbCommand.Parameters[1].Value = (object)@interface.CreationTime ?? DBNull.Value;
            updateInterfaceDbCommand.Parameters[2].Value = (object)@interface.CreationUserId ?? DBNull.Value;
            updateInterfaceDbCommand.Parameters[3].Value = @interface.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateInterfaceDbCommand.CommandText}\r\n-- Content: {@interface.Content}\r\n-- CreationTime: {@interface.CreationTime}\r\n-- CreationUserId: {@interface.CreationUserId}\r\n-- Id: {@interface.Id}");
            updateInterfaceDbCommand.ExecuteNonQuery();
        }

        public void Delete(Interface @interface)
        {
            if (ConnectIfNecessary() || deleteInterfaceDbCommand == null)
            {
                deleteInterfaceDbCommand = dbConnection.CreateCommand();
                deleteInterfaceDbCommand.Transaction = dbTransaction;
                deleteInterfaceDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")} WHERE {Quote("id")} = @Id";
                var dp = deleteInterfaceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteInterfaceDbCommand.Parameters.Add(dp);
                deleteInterfaceDbCommand.Prepare();
            }
            deleteInterfaceDbCommand.Transaction = dbTransaction;
            deleteInterfaceDbCommand.Parameters[0].Value = @interface.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteInterfaceDbCommand.CommandText}\r\n-- Id: {@interface.Id}");
            deleteInterfaceDbCommand.ExecuteNonQuery();
        }

        public void Insert(Item item)
        {
            if (item.Id == null) item.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertItemDbCommand == null)
            {
                insertItemDbCommand = dbConnection.CreateCommand();
                insertItemDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("holdingsrecordid")}, {Quote("permanentloantypeid")}, {Quote("temporaryloantypeid")}, {Quote("materialtypeid")}, {Quote("permanentlocationid")}, {Quote("temporarylocationid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Holdingsrecordid, @Permanentloantypeid, @Temporaryloantypeid, @Materialtypeid, @Permanentlocationid, @Temporarylocationid)";
                var dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Holdingsrecordid";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Permanentloantypeid";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Temporaryloantypeid";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Materialtypeid";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Permanentlocationid";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                dp = insertItemDbCommand.CreateParameter();
                dp.ParameterName = "@Temporarylocationid";
                dp.DbType = DbType.Guid;
                insertItemDbCommand.Parameters.Add(dp);
                insertItemDbCommand.Transaction = dbTransaction;
                insertItemDbCommand.Prepare();
            }
            insertItemDbCommand.Transaction = dbTransaction;
            insertItemDbCommand.Parameters[0].Value = (object)item.Id ?? DBNull.Value;
            insertItemDbCommand.Parameters[1].Value = (object)item.Content ?? DBNull.Value;
            insertItemDbCommand.Parameters[2].Value = (object)item.CreationTime ?? DBNull.Value;
            insertItemDbCommand.Parameters[3].Value = (object)item.CreationUserId ?? DBNull.Value;
            insertItemDbCommand.Parameters[4].Value = (object)item.Holdingsrecordid ?? DBNull.Value;
            insertItemDbCommand.Parameters[5].Value = (object)item.Permanentloantypeid ?? DBNull.Value;
            insertItemDbCommand.Parameters[6].Value = (object)item.Temporaryloantypeid ?? DBNull.Value;
            insertItemDbCommand.Parameters[7].Value = (object)item.Materialtypeid ?? DBNull.Value;
            insertItemDbCommand.Parameters[8].Value = (object)item.Permanentlocationid ?? DBNull.Value;
            insertItemDbCommand.Parameters[9].Value = (object)item.Temporarylocationid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertItemDbCommand.CommandText}\r\n-- Id: {item.Id}\r\n-- Content: {item.Content}\r\n-- CreationTime: {item.CreationTime}\r\n-- CreationUserId: {item.CreationUserId}\r\n-- Holdingsrecordid: {item.Holdingsrecordid}\r\n-- Permanentloantypeid: {item.Permanentloantypeid}\r\n-- Temporaryloantypeid: {item.Temporaryloantypeid}\r\n-- Materialtypeid: {item.Materialtypeid}\r\n-- Permanentlocationid: {item.Permanentlocationid}\r\n-- Temporarylocationid: {item.Temporarylocationid}");
            insertItemDbCommand.ExecuteNonQuery();
        }

        public void Update(Item item)
        {
            if (ConnectIfNecessary() || updateItemDbCommand == null)
            {
                updateItemDbCommand = dbConnection.CreateCommand();
                updateItemDbCommand.Transaction = dbTransaction;
                updateItemDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("holdingsrecordid")} = @Holdingsrecordid, {Quote("permanentloantypeid")} = @Permanentloantypeid, {Quote("temporaryloantypeid")} = @Temporaryloantypeid, {Quote("materialtypeid")} = @Materialtypeid, {Quote("permanentlocationid")} = @Permanentlocationid, {Quote("temporarylocationid")} = @Temporarylocationid WHERE {Quote("_id")} = @Id";
                var dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Holdingsrecordid";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Permanentloantypeid";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Temporaryloantypeid";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Materialtypeid";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Permanentlocationid";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Temporarylocationid";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                dp = updateItemDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateItemDbCommand.Parameters.Add(dp);
                updateItemDbCommand.Prepare();
            }
            updateItemDbCommand.Transaction = dbTransaction;
            updateItemDbCommand.Parameters[0].Value = (object)item.Content ?? DBNull.Value;
            updateItemDbCommand.Parameters[1].Value = (object)item.CreationTime ?? DBNull.Value;
            updateItemDbCommand.Parameters[2].Value = (object)item.CreationUserId ?? DBNull.Value;
            updateItemDbCommand.Parameters[3].Value = (object)item.Holdingsrecordid ?? DBNull.Value;
            updateItemDbCommand.Parameters[4].Value = (object)item.Permanentloantypeid ?? DBNull.Value;
            updateItemDbCommand.Parameters[5].Value = (object)item.Temporaryloantypeid ?? DBNull.Value;
            updateItemDbCommand.Parameters[6].Value = (object)item.Materialtypeid ?? DBNull.Value;
            updateItemDbCommand.Parameters[7].Value = (object)item.Permanentlocationid ?? DBNull.Value;
            updateItemDbCommand.Parameters[8].Value = (object)item.Temporarylocationid ?? DBNull.Value;
            updateItemDbCommand.Parameters[9].Value = item.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateItemDbCommand.CommandText}\r\n-- Content: {item.Content}\r\n-- CreationTime: {item.CreationTime}\r\n-- CreationUserId: {item.CreationUserId}\r\n-- Holdingsrecordid: {item.Holdingsrecordid}\r\n-- Permanentloantypeid: {item.Permanentloantypeid}\r\n-- Temporaryloantypeid: {item.Temporaryloantypeid}\r\n-- Materialtypeid: {item.Materialtypeid}\r\n-- Permanentlocationid: {item.Permanentlocationid}\r\n-- Temporarylocationid: {item.Temporarylocationid}\r\n-- Id: {item.Id}");
            updateItemDbCommand.ExecuteNonQuery();
        }

        public void Delete(Item item)
        {
            if (ConnectIfNecessary() || deleteItemDbCommand == null)
            {
                deleteItemDbCommand = dbConnection.CreateCommand();
                deleteItemDbCommand.Transaction = dbTransaction;
                deleteItemDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")} WHERE {Quote("_id")} = @Id";
                var dp = deleteItemDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteItemDbCommand.Parameters.Add(dp);
                deleteItemDbCommand.Prepare();
            }
            deleteItemDbCommand.Transaction = dbTransaction;
            deleteItemDbCommand.Parameters[0].Value = item.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteItemDbCommand.CommandText}\r\n-- Id: {item.Id}");
            deleteItemDbCommand.ExecuteNonQuery();
        }

        public void Insert(ItemNoteType itemNoteType)
        {
            if (itemNoteType.Id == null) itemNoteType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertItemNoteTypeDbCommand == null)
            {
                insertItemNoteTypeDbCommand = dbConnection.CreateCommand();
                insertItemNoteTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertItemNoteTypeDbCommand.Parameters.Add(dp);
                dp = insertItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertItemNoteTypeDbCommand.Parameters.Add(dp);
                dp = insertItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertItemNoteTypeDbCommand.Parameters.Add(dp);
                dp = insertItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertItemNoteTypeDbCommand.Parameters.Add(dp);
                insertItemNoteTypeDbCommand.Transaction = dbTransaction;
                insertItemNoteTypeDbCommand.Prepare();
            }
            insertItemNoteTypeDbCommand.Transaction = dbTransaction;
            insertItemNoteTypeDbCommand.Parameters[0].Value = (object)itemNoteType.Id ?? DBNull.Value;
            insertItemNoteTypeDbCommand.Parameters[1].Value = (object)itemNoteType.Content ?? DBNull.Value;
            insertItemNoteTypeDbCommand.Parameters[2].Value = (object)itemNoteType.CreationTime ?? DBNull.Value;
            insertItemNoteTypeDbCommand.Parameters[3].Value = (object)itemNoteType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertItemNoteTypeDbCommand.CommandText}\r\n-- Id: {itemNoteType.Id}\r\n-- Content: {itemNoteType.Content}\r\n-- CreationTime: {itemNoteType.CreationTime}\r\n-- CreationUserId: {itemNoteType.CreationUserId}");
            insertItemNoteTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(ItemNoteType itemNoteType)
        {
            if (ConnectIfNecessary() || updateItemNoteTypeDbCommand == null)
            {
                updateItemNoteTypeDbCommand = dbConnection.CreateCommand();
                updateItemNoteTypeDbCommand.Transaction = dbTransaction;
                updateItemNoteTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateItemNoteTypeDbCommand.Parameters.Add(dp);
                dp = updateItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateItemNoteTypeDbCommand.Parameters.Add(dp);
                dp = updateItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateItemNoteTypeDbCommand.Parameters.Add(dp);
                dp = updateItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateItemNoteTypeDbCommand.Parameters.Add(dp);
                updateItemNoteTypeDbCommand.Prepare();
            }
            updateItemNoteTypeDbCommand.Transaction = dbTransaction;
            updateItemNoteTypeDbCommand.Parameters[0].Value = (object)itemNoteType.Content ?? DBNull.Value;
            updateItemNoteTypeDbCommand.Parameters[1].Value = (object)itemNoteType.CreationTime ?? DBNull.Value;
            updateItemNoteTypeDbCommand.Parameters[2].Value = (object)itemNoteType.CreationUserId ?? DBNull.Value;
            updateItemNoteTypeDbCommand.Parameters[3].Value = itemNoteType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateItemNoteTypeDbCommand.CommandText}\r\n-- Content: {itemNoteType.Content}\r\n-- CreationTime: {itemNoteType.CreationTime}\r\n-- CreationUserId: {itemNoteType.CreationUserId}\r\n-- Id: {itemNoteType.Id}");
            updateItemNoteTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(ItemNoteType itemNoteType)
        {
            if (ConnectIfNecessary() || deleteItemNoteTypeDbCommand == null)
            {
                deleteItemNoteTypeDbCommand = dbConnection.CreateCommand();
                deleteItemNoteTypeDbCommand.Transaction = dbTransaction;
                deleteItemNoteTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteItemNoteTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteItemNoteTypeDbCommand.Parameters.Add(dp);
                deleteItemNoteTypeDbCommand.Prepare();
            }
            deleteItemNoteTypeDbCommand.Transaction = dbTransaction;
            deleteItemNoteTypeDbCommand.Parameters[0].Value = itemNoteType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteItemNoteTypeDbCommand.CommandText}\r\n-- Id: {itemNoteType.Id}");
            deleteItemNoteTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Ledger ledger)
        {
            if (ledger.Id == null) ledger.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLedgerDbCommand == null)
            {
                insertLedgerDbCommand = dbConnection.CreateCommand();
                insertLedgerDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLedgerDbCommand.Parameters.Add(dp);
                dp = insertLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLedgerDbCommand.Parameters.Add(dp);
                dp = insertLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLedgerDbCommand.Parameters.Add(dp);
                dp = insertLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLedgerDbCommand.Parameters.Add(dp);
                insertLedgerDbCommand.Transaction = dbTransaction;
                insertLedgerDbCommand.Prepare();
            }
            insertLedgerDbCommand.Transaction = dbTransaction;
            insertLedgerDbCommand.Parameters[0].Value = (object)ledger.Id ?? DBNull.Value;
            insertLedgerDbCommand.Parameters[1].Value = (object)ledger.Content ?? DBNull.Value;
            insertLedgerDbCommand.Parameters[2].Value = (object)ledger.CreationTime ?? DBNull.Value;
            insertLedgerDbCommand.Parameters[3].Value = (object)ledger.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLedgerDbCommand.CommandText}\r\n-- Id: {ledger.Id}\r\n-- Content: {ledger.Content}\r\n-- CreationTime: {ledger.CreationTime}\r\n-- CreationUserId: {ledger.CreationUserId}");
            insertLedgerDbCommand.ExecuteNonQuery();
        }

        public void Update(Ledger ledger)
        {
            if (ConnectIfNecessary() || updateLedgerDbCommand == null)
            {
                updateLedgerDbCommand = dbConnection.CreateCommand();
                updateLedgerDbCommand.Transaction = dbTransaction;
                updateLedgerDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLedgerDbCommand.Parameters.Add(dp);
                dp = updateLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLedgerDbCommand.Parameters.Add(dp);
                dp = updateLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLedgerDbCommand.Parameters.Add(dp);
                dp = updateLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLedgerDbCommand.Parameters.Add(dp);
                updateLedgerDbCommand.Prepare();
            }
            updateLedgerDbCommand.Transaction = dbTransaction;
            updateLedgerDbCommand.Parameters[0].Value = (object)ledger.Content ?? DBNull.Value;
            updateLedgerDbCommand.Parameters[1].Value = (object)ledger.CreationTime ?? DBNull.Value;
            updateLedgerDbCommand.Parameters[2].Value = (object)ledger.CreationUserId ?? DBNull.Value;
            updateLedgerDbCommand.Parameters[3].Value = ledger.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLedgerDbCommand.CommandText}\r\n-- Content: {ledger.Content}\r\n-- CreationTime: {ledger.CreationTime}\r\n-- CreationUserId: {ledger.CreationUserId}\r\n-- Id: {ledger.Id}");
            updateLedgerDbCommand.ExecuteNonQuery();
        }

        public void Delete(Ledger ledger)
        {
            if (ConnectIfNecessary() || deleteLedgerDbCommand == null)
            {
                deleteLedgerDbCommand = dbConnection.CreateCommand();
                deleteLedgerDbCommand.Transaction = dbTransaction;
                deleteLedgerDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")} WHERE {Quote("id")} = @Id";
                var dp = deleteLedgerDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLedgerDbCommand.Parameters.Add(dp);
                deleteLedgerDbCommand.Prepare();
            }
            deleteLedgerDbCommand.Transaction = dbTransaction;
            deleteLedgerDbCommand.Parameters[0].Value = ledger.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLedgerDbCommand.CommandText}\r\n-- Id: {ledger.Id}");
            deleteLedgerDbCommand.ExecuteNonQuery();
        }

        public void Insert(Library library)
        {
            if (library.Id == null) library.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLibraryDbCommand == null)
            {
                insertLibraryDbCommand = dbConnection.CreateCommand();
                insertLibraryDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("campusid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Campusid)";
                var dp = insertLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLibraryDbCommand.Parameters.Add(dp);
                dp = insertLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLibraryDbCommand.Parameters.Add(dp);
                dp = insertLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLibraryDbCommand.Parameters.Add(dp);
                dp = insertLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLibraryDbCommand.Parameters.Add(dp);
                dp = insertLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Campusid";
                dp.DbType = DbType.Guid;
                insertLibraryDbCommand.Parameters.Add(dp);
                insertLibraryDbCommand.Transaction = dbTransaction;
                insertLibraryDbCommand.Prepare();
            }
            insertLibraryDbCommand.Transaction = dbTransaction;
            insertLibraryDbCommand.Parameters[0].Value = (object)library.Id ?? DBNull.Value;
            insertLibraryDbCommand.Parameters[1].Value = (object)library.Content ?? DBNull.Value;
            insertLibraryDbCommand.Parameters[2].Value = (object)library.CreationTime ?? DBNull.Value;
            insertLibraryDbCommand.Parameters[3].Value = (object)library.CreationUserId ?? DBNull.Value;
            insertLibraryDbCommand.Parameters[4].Value = (object)library.Campusid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLibraryDbCommand.CommandText}\r\n-- Id: {library.Id}\r\n-- Content: {library.Content}\r\n-- CreationTime: {library.CreationTime}\r\n-- CreationUserId: {library.CreationUserId}\r\n-- Campusid: {library.Campusid}");
            insertLibraryDbCommand.ExecuteNonQuery();
        }

        public void Update(Library library)
        {
            if (ConnectIfNecessary() || updateLibraryDbCommand == null)
            {
                updateLibraryDbCommand = dbConnection.CreateCommand();
                updateLibraryDbCommand.Transaction = dbTransaction;
                updateLibraryDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("campusid")} = @Campusid WHERE {Quote("_id")} = @Id";
                var dp = updateLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLibraryDbCommand.Parameters.Add(dp);
                dp = updateLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLibraryDbCommand.Parameters.Add(dp);
                dp = updateLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLibraryDbCommand.Parameters.Add(dp);
                dp = updateLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Campusid";
                dp.DbType = DbType.Guid;
                updateLibraryDbCommand.Parameters.Add(dp);
                dp = updateLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLibraryDbCommand.Parameters.Add(dp);
                updateLibraryDbCommand.Prepare();
            }
            updateLibraryDbCommand.Transaction = dbTransaction;
            updateLibraryDbCommand.Parameters[0].Value = (object)library.Content ?? DBNull.Value;
            updateLibraryDbCommand.Parameters[1].Value = (object)library.CreationTime ?? DBNull.Value;
            updateLibraryDbCommand.Parameters[2].Value = (object)library.CreationUserId ?? DBNull.Value;
            updateLibraryDbCommand.Parameters[3].Value = (object)library.Campusid ?? DBNull.Value;
            updateLibraryDbCommand.Parameters[4].Value = library.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLibraryDbCommand.CommandText}\r\n-- Content: {library.Content}\r\n-- CreationTime: {library.CreationTime}\r\n-- CreationUserId: {library.CreationUserId}\r\n-- Campusid: {library.Campusid}\r\n-- Id: {library.Id}");
            updateLibraryDbCommand.ExecuteNonQuery();
        }

        public void Delete(Library library)
        {
            if (ConnectIfNecessary() || deleteLibraryDbCommand == null)
            {
                deleteLibraryDbCommand = dbConnection.CreateCommand();
                deleteLibraryDbCommand.Transaction = dbTransaction;
                deleteLibraryDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")} WHERE {Quote("_id")} = @Id";
                var dp = deleteLibraryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLibraryDbCommand.Parameters.Add(dp);
                deleteLibraryDbCommand.Prepare();
            }
            deleteLibraryDbCommand.Transaction = dbTransaction;
            deleteLibraryDbCommand.Parameters[0].Value = library.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLibraryDbCommand.CommandText}\r\n-- Id: {library.Id}");
            deleteLibraryDbCommand.ExecuteNonQuery();
        }

        public void Insert(Loan loan)
        {
            if (loan.Id == null) loan.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLoanDbCommand == null)
            {
                insertLoanDbCommand = dbConnection.CreateCommand();
                insertLoanDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLoanDbCommand.Parameters.Add(dp);
                dp = insertLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoanDbCommand.Parameters.Add(dp);
                dp = insertLoanDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLoanDbCommand.Parameters.Add(dp);
                dp = insertLoanDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoanDbCommand.Parameters.Add(dp);
                insertLoanDbCommand.Transaction = dbTransaction;
                insertLoanDbCommand.Prepare();
            }
            insertLoanDbCommand.Transaction = dbTransaction;
            insertLoanDbCommand.Parameters[0].Value = (object)loan.Id ?? DBNull.Value;
            insertLoanDbCommand.Parameters[1].Value = (object)loan.Content ?? DBNull.Value;
            insertLoanDbCommand.Parameters[2].Value = (object)loan.CreationTime ?? DBNull.Value;
            insertLoanDbCommand.Parameters[3].Value = (object)loan.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLoanDbCommand.CommandText}\r\n-- Id: {loan.Id}\r\n-- Content: {loan.Content}\r\n-- CreationTime: {loan.CreationTime}\r\n-- CreationUserId: {loan.CreationUserId}");
            insertLoanDbCommand.ExecuteNonQuery();
        }

        public void Update(Loan loan)
        {
            if (ConnectIfNecessary() || updateLoanDbCommand == null)
            {
                updateLoanDbCommand = dbConnection.CreateCommand();
                updateLoanDbCommand.Transaction = dbTransaction;
                updateLoanDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoanDbCommand.Parameters.Add(dp);
                dp = updateLoanDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLoanDbCommand.Parameters.Add(dp);
                dp = updateLoanDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoanDbCommand.Parameters.Add(dp);
                dp = updateLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLoanDbCommand.Parameters.Add(dp);
                updateLoanDbCommand.Prepare();
            }
            updateLoanDbCommand.Transaction = dbTransaction;
            updateLoanDbCommand.Parameters[0].Value = (object)loan.Content ?? DBNull.Value;
            updateLoanDbCommand.Parameters[1].Value = (object)loan.CreationTime ?? DBNull.Value;
            updateLoanDbCommand.Parameters[2].Value = (object)loan.CreationUserId ?? DBNull.Value;
            updateLoanDbCommand.Parameters[3].Value = loan.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLoanDbCommand.CommandText}\r\n-- Content: {loan.Content}\r\n-- CreationTime: {loan.CreationTime}\r\n-- CreationUserId: {loan.CreationUserId}\r\n-- Id: {loan.Id}");
            updateLoanDbCommand.ExecuteNonQuery();
        }

        public void Delete(Loan loan)
        {
            if (ConnectIfNecessary() || deleteLoanDbCommand == null)
            {
                deleteLoanDbCommand = dbConnection.CreateCommand();
                deleteLoanDbCommand.Transaction = dbTransaction;
                deleteLoanDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")} WHERE {Quote("_id")} = @Id";
                var dp = deleteLoanDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLoanDbCommand.Parameters.Add(dp);
                deleteLoanDbCommand.Prepare();
            }
            deleteLoanDbCommand.Transaction = dbTransaction;
            deleteLoanDbCommand.Parameters[0].Value = loan.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLoanDbCommand.CommandText}\r\n-- Id: {loan.Id}");
            deleteLoanDbCommand.ExecuteNonQuery();
        }

        public void Insert(LoanPolicy loanPolicy)
        {
            if (loanPolicy.Id == null) loanPolicy.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLoanPolicyDbCommand == null)
            {
                insertLoanPolicyDbCommand = dbConnection.CreateCommand();
                insertLoanPolicyDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("loanspolicy_fixedduedatescheduleid")}, {Quote("renewalspolicy_alternatefixedduedatescheduleid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @LoanspolicyFixedduedatescheduleid, @RenewalspolicyAlternatefixedduedatescheduleid)";
                var dp = insertLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLoanPolicyDbCommand.Parameters.Add(dp);
                dp = insertLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoanPolicyDbCommand.Parameters.Add(dp);
                dp = insertLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLoanPolicyDbCommand.Parameters.Add(dp);
                dp = insertLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoanPolicyDbCommand.Parameters.Add(dp);
                dp = insertLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@LoanspolicyFixedduedatescheduleid";
                dp.DbType = DbType.Guid;
                insertLoanPolicyDbCommand.Parameters.Add(dp);
                dp = insertLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@RenewalspolicyAlternatefixedduedatescheduleid";
                dp.DbType = DbType.Guid;
                insertLoanPolicyDbCommand.Parameters.Add(dp);
                insertLoanPolicyDbCommand.Transaction = dbTransaction;
                insertLoanPolicyDbCommand.Prepare();
            }
            insertLoanPolicyDbCommand.Transaction = dbTransaction;
            insertLoanPolicyDbCommand.Parameters[0].Value = (object)loanPolicy.Id ?? DBNull.Value;
            insertLoanPolicyDbCommand.Parameters[1].Value = (object)loanPolicy.Content ?? DBNull.Value;
            insertLoanPolicyDbCommand.Parameters[2].Value = (object)loanPolicy.CreationTime ?? DBNull.Value;
            insertLoanPolicyDbCommand.Parameters[3].Value = (object)loanPolicy.CreationUserId ?? DBNull.Value;
            insertLoanPolicyDbCommand.Parameters[4].Value = (object)loanPolicy.LoanspolicyFixedduedatescheduleid ?? DBNull.Value;
            insertLoanPolicyDbCommand.Parameters[5].Value = (object)loanPolicy.RenewalspolicyAlternatefixedduedatescheduleid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLoanPolicyDbCommand.CommandText}\r\n-- Id: {loanPolicy.Id}\r\n-- Content: {loanPolicy.Content}\r\n-- CreationTime: {loanPolicy.CreationTime}\r\n-- CreationUserId: {loanPolicy.CreationUserId}\r\n-- LoanspolicyFixedduedatescheduleid: {loanPolicy.LoanspolicyFixedduedatescheduleid}\r\n-- RenewalspolicyAlternatefixedduedatescheduleid: {loanPolicy.RenewalspolicyAlternatefixedduedatescheduleid}");
            insertLoanPolicyDbCommand.ExecuteNonQuery();
        }

        public void Update(LoanPolicy loanPolicy)
        {
            if (ConnectIfNecessary() || updateLoanPolicyDbCommand == null)
            {
                updateLoanPolicyDbCommand = dbConnection.CreateCommand();
                updateLoanPolicyDbCommand.Transaction = dbTransaction;
                updateLoanPolicyDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("loanspolicy_fixedduedatescheduleid")} = @LoanspolicyFixedduedatescheduleid, {Quote("renewalspolicy_alternatefixedduedatescheduleid")} = @RenewalspolicyAlternatefixedduedatescheduleid WHERE {Quote("_id")} = @Id";
                var dp = updateLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoanPolicyDbCommand.Parameters.Add(dp);
                dp = updateLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLoanPolicyDbCommand.Parameters.Add(dp);
                dp = updateLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoanPolicyDbCommand.Parameters.Add(dp);
                dp = updateLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@LoanspolicyFixedduedatescheduleid";
                dp.DbType = DbType.Guid;
                updateLoanPolicyDbCommand.Parameters.Add(dp);
                dp = updateLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@RenewalspolicyAlternatefixedduedatescheduleid";
                dp.DbType = DbType.Guid;
                updateLoanPolicyDbCommand.Parameters.Add(dp);
                dp = updateLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLoanPolicyDbCommand.Parameters.Add(dp);
                updateLoanPolicyDbCommand.Prepare();
            }
            updateLoanPolicyDbCommand.Transaction = dbTransaction;
            updateLoanPolicyDbCommand.Parameters[0].Value = (object)loanPolicy.Content ?? DBNull.Value;
            updateLoanPolicyDbCommand.Parameters[1].Value = (object)loanPolicy.CreationTime ?? DBNull.Value;
            updateLoanPolicyDbCommand.Parameters[2].Value = (object)loanPolicy.CreationUserId ?? DBNull.Value;
            updateLoanPolicyDbCommand.Parameters[3].Value = (object)loanPolicy.LoanspolicyFixedduedatescheduleid ?? DBNull.Value;
            updateLoanPolicyDbCommand.Parameters[4].Value = (object)loanPolicy.RenewalspolicyAlternatefixedduedatescheduleid ?? DBNull.Value;
            updateLoanPolicyDbCommand.Parameters[5].Value = loanPolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLoanPolicyDbCommand.CommandText}\r\n-- Content: {loanPolicy.Content}\r\n-- CreationTime: {loanPolicy.CreationTime}\r\n-- CreationUserId: {loanPolicy.CreationUserId}\r\n-- LoanspolicyFixedduedatescheduleid: {loanPolicy.LoanspolicyFixedduedatescheduleid}\r\n-- RenewalspolicyAlternatefixedduedatescheduleid: {loanPolicy.RenewalspolicyAlternatefixedduedatescheduleid}\r\n-- Id: {loanPolicy.Id}");
            updateLoanPolicyDbCommand.ExecuteNonQuery();
        }

        public void Delete(LoanPolicy loanPolicy)
        {
            if (ConnectIfNecessary() || deleteLoanPolicyDbCommand == null)
            {
                deleteLoanPolicyDbCommand = dbConnection.CreateCommand();
                deleteLoanPolicyDbCommand.Transaction = dbTransaction;
                deleteLoanPolicyDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")} WHERE {Quote("_id")} = @Id";
                var dp = deleteLoanPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLoanPolicyDbCommand.Parameters.Add(dp);
                deleteLoanPolicyDbCommand.Prepare();
            }
            deleteLoanPolicyDbCommand.Transaction = dbTransaction;
            deleteLoanPolicyDbCommand.Parameters[0].Value = loanPolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLoanPolicyDbCommand.CommandText}\r\n-- Id: {loanPolicy.Id}");
            deleteLoanPolicyDbCommand.ExecuteNonQuery();
        }

        public void Insert(LoanType loanType)
        {
            if (loanType.Id == null) loanType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLoanTypeDbCommand == null)
            {
                insertLoanTypeDbCommand = dbConnection.CreateCommand();
                insertLoanTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLoanTypeDbCommand.Parameters.Add(dp);
                dp = insertLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoanTypeDbCommand.Parameters.Add(dp);
                dp = insertLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLoanTypeDbCommand.Parameters.Add(dp);
                dp = insertLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoanTypeDbCommand.Parameters.Add(dp);
                insertLoanTypeDbCommand.Transaction = dbTransaction;
                insertLoanTypeDbCommand.Prepare();
            }
            insertLoanTypeDbCommand.Transaction = dbTransaction;
            insertLoanTypeDbCommand.Parameters[0].Value = (object)loanType.Id ?? DBNull.Value;
            insertLoanTypeDbCommand.Parameters[1].Value = (object)loanType.Content ?? DBNull.Value;
            insertLoanTypeDbCommand.Parameters[2].Value = (object)loanType.CreationTime ?? DBNull.Value;
            insertLoanTypeDbCommand.Parameters[3].Value = (object)loanType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLoanTypeDbCommand.CommandText}\r\n-- Id: {loanType.Id}\r\n-- Content: {loanType.Content}\r\n-- CreationTime: {loanType.CreationTime}\r\n-- CreationUserId: {loanType.CreationUserId}");
            insertLoanTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(LoanType loanType)
        {
            if (ConnectIfNecessary() || updateLoanTypeDbCommand == null)
            {
                updateLoanTypeDbCommand = dbConnection.CreateCommand();
                updateLoanTypeDbCommand.Transaction = dbTransaction;
                updateLoanTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoanTypeDbCommand.Parameters.Add(dp);
                dp = updateLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLoanTypeDbCommand.Parameters.Add(dp);
                dp = updateLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoanTypeDbCommand.Parameters.Add(dp);
                dp = updateLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLoanTypeDbCommand.Parameters.Add(dp);
                updateLoanTypeDbCommand.Prepare();
            }
            updateLoanTypeDbCommand.Transaction = dbTransaction;
            updateLoanTypeDbCommand.Parameters[0].Value = (object)loanType.Content ?? DBNull.Value;
            updateLoanTypeDbCommand.Parameters[1].Value = (object)loanType.CreationTime ?? DBNull.Value;
            updateLoanTypeDbCommand.Parameters[2].Value = (object)loanType.CreationUserId ?? DBNull.Value;
            updateLoanTypeDbCommand.Parameters[3].Value = loanType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLoanTypeDbCommand.CommandText}\r\n-- Content: {loanType.Content}\r\n-- CreationTime: {loanType.CreationTime}\r\n-- CreationUserId: {loanType.CreationUserId}\r\n-- Id: {loanType.Id}");
            updateLoanTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(LoanType loanType)
        {
            if (ConnectIfNecessary() || deleteLoanTypeDbCommand == null)
            {
                deleteLoanTypeDbCommand = dbConnection.CreateCommand();
                deleteLoanTypeDbCommand.Transaction = dbTransaction;
                deleteLoanTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteLoanTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLoanTypeDbCommand.Parameters.Add(dp);
                deleteLoanTypeDbCommand.Prepare();
            }
            deleteLoanTypeDbCommand.Transaction = dbTransaction;
            deleteLoanTypeDbCommand.Parameters[0].Value = loanType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLoanTypeDbCommand.CommandText}\r\n-- Id: {loanType.Id}");
            deleteLoanTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Location location)
        {
            if (location.Id == null) location.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLocationDbCommand == null)
            {
                insertLocationDbCommand = dbConnection.CreateCommand();
                insertLocationDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("institutionid")}, {Quote("campusid")}, {Quote("libraryid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Institutionid, @Campusid, @Libraryid)";
                var dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLocationDbCommand.Parameters.Add(dp);
                dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLocationDbCommand.Parameters.Add(dp);
                dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLocationDbCommand.Parameters.Add(dp);
                dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLocationDbCommand.Parameters.Add(dp);
                dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Institutionid";
                dp.DbType = DbType.Guid;
                insertLocationDbCommand.Parameters.Add(dp);
                dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Campusid";
                dp.DbType = DbType.Guid;
                insertLocationDbCommand.Parameters.Add(dp);
                dp = insertLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Libraryid";
                dp.DbType = DbType.Guid;
                insertLocationDbCommand.Parameters.Add(dp);
                insertLocationDbCommand.Transaction = dbTransaction;
                insertLocationDbCommand.Prepare();
            }
            insertLocationDbCommand.Transaction = dbTransaction;
            insertLocationDbCommand.Parameters[0].Value = (object)location.Id ?? DBNull.Value;
            insertLocationDbCommand.Parameters[1].Value = (object)location.Content ?? DBNull.Value;
            insertLocationDbCommand.Parameters[2].Value = (object)location.CreationTime ?? DBNull.Value;
            insertLocationDbCommand.Parameters[3].Value = (object)location.CreationUserId ?? DBNull.Value;
            insertLocationDbCommand.Parameters[4].Value = (object)location.Institutionid ?? DBNull.Value;
            insertLocationDbCommand.Parameters[5].Value = (object)location.Campusid ?? DBNull.Value;
            insertLocationDbCommand.Parameters[6].Value = (object)location.Libraryid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLocationDbCommand.CommandText}\r\n-- Id: {location.Id}\r\n-- Content: {location.Content}\r\n-- CreationTime: {location.CreationTime}\r\n-- CreationUserId: {location.CreationUserId}\r\n-- Institutionid: {location.Institutionid}\r\n-- Campusid: {location.Campusid}\r\n-- Libraryid: {location.Libraryid}");
            insertLocationDbCommand.ExecuteNonQuery();
        }

        public void Update(Location location)
        {
            if (ConnectIfNecessary() || updateLocationDbCommand == null)
            {
                updateLocationDbCommand = dbConnection.CreateCommand();
                updateLocationDbCommand.Transaction = dbTransaction;
                updateLocationDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("institutionid")} = @Institutionid, {Quote("campusid")} = @Campusid, {Quote("libraryid")} = @Libraryid WHERE {Quote("_id")} = @Id";
                var dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLocationDbCommand.Parameters.Add(dp);
                dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLocationDbCommand.Parameters.Add(dp);
                dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLocationDbCommand.Parameters.Add(dp);
                dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Institutionid";
                dp.DbType = DbType.Guid;
                updateLocationDbCommand.Parameters.Add(dp);
                dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Campusid";
                dp.DbType = DbType.Guid;
                updateLocationDbCommand.Parameters.Add(dp);
                dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Libraryid";
                dp.DbType = DbType.Guid;
                updateLocationDbCommand.Parameters.Add(dp);
                dp = updateLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLocationDbCommand.Parameters.Add(dp);
                updateLocationDbCommand.Prepare();
            }
            updateLocationDbCommand.Transaction = dbTransaction;
            updateLocationDbCommand.Parameters[0].Value = (object)location.Content ?? DBNull.Value;
            updateLocationDbCommand.Parameters[1].Value = (object)location.CreationTime ?? DBNull.Value;
            updateLocationDbCommand.Parameters[2].Value = (object)location.CreationUserId ?? DBNull.Value;
            updateLocationDbCommand.Parameters[3].Value = (object)location.Institutionid ?? DBNull.Value;
            updateLocationDbCommand.Parameters[4].Value = (object)location.Campusid ?? DBNull.Value;
            updateLocationDbCommand.Parameters[5].Value = (object)location.Libraryid ?? DBNull.Value;
            updateLocationDbCommand.Parameters[6].Value = location.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLocationDbCommand.CommandText}\r\n-- Content: {location.Content}\r\n-- CreationTime: {location.CreationTime}\r\n-- CreationUserId: {location.CreationUserId}\r\n-- Institutionid: {location.Institutionid}\r\n-- Campusid: {location.Campusid}\r\n-- Libraryid: {location.Libraryid}\r\n-- Id: {location.Id}");
            updateLocationDbCommand.ExecuteNonQuery();
        }

        public void Delete(Location location)
        {
            if (ConnectIfNecessary() || deleteLocationDbCommand == null)
            {
                deleteLocationDbCommand = dbConnection.CreateCommand();
                deleteLocationDbCommand.Transaction = dbTransaction;
                deleteLocationDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")} WHERE {Quote("_id")} = @Id";
                var dp = deleteLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLocationDbCommand.Parameters.Add(dp);
                deleteLocationDbCommand.Prepare();
            }
            deleteLocationDbCommand.Transaction = dbTransaction;
            deleteLocationDbCommand.Parameters[0].Value = location.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLocationDbCommand.CommandText}\r\n-- Id: {location.Id}");
            deleteLocationDbCommand.ExecuteNonQuery();
        }

        public void Insert(Login login)
        {
            if (login.Id == null) login.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertLoginDbCommand == null)
            {
                insertLoginDbCommand = dbConnection.CreateCommand();
                insertLoginDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertLoginDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertLoginDbCommand.Parameters.Add(dp);
                dp = insertLoginDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoginDbCommand.Parameters.Add(dp);
                dp = insertLoginDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertLoginDbCommand.Parameters.Add(dp);
                dp = insertLoginDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertLoginDbCommand.Parameters.Add(dp);
                insertLoginDbCommand.Transaction = dbTransaction;
                insertLoginDbCommand.Prepare();
            }
            insertLoginDbCommand.Transaction = dbTransaction;
            insertLoginDbCommand.Parameters[0].Value = (object)login.Id ?? DBNull.Value;
            insertLoginDbCommand.Parameters[1].Value = (object)login.Content ?? DBNull.Value;
            insertLoginDbCommand.Parameters[2].Value = (object)login.CreationTime ?? DBNull.Value;
            insertLoginDbCommand.Parameters[3].Value = (object)login.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertLoginDbCommand.CommandText}\r\n-- Id: {login.Id}\r\n-- Content: {login.Content}\r\n-- CreationTime: {login.CreationTime}\r\n-- CreationUserId: {login.CreationUserId}");
            insertLoginDbCommand.ExecuteNonQuery();
        }

        public void Update(Login login)
        {
            if (ConnectIfNecessary() || updateLoginDbCommand == null)
            {
                updateLoginDbCommand = dbConnection.CreateCommand();
                updateLoginDbCommand.Transaction = dbTransaction;
                updateLoginDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateLoginDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoginDbCommand.Parameters.Add(dp);
                dp = updateLoginDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateLoginDbCommand.Parameters.Add(dp);
                dp = updateLoginDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateLoginDbCommand.Parameters.Add(dp);
                dp = updateLoginDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateLoginDbCommand.Parameters.Add(dp);
                updateLoginDbCommand.Prepare();
            }
            updateLoginDbCommand.Transaction = dbTransaction;
            updateLoginDbCommand.Parameters[0].Value = (object)login.Content ?? DBNull.Value;
            updateLoginDbCommand.Parameters[1].Value = (object)login.CreationTime ?? DBNull.Value;
            updateLoginDbCommand.Parameters[2].Value = (object)login.CreationUserId ?? DBNull.Value;
            updateLoginDbCommand.Parameters[3].Value = login.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateLoginDbCommand.CommandText}\r\n-- Content: {login.Content}\r\n-- CreationTime: {login.CreationTime}\r\n-- CreationUserId: {login.CreationUserId}\r\n-- Id: {login.Id}");
            updateLoginDbCommand.ExecuteNonQuery();
        }

        public void Delete(Login login)
        {
            if (ConnectIfNecessary() || deleteLoginDbCommand == null)
            {
                deleteLoginDbCommand = dbConnection.CreateCommand();
                deleteLoginDbCommand.Transaction = dbTransaction;
                deleteLoginDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")} WHERE {Quote("_id")} = @Id";
                var dp = deleteLoginDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteLoginDbCommand.Parameters.Add(dp);
                deleteLoginDbCommand.Prepare();
            }
            deleteLoginDbCommand.Transaction = dbTransaction;
            deleteLoginDbCommand.Parameters[0].Value = login.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteLoginDbCommand.CommandText}\r\n-- Id: {login.Id}");
            deleteLoginDbCommand.ExecuteNonQuery();
        }

        public void Insert(MaterialType materialType)
        {
            if (materialType.Id == null) materialType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertMaterialTypeDbCommand == null)
            {
                insertMaterialTypeDbCommand = dbConnection.CreateCommand();
                insertMaterialTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertMaterialTypeDbCommand.Parameters.Add(dp);
                dp = insertMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertMaterialTypeDbCommand.Parameters.Add(dp);
                dp = insertMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertMaterialTypeDbCommand.Parameters.Add(dp);
                dp = insertMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertMaterialTypeDbCommand.Parameters.Add(dp);
                insertMaterialTypeDbCommand.Transaction = dbTransaction;
                insertMaterialTypeDbCommand.Prepare();
            }
            insertMaterialTypeDbCommand.Transaction = dbTransaction;
            insertMaterialTypeDbCommand.Parameters[0].Value = (object)materialType.Id ?? DBNull.Value;
            insertMaterialTypeDbCommand.Parameters[1].Value = (object)materialType.Content ?? DBNull.Value;
            insertMaterialTypeDbCommand.Parameters[2].Value = (object)materialType.CreationTime ?? DBNull.Value;
            insertMaterialTypeDbCommand.Parameters[3].Value = (object)materialType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertMaterialTypeDbCommand.CommandText}\r\n-- Id: {materialType.Id}\r\n-- Content: {materialType.Content}\r\n-- CreationTime: {materialType.CreationTime}\r\n-- CreationUserId: {materialType.CreationUserId}");
            insertMaterialTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(MaterialType materialType)
        {
            if (ConnectIfNecessary() || updateMaterialTypeDbCommand == null)
            {
                updateMaterialTypeDbCommand = dbConnection.CreateCommand();
                updateMaterialTypeDbCommand.Transaction = dbTransaction;
                updateMaterialTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateMaterialTypeDbCommand.Parameters.Add(dp);
                dp = updateMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateMaterialTypeDbCommand.Parameters.Add(dp);
                dp = updateMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateMaterialTypeDbCommand.Parameters.Add(dp);
                dp = updateMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateMaterialTypeDbCommand.Parameters.Add(dp);
                updateMaterialTypeDbCommand.Prepare();
            }
            updateMaterialTypeDbCommand.Transaction = dbTransaction;
            updateMaterialTypeDbCommand.Parameters[0].Value = (object)materialType.Content ?? DBNull.Value;
            updateMaterialTypeDbCommand.Parameters[1].Value = (object)materialType.CreationTime ?? DBNull.Value;
            updateMaterialTypeDbCommand.Parameters[2].Value = (object)materialType.CreationUserId ?? DBNull.Value;
            updateMaterialTypeDbCommand.Parameters[3].Value = materialType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateMaterialTypeDbCommand.CommandText}\r\n-- Content: {materialType.Content}\r\n-- CreationTime: {materialType.CreationTime}\r\n-- CreationUserId: {materialType.CreationUserId}\r\n-- Id: {materialType.Id}");
            updateMaterialTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(MaterialType materialType)
        {
            if (ConnectIfNecessary() || deleteMaterialTypeDbCommand == null)
            {
                deleteMaterialTypeDbCommand = dbConnection.CreateCommand();
                deleteMaterialTypeDbCommand.Transaction = dbTransaction;
                deleteMaterialTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteMaterialTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteMaterialTypeDbCommand.Parameters.Add(dp);
                deleteMaterialTypeDbCommand.Prepare();
            }
            deleteMaterialTypeDbCommand.Transaction = dbTransaction;
            deleteMaterialTypeDbCommand.Parameters[0].Value = materialType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteMaterialTypeDbCommand.CommandText}\r\n-- Id: {materialType.Id}");
            deleteMaterialTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(ModeOfIssuance modeOfIssuance)
        {
            if (modeOfIssuance.Id == null) modeOfIssuance.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertModeOfIssuanceDbCommand == null)
            {
                insertModeOfIssuanceDbCommand = dbConnection.CreateCommand();
                insertModeOfIssuanceDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertModeOfIssuanceDbCommand.Parameters.Add(dp);
                dp = insertModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertModeOfIssuanceDbCommand.Parameters.Add(dp);
                dp = insertModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertModeOfIssuanceDbCommand.Parameters.Add(dp);
                dp = insertModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertModeOfIssuanceDbCommand.Parameters.Add(dp);
                insertModeOfIssuanceDbCommand.Transaction = dbTransaction;
                insertModeOfIssuanceDbCommand.Prepare();
            }
            insertModeOfIssuanceDbCommand.Transaction = dbTransaction;
            insertModeOfIssuanceDbCommand.Parameters[0].Value = (object)modeOfIssuance.Id ?? DBNull.Value;
            insertModeOfIssuanceDbCommand.Parameters[1].Value = (object)modeOfIssuance.Content ?? DBNull.Value;
            insertModeOfIssuanceDbCommand.Parameters[2].Value = (object)modeOfIssuance.CreationTime ?? DBNull.Value;
            insertModeOfIssuanceDbCommand.Parameters[3].Value = (object)modeOfIssuance.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertModeOfIssuanceDbCommand.CommandText}\r\n-- Id: {modeOfIssuance.Id}\r\n-- Content: {modeOfIssuance.Content}\r\n-- CreationTime: {modeOfIssuance.CreationTime}\r\n-- CreationUserId: {modeOfIssuance.CreationUserId}");
            insertModeOfIssuanceDbCommand.ExecuteNonQuery();
        }

        public void Update(ModeOfIssuance modeOfIssuance)
        {
            if (ConnectIfNecessary() || updateModeOfIssuanceDbCommand == null)
            {
                updateModeOfIssuanceDbCommand = dbConnection.CreateCommand();
                updateModeOfIssuanceDbCommand.Transaction = dbTransaction;
                updateModeOfIssuanceDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateModeOfIssuanceDbCommand.Parameters.Add(dp);
                dp = updateModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateModeOfIssuanceDbCommand.Parameters.Add(dp);
                dp = updateModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateModeOfIssuanceDbCommand.Parameters.Add(dp);
                dp = updateModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateModeOfIssuanceDbCommand.Parameters.Add(dp);
                updateModeOfIssuanceDbCommand.Prepare();
            }
            updateModeOfIssuanceDbCommand.Transaction = dbTransaction;
            updateModeOfIssuanceDbCommand.Parameters[0].Value = (object)modeOfIssuance.Content ?? DBNull.Value;
            updateModeOfIssuanceDbCommand.Parameters[1].Value = (object)modeOfIssuance.CreationTime ?? DBNull.Value;
            updateModeOfIssuanceDbCommand.Parameters[2].Value = (object)modeOfIssuance.CreationUserId ?? DBNull.Value;
            updateModeOfIssuanceDbCommand.Parameters[3].Value = modeOfIssuance.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateModeOfIssuanceDbCommand.CommandText}\r\n-- Content: {modeOfIssuance.Content}\r\n-- CreationTime: {modeOfIssuance.CreationTime}\r\n-- CreationUserId: {modeOfIssuance.CreationUserId}\r\n-- Id: {modeOfIssuance.Id}");
            updateModeOfIssuanceDbCommand.ExecuteNonQuery();
        }

        public void Delete(ModeOfIssuance modeOfIssuance)
        {
            if (ConnectIfNecessary() || deleteModeOfIssuanceDbCommand == null)
            {
                deleteModeOfIssuanceDbCommand = dbConnection.CreateCommand();
                deleteModeOfIssuanceDbCommand.Transaction = dbTransaction;
                deleteModeOfIssuanceDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")} WHERE {Quote("_id")} = @Id";
                var dp = deleteModeOfIssuanceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteModeOfIssuanceDbCommand.Parameters.Add(dp);
                deleteModeOfIssuanceDbCommand.Prepare();
            }
            deleteModeOfIssuanceDbCommand.Transaction = dbTransaction;
            deleteModeOfIssuanceDbCommand.Parameters[0].Value = modeOfIssuance.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteModeOfIssuanceDbCommand.CommandText}\r\n-- Id: {modeOfIssuance.Id}");
            deleteModeOfIssuanceDbCommand.ExecuteNonQuery();
        }

        public void Insert(Note note)
        {
            if (note.Id == null) note.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertNoteDbCommand == null)
            {
                insertNoteDbCommand = dbConnection.CreateCommand();
                insertNoteDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertNoteDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertNoteDbCommand.Parameters.Add(dp);
                dp = insertNoteDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertNoteDbCommand.Parameters.Add(dp);
                dp = insertNoteDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertNoteDbCommand.Parameters.Add(dp);
                dp = insertNoteDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertNoteDbCommand.Parameters.Add(dp);
                insertNoteDbCommand.Transaction = dbTransaction;
                insertNoteDbCommand.Prepare();
            }
            insertNoteDbCommand.Transaction = dbTransaction;
            insertNoteDbCommand.Parameters[0].Value = (object)note.Id ?? DBNull.Value;
            insertNoteDbCommand.Parameters[1].Value = (object)note.Content ?? DBNull.Value;
            insertNoteDbCommand.Parameters[2].Value = (object)note.CreationTime ?? DBNull.Value;
            insertNoteDbCommand.Parameters[3].Value = (object)note.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertNoteDbCommand.CommandText}\r\n-- Id: {note.Id}\r\n-- Content: {note.Content}\r\n-- CreationTime: {note.CreationTime}\r\n-- CreationUserId: {note.CreationUserId}");
            insertNoteDbCommand.ExecuteNonQuery();
        }

        public void Update(Note note)
        {
            if (ConnectIfNecessary() || updateNoteDbCommand == null)
            {
                updateNoteDbCommand = dbConnection.CreateCommand();
                updateNoteDbCommand.Transaction = dbTransaction;
                updateNoteDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateNoteDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateNoteDbCommand.Parameters.Add(dp);
                dp = updateNoteDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateNoteDbCommand.Parameters.Add(dp);
                dp = updateNoteDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateNoteDbCommand.Parameters.Add(dp);
                dp = updateNoteDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateNoteDbCommand.Parameters.Add(dp);
                updateNoteDbCommand.Prepare();
            }
            updateNoteDbCommand.Transaction = dbTransaction;
            updateNoteDbCommand.Parameters[0].Value = (object)note.Content ?? DBNull.Value;
            updateNoteDbCommand.Parameters[1].Value = (object)note.CreationTime ?? DBNull.Value;
            updateNoteDbCommand.Parameters[2].Value = (object)note.CreationUserId ?? DBNull.Value;
            updateNoteDbCommand.Parameters[3].Value = note.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateNoteDbCommand.CommandText}\r\n-- Content: {note.Content}\r\n-- CreationTime: {note.CreationTime}\r\n-- CreationUserId: {note.CreationUserId}\r\n-- Id: {note.Id}");
            updateNoteDbCommand.ExecuteNonQuery();
        }

        public void Delete(Note note)
        {
            if (ConnectIfNecessary() || deleteNoteDbCommand == null)
            {
                deleteNoteDbCommand = dbConnection.CreateCommand();
                deleteNoteDbCommand.Transaction = dbTransaction;
                deleteNoteDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")} WHERE {Quote("id")} = @Id";
                var dp = deleteNoteDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteNoteDbCommand.Parameters.Add(dp);
                deleteNoteDbCommand.Prepare();
            }
            deleteNoteDbCommand.Transaction = dbTransaction;
            deleteNoteDbCommand.Parameters[0].Value = note.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteNoteDbCommand.CommandText}\r\n-- Id: {note.Id}");
            deleteNoteDbCommand.ExecuteNonQuery();
        }

        public void Insert(Order order)
        {
            if (order.Id == null) order.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertOrderDbCommand == null)
            {
                insertOrderDbCommand = dbConnection.CreateCommand();
                insertOrderDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertOrderDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertOrderDbCommand.Parameters.Add(dp);
                dp = insertOrderDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOrderDbCommand.Parameters.Add(dp);
                dp = insertOrderDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertOrderDbCommand.Parameters.Add(dp);
                dp = insertOrderDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOrderDbCommand.Parameters.Add(dp);
                insertOrderDbCommand.Transaction = dbTransaction;
                insertOrderDbCommand.Prepare();
            }
            insertOrderDbCommand.Transaction = dbTransaction;
            insertOrderDbCommand.Parameters[0].Value = (object)order.Id ?? DBNull.Value;
            insertOrderDbCommand.Parameters[1].Value = (object)order.Content ?? DBNull.Value;
            insertOrderDbCommand.Parameters[2].Value = (object)order.CreationTime ?? DBNull.Value;
            insertOrderDbCommand.Parameters[3].Value = (object)order.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertOrderDbCommand.CommandText}\r\n-- Id: {order.Id}\r\n-- Content: {order.Content}\r\n-- CreationTime: {order.CreationTime}\r\n-- CreationUserId: {order.CreationUserId}");
            insertOrderDbCommand.ExecuteNonQuery();
        }

        public void Update(Order order)
        {
            if (ConnectIfNecessary() || updateOrderDbCommand == null)
            {
                updateOrderDbCommand = dbConnection.CreateCommand();
                updateOrderDbCommand.Transaction = dbTransaction;
                updateOrderDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateOrderDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOrderDbCommand.Parameters.Add(dp);
                dp = updateOrderDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateOrderDbCommand.Parameters.Add(dp);
                dp = updateOrderDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOrderDbCommand.Parameters.Add(dp);
                dp = updateOrderDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateOrderDbCommand.Parameters.Add(dp);
                updateOrderDbCommand.Prepare();
            }
            updateOrderDbCommand.Transaction = dbTransaction;
            updateOrderDbCommand.Parameters[0].Value = (object)order.Content ?? DBNull.Value;
            updateOrderDbCommand.Parameters[1].Value = (object)order.CreationTime ?? DBNull.Value;
            updateOrderDbCommand.Parameters[2].Value = (object)order.CreationUserId ?? DBNull.Value;
            updateOrderDbCommand.Parameters[3].Value = order.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateOrderDbCommand.CommandText}\r\n-- Content: {order.Content}\r\n-- CreationTime: {order.CreationTime}\r\n-- CreationUserId: {order.CreationUserId}\r\n-- Id: {order.Id}");
            updateOrderDbCommand.ExecuteNonQuery();
        }

        public void Delete(Order order)
        {
            if (ConnectIfNecessary() || deleteOrderDbCommand == null)
            {
                deleteOrderDbCommand = dbConnection.CreateCommand();
                deleteOrderDbCommand.Transaction = dbTransaction;
                deleteOrderDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")} WHERE {Quote("id")} = @Id";
                var dp = deleteOrderDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteOrderDbCommand.Parameters.Add(dp);
                deleteOrderDbCommand.Prepare();
            }
            deleteOrderDbCommand.Transaction = dbTransaction;
            deleteOrderDbCommand.Parameters[0].Value = order.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteOrderDbCommand.CommandText}\r\n-- Id: {order.Id}");
            deleteOrderDbCommand.ExecuteNonQuery();
        }

        public void Insert(OrderItem orderItem)
        {
            if (orderItem.Id == null) orderItem.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertOrderItemDbCommand == null)
            {
                insertOrderItemDbCommand = dbConnection.CreateCommand();
                insertOrderItemDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertOrderItemDbCommand.Parameters.Add(dp);
                dp = insertOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOrderItemDbCommand.Parameters.Add(dp);
                dp = insertOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertOrderItemDbCommand.Parameters.Add(dp);
                dp = insertOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOrderItemDbCommand.Parameters.Add(dp);
                insertOrderItemDbCommand.Transaction = dbTransaction;
                insertOrderItemDbCommand.Prepare();
            }
            insertOrderItemDbCommand.Transaction = dbTransaction;
            insertOrderItemDbCommand.Parameters[0].Value = (object)orderItem.Id ?? DBNull.Value;
            insertOrderItemDbCommand.Parameters[1].Value = (object)orderItem.Content ?? DBNull.Value;
            insertOrderItemDbCommand.Parameters[2].Value = (object)orderItem.CreationTime ?? DBNull.Value;
            insertOrderItemDbCommand.Parameters[3].Value = (object)orderItem.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertOrderItemDbCommand.CommandText}\r\n-- Id: {orderItem.Id}\r\n-- Content: {orderItem.Content}\r\n-- CreationTime: {orderItem.CreationTime}\r\n-- CreationUserId: {orderItem.CreationUserId}");
            insertOrderItemDbCommand.ExecuteNonQuery();
        }

        public void Update(OrderItem orderItem)
        {
            if (ConnectIfNecessary() || updateOrderItemDbCommand == null)
            {
                updateOrderItemDbCommand = dbConnection.CreateCommand();
                updateOrderItemDbCommand.Transaction = dbTransaction;
                updateOrderItemDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOrderItemDbCommand.Parameters.Add(dp);
                dp = updateOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateOrderItemDbCommand.Parameters.Add(dp);
                dp = updateOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOrderItemDbCommand.Parameters.Add(dp);
                dp = updateOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateOrderItemDbCommand.Parameters.Add(dp);
                updateOrderItemDbCommand.Prepare();
            }
            updateOrderItemDbCommand.Transaction = dbTransaction;
            updateOrderItemDbCommand.Parameters[0].Value = (object)orderItem.Content ?? DBNull.Value;
            updateOrderItemDbCommand.Parameters[1].Value = (object)orderItem.CreationTime ?? DBNull.Value;
            updateOrderItemDbCommand.Parameters[2].Value = (object)orderItem.CreationUserId ?? DBNull.Value;
            updateOrderItemDbCommand.Parameters[3].Value = orderItem.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateOrderItemDbCommand.CommandText}\r\n-- Content: {orderItem.Content}\r\n-- CreationTime: {orderItem.CreationTime}\r\n-- CreationUserId: {orderItem.CreationUserId}\r\n-- Id: {orderItem.Id}");
            updateOrderItemDbCommand.ExecuteNonQuery();
        }

        public void Delete(OrderItem orderItem)
        {
            if (ConnectIfNecessary() || deleteOrderItemDbCommand == null)
            {
                deleteOrderItemDbCommand = dbConnection.CreateCommand();
                deleteOrderItemDbCommand.Transaction = dbTransaction;
                deleteOrderItemDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")} WHERE {Quote("id")} = @Id";
                var dp = deleteOrderItemDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteOrderItemDbCommand.Parameters.Add(dp);
                deleteOrderItemDbCommand.Prepare();
            }
            deleteOrderItemDbCommand.Transaction = dbTransaction;
            deleteOrderItemDbCommand.Parameters[0].Value = orderItem.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteOrderItemDbCommand.CommandText}\r\n-- Id: {orderItem.Id}");
            deleteOrderItemDbCommand.ExecuteNonQuery();
        }

        public void Insert(OrderItemLocation orderItemLocation)
        {
            if (orderItemLocation.Id == null) orderItemLocation.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertOrderItemLocationDbCommand == null)
            {
                insertOrderItemLocationDbCommand = dbConnection.CreateCommand();
                insertOrderItemLocationDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertOrderItemLocationDbCommand.Parameters.Add(dp);
                dp = insertOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOrderItemLocationDbCommand.Parameters.Add(dp);
                dp = insertOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertOrderItemLocationDbCommand.Parameters.Add(dp);
                dp = insertOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOrderItemLocationDbCommand.Parameters.Add(dp);
                insertOrderItemLocationDbCommand.Transaction = dbTransaction;
                insertOrderItemLocationDbCommand.Prepare();
            }
            insertOrderItemLocationDbCommand.Transaction = dbTransaction;
            insertOrderItemLocationDbCommand.Parameters[0].Value = (object)orderItemLocation.Id ?? DBNull.Value;
            insertOrderItemLocationDbCommand.Parameters[1].Value = (object)orderItemLocation.Content ?? DBNull.Value;
            insertOrderItemLocationDbCommand.Parameters[2].Value = (object)orderItemLocation.CreationTime ?? DBNull.Value;
            insertOrderItemLocationDbCommand.Parameters[3].Value = (object)orderItemLocation.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertOrderItemLocationDbCommand.CommandText}\r\n-- Id: {orderItemLocation.Id}\r\n-- Content: {orderItemLocation.Content}\r\n-- CreationTime: {orderItemLocation.CreationTime}\r\n-- CreationUserId: {orderItemLocation.CreationUserId}");
            insertOrderItemLocationDbCommand.ExecuteNonQuery();
        }

        public void Update(OrderItemLocation orderItemLocation)
        {
            if (ConnectIfNecessary() || updateOrderItemLocationDbCommand == null)
            {
                updateOrderItemLocationDbCommand = dbConnection.CreateCommand();
                updateOrderItemLocationDbCommand.Transaction = dbTransaction;
                updateOrderItemLocationDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOrderItemLocationDbCommand.Parameters.Add(dp);
                dp = updateOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateOrderItemLocationDbCommand.Parameters.Add(dp);
                dp = updateOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOrderItemLocationDbCommand.Parameters.Add(dp);
                dp = updateOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateOrderItemLocationDbCommand.Parameters.Add(dp);
                updateOrderItemLocationDbCommand.Prepare();
            }
            updateOrderItemLocationDbCommand.Transaction = dbTransaction;
            updateOrderItemLocationDbCommand.Parameters[0].Value = (object)orderItemLocation.Content ?? DBNull.Value;
            updateOrderItemLocationDbCommand.Parameters[1].Value = (object)orderItemLocation.CreationTime ?? DBNull.Value;
            updateOrderItemLocationDbCommand.Parameters[2].Value = (object)orderItemLocation.CreationUserId ?? DBNull.Value;
            updateOrderItemLocationDbCommand.Parameters[3].Value = orderItemLocation.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateOrderItemLocationDbCommand.CommandText}\r\n-- Content: {orderItemLocation.Content}\r\n-- CreationTime: {orderItemLocation.CreationTime}\r\n-- CreationUserId: {orderItemLocation.CreationUserId}\r\n-- Id: {orderItemLocation.Id}");
            updateOrderItemLocationDbCommand.ExecuteNonQuery();
        }

        public void Delete(OrderItemLocation orderItemLocation)
        {
            if (ConnectIfNecessary() || deleteOrderItemLocationDbCommand == null)
            {
                deleteOrderItemLocationDbCommand = dbConnection.CreateCommand();
                deleteOrderItemLocationDbCommand.Transaction = dbTransaction;
                deleteOrderItemLocationDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")} WHERE {Quote("id")} = @Id";
                var dp = deleteOrderItemLocationDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteOrderItemLocationDbCommand.Parameters.Add(dp);
                deleteOrderItemLocationDbCommand.Prepare();
            }
            deleteOrderItemLocationDbCommand.Transaction = dbTransaction;
            deleteOrderItemLocationDbCommand.Parameters[0].Value = orderItemLocation.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteOrderItemLocationDbCommand.CommandText}\r\n-- Id: {orderItemLocation.Id}");
            deleteOrderItemLocationDbCommand.ExecuteNonQuery();
        }

        public void Insert(Owner owner)
        {
            if (owner.Id == null) owner.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertOwnerDbCommand == null)
            {
                insertOwnerDbCommand = dbConnection.CreateCommand();
                insertOwnerDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertOwnerDbCommand.Parameters.Add(dp);
                dp = insertOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOwnerDbCommand.Parameters.Add(dp);
                dp = insertOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertOwnerDbCommand.Parameters.Add(dp);
                dp = insertOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertOwnerDbCommand.Parameters.Add(dp);
                insertOwnerDbCommand.Transaction = dbTransaction;
                insertOwnerDbCommand.Prepare();
            }
            insertOwnerDbCommand.Transaction = dbTransaction;
            insertOwnerDbCommand.Parameters[0].Value = (object)owner.Id ?? DBNull.Value;
            insertOwnerDbCommand.Parameters[1].Value = (object)owner.Content ?? DBNull.Value;
            insertOwnerDbCommand.Parameters[2].Value = (object)owner.CreationTime ?? DBNull.Value;
            insertOwnerDbCommand.Parameters[3].Value = (object)owner.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertOwnerDbCommand.CommandText}\r\n-- Id: {owner.Id}\r\n-- Content: {owner.Content}\r\n-- CreationTime: {owner.CreationTime}\r\n-- CreationUserId: {owner.CreationUserId}");
            insertOwnerDbCommand.ExecuteNonQuery();
        }

        public void Update(Owner owner)
        {
            if (ConnectIfNecessary() || updateOwnerDbCommand == null)
            {
                updateOwnerDbCommand = dbConnection.CreateCommand();
                updateOwnerDbCommand.Transaction = dbTransaction;
                updateOwnerDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOwnerDbCommand.Parameters.Add(dp);
                dp = updateOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateOwnerDbCommand.Parameters.Add(dp);
                dp = updateOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateOwnerDbCommand.Parameters.Add(dp);
                dp = updateOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateOwnerDbCommand.Parameters.Add(dp);
                updateOwnerDbCommand.Prepare();
            }
            updateOwnerDbCommand.Transaction = dbTransaction;
            updateOwnerDbCommand.Parameters[0].Value = (object)owner.Content ?? DBNull.Value;
            updateOwnerDbCommand.Parameters[1].Value = (object)owner.CreationTime ?? DBNull.Value;
            updateOwnerDbCommand.Parameters[2].Value = (object)owner.CreationUserId ?? DBNull.Value;
            updateOwnerDbCommand.Parameters[3].Value = owner.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateOwnerDbCommand.CommandText}\r\n-- Content: {owner.Content}\r\n-- CreationTime: {owner.CreationTime}\r\n-- CreationUserId: {owner.CreationUserId}\r\n-- Id: {owner.Id}");
            updateOwnerDbCommand.ExecuteNonQuery();
        }

        public void Delete(Owner owner)
        {
            if (ConnectIfNecessary() || deleteOwnerDbCommand == null)
            {
                deleteOwnerDbCommand = dbConnection.CreateCommand();
                deleteOwnerDbCommand.Transaction = dbTransaction;
                deleteOwnerDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")} WHERE {Quote("id")} = @Id";
                var dp = deleteOwnerDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteOwnerDbCommand.Parameters.Add(dp);
                deleteOwnerDbCommand.Prepare();
            }
            deleteOwnerDbCommand.Transaction = dbTransaction;
            deleteOwnerDbCommand.Parameters[0].Value = owner.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteOwnerDbCommand.CommandText}\r\n-- Id: {owner.Id}");
            deleteOwnerDbCommand.ExecuteNonQuery();
        }

        public void Insert(PatronNoticePolicy patronNoticePolicy)
        {
            if (patronNoticePolicy.Id == null) patronNoticePolicy.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPatronNoticePolicyDbCommand == null)
            {
                insertPatronNoticePolicyDbCommand = dbConnection.CreateCommand();
                insertPatronNoticePolicyDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPatronNoticePolicyDbCommand.Parameters.Add(dp);
                dp = insertPatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPatronNoticePolicyDbCommand.Parameters.Add(dp);
                dp = insertPatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPatronNoticePolicyDbCommand.Parameters.Add(dp);
                dp = insertPatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPatronNoticePolicyDbCommand.Parameters.Add(dp);
                insertPatronNoticePolicyDbCommand.Transaction = dbTransaction;
                insertPatronNoticePolicyDbCommand.Prepare();
            }
            insertPatronNoticePolicyDbCommand.Transaction = dbTransaction;
            insertPatronNoticePolicyDbCommand.Parameters[0].Value = (object)patronNoticePolicy.Id ?? DBNull.Value;
            insertPatronNoticePolicyDbCommand.Parameters[1].Value = (object)patronNoticePolicy.Content ?? DBNull.Value;
            insertPatronNoticePolicyDbCommand.Parameters[2].Value = (object)patronNoticePolicy.CreationTime ?? DBNull.Value;
            insertPatronNoticePolicyDbCommand.Parameters[3].Value = (object)patronNoticePolicy.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPatronNoticePolicyDbCommand.CommandText}\r\n-- Id: {patronNoticePolicy.Id}\r\n-- Content: {patronNoticePolicy.Content}\r\n-- CreationTime: {patronNoticePolicy.CreationTime}\r\n-- CreationUserId: {patronNoticePolicy.CreationUserId}");
            insertPatronNoticePolicyDbCommand.ExecuteNonQuery();
        }

        public void Update(PatronNoticePolicy patronNoticePolicy)
        {
            if (ConnectIfNecessary() || updatePatronNoticePolicyDbCommand == null)
            {
                updatePatronNoticePolicyDbCommand = dbConnection.CreateCommand();
                updatePatronNoticePolicyDbCommand.Transaction = dbTransaction;
                updatePatronNoticePolicyDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updatePatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePatronNoticePolicyDbCommand.Parameters.Add(dp);
                dp = updatePatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePatronNoticePolicyDbCommand.Parameters.Add(dp);
                dp = updatePatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePatronNoticePolicyDbCommand.Parameters.Add(dp);
                dp = updatePatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePatronNoticePolicyDbCommand.Parameters.Add(dp);
                updatePatronNoticePolicyDbCommand.Prepare();
            }
            updatePatronNoticePolicyDbCommand.Transaction = dbTransaction;
            updatePatronNoticePolicyDbCommand.Parameters[0].Value = (object)patronNoticePolicy.Content ?? DBNull.Value;
            updatePatronNoticePolicyDbCommand.Parameters[1].Value = (object)patronNoticePolicy.CreationTime ?? DBNull.Value;
            updatePatronNoticePolicyDbCommand.Parameters[2].Value = (object)patronNoticePolicy.CreationUserId ?? DBNull.Value;
            updatePatronNoticePolicyDbCommand.Parameters[3].Value = patronNoticePolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePatronNoticePolicyDbCommand.CommandText}\r\n-- Content: {patronNoticePolicy.Content}\r\n-- CreationTime: {patronNoticePolicy.CreationTime}\r\n-- CreationUserId: {patronNoticePolicy.CreationUserId}\r\n-- Id: {patronNoticePolicy.Id}");
            updatePatronNoticePolicyDbCommand.ExecuteNonQuery();
        }

        public void Delete(PatronNoticePolicy patronNoticePolicy)
        {
            if (ConnectIfNecessary() || deletePatronNoticePolicyDbCommand == null)
            {
                deletePatronNoticePolicyDbCommand = dbConnection.CreateCommand();
                deletePatronNoticePolicyDbCommand.Transaction = dbTransaction;
                deletePatronNoticePolicyDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")} WHERE {Quote("_id")} = @Id";
                var dp = deletePatronNoticePolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePatronNoticePolicyDbCommand.Parameters.Add(dp);
                deletePatronNoticePolicyDbCommand.Prepare();
            }
            deletePatronNoticePolicyDbCommand.Transaction = dbTransaction;
            deletePatronNoticePolicyDbCommand.Parameters[0].Value = patronNoticePolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePatronNoticePolicyDbCommand.CommandText}\r\n-- Id: {patronNoticePolicy.Id}");
            deletePatronNoticePolicyDbCommand.ExecuteNonQuery();
        }

        public void Insert(Payment payment)
        {
            if (payment.Id == null) payment.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPaymentDbCommand == null)
            {
                insertPaymentDbCommand = dbConnection.CreateCommand();
                insertPaymentDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPaymentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPaymentDbCommand.Parameters.Add(dp);
                dp = insertPaymentDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPaymentDbCommand.Parameters.Add(dp);
                dp = insertPaymentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPaymentDbCommand.Parameters.Add(dp);
                dp = insertPaymentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPaymentDbCommand.Parameters.Add(dp);
                insertPaymentDbCommand.Transaction = dbTransaction;
                insertPaymentDbCommand.Prepare();
            }
            insertPaymentDbCommand.Transaction = dbTransaction;
            insertPaymentDbCommand.Parameters[0].Value = (object)payment.Id ?? DBNull.Value;
            insertPaymentDbCommand.Parameters[1].Value = (object)payment.Content ?? DBNull.Value;
            insertPaymentDbCommand.Parameters[2].Value = (object)payment.CreationTime ?? DBNull.Value;
            insertPaymentDbCommand.Parameters[3].Value = (object)payment.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPaymentDbCommand.CommandText}\r\n-- Id: {payment.Id}\r\n-- Content: {payment.Content}\r\n-- CreationTime: {payment.CreationTime}\r\n-- CreationUserId: {payment.CreationUserId}");
            insertPaymentDbCommand.ExecuteNonQuery();
        }

        public void Update(Payment payment)
        {
            if (ConnectIfNecessary() || updatePaymentDbCommand == null)
            {
                updatePaymentDbCommand = dbConnection.CreateCommand();
                updatePaymentDbCommand.Transaction = dbTransaction;
                updatePaymentDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updatePaymentDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePaymentDbCommand.Parameters.Add(dp);
                dp = updatePaymentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePaymentDbCommand.Parameters.Add(dp);
                dp = updatePaymentDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePaymentDbCommand.Parameters.Add(dp);
                dp = updatePaymentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePaymentDbCommand.Parameters.Add(dp);
                updatePaymentDbCommand.Prepare();
            }
            updatePaymentDbCommand.Transaction = dbTransaction;
            updatePaymentDbCommand.Parameters[0].Value = (object)payment.Content ?? DBNull.Value;
            updatePaymentDbCommand.Parameters[1].Value = (object)payment.CreationTime ?? DBNull.Value;
            updatePaymentDbCommand.Parameters[2].Value = (object)payment.CreationUserId ?? DBNull.Value;
            updatePaymentDbCommand.Parameters[3].Value = payment.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePaymentDbCommand.CommandText}\r\n-- Content: {payment.Content}\r\n-- CreationTime: {payment.CreationTime}\r\n-- CreationUserId: {payment.CreationUserId}\r\n-- Id: {payment.Id}");
            updatePaymentDbCommand.ExecuteNonQuery();
        }

        public void Delete(Payment payment)
        {
            if (ConnectIfNecessary() || deletePaymentDbCommand == null)
            {
                deletePaymentDbCommand = dbConnection.CreateCommand();
                deletePaymentDbCommand.Transaction = dbTransaction;
                deletePaymentDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")} WHERE {Quote("id")} = @Id";
                var dp = deletePaymentDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePaymentDbCommand.Parameters.Add(dp);
                deletePaymentDbCommand.Prepare();
            }
            deletePaymentDbCommand.Transaction = dbTransaction;
            deletePaymentDbCommand.Parameters[0].Value = payment.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePaymentDbCommand.CommandText}\r\n-- Id: {payment.Id}");
            deletePaymentDbCommand.ExecuteNonQuery();
        }

        public void Insert(Permission permission)
        {
            if (permission.Id == null) permission.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPermissionDbCommand == null)
            {
                insertPermissionDbCommand = dbConnection.CreateCommand();
                insertPermissionDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPermissionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPermissionDbCommand.Parameters.Add(dp);
                dp = insertPermissionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPermissionDbCommand.Parameters.Add(dp);
                dp = insertPermissionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPermissionDbCommand.Parameters.Add(dp);
                dp = insertPermissionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPermissionDbCommand.Parameters.Add(dp);
                insertPermissionDbCommand.Transaction = dbTransaction;
                insertPermissionDbCommand.Prepare();
            }
            insertPermissionDbCommand.Transaction = dbTransaction;
            insertPermissionDbCommand.Parameters[0].Value = (object)permission.Id ?? DBNull.Value;
            insertPermissionDbCommand.Parameters[1].Value = (object)permission.Content ?? DBNull.Value;
            insertPermissionDbCommand.Parameters[2].Value = (object)permission.CreationTime ?? DBNull.Value;
            insertPermissionDbCommand.Parameters[3].Value = (object)permission.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPermissionDbCommand.CommandText}\r\n-- Id: {permission.Id}\r\n-- Content: {permission.Content}\r\n-- CreationTime: {permission.CreationTime}\r\n-- CreationUserId: {permission.CreationUserId}");
            insertPermissionDbCommand.ExecuteNonQuery();
        }

        public void Update(Permission permission)
        {
            if (ConnectIfNecessary() || updatePermissionDbCommand == null)
            {
                updatePermissionDbCommand = dbConnection.CreateCommand();
                updatePermissionDbCommand.Transaction = dbTransaction;
                updatePermissionDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updatePermissionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePermissionDbCommand.Parameters.Add(dp);
                dp = updatePermissionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePermissionDbCommand.Parameters.Add(dp);
                dp = updatePermissionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePermissionDbCommand.Parameters.Add(dp);
                dp = updatePermissionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePermissionDbCommand.Parameters.Add(dp);
                updatePermissionDbCommand.Prepare();
            }
            updatePermissionDbCommand.Transaction = dbTransaction;
            updatePermissionDbCommand.Parameters[0].Value = (object)permission.Content ?? DBNull.Value;
            updatePermissionDbCommand.Parameters[1].Value = (object)permission.CreationTime ?? DBNull.Value;
            updatePermissionDbCommand.Parameters[2].Value = (object)permission.CreationUserId ?? DBNull.Value;
            updatePermissionDbCommand.Parameters[3].Value = permission.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePermissionDbCommand.CommandText}\r\n-- Content: {permission.Content}\r\n-- CreationTime: {permission.CreationTime}\r\n-- CreationUserId: {permission.CreationUserId}\r\n-- Id: {permission.Id}");
            updatePermissionDbCommand.ExecuteNonQuery();
        }

        public void Delete(Permission permission)
        {
            if (ConnectIfNecessary() || deletePermissionDbCommand == null)
            {
                deletePermissionDbCommand = dbConnection.CreateCommand();
                deletePermissionDbCommand.Transaction = dbTransaction;
                deletePermissionDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")} WHERE {Quote("_id")} = @Id";
                var dp = deletePermissionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePermissionDbCommand.Parameters.Add(dp);
                deletePermissionDbCommand.Prepare();
            }
            deletePermissionDbCommand.Transaction = dbTransaction;
            deletePermissionDbCommand.Parameters[0].Value = permission.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePermissionDbCommand.CommandText}\r\n-- Id: {permission.Id}");
            deletePermissionDbCommand.ExecuteNonQuery();
        }

        public void Insert(PermissionsUser permissionsUser)
        {
            if (permissionsUser.Id == null) permissionsUser.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPermissionsUserDbCommand == null)
            {
                insertPermissionsUserDbCommand = dbConnection.CreateCommand();
                insertPermissionsUserDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPermissionsUserDbCommand.Parameters.Add(dp);
                dp = insertPermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPermissionsUserDbCommand.Parameters.Add(dp);
                dp = insertPermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPermissionsUserDbCommand.Parameters.Add(dp);
                dp = insertPermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPermissionsUserDbCommand.Parameters.Add(dp);
                insertPermissionsUserDbCommand.Transaction = dbTransaction;
                insertPermissionsUserDbCommand.Prepare();
            }
            insertPermissionsUserDbCommand.Transaction = dbTransaction;
            insertPermissionsUserDbCommand.Parameters[0].Value = (object)permissionsUser.Id ?? DBNull.Value;
            insertPermissionsUserDbCommand.Parameters[1].Value = (object)permissionsUser.Content ?? DBNull.Value;
            insertPermissionsUserDbCommand.Parameters[2].Value = (object)permissionsUser.CreationTime ?? DBNull.Value;
            insertPermissionsUserDbCommand.Parameters[3].Value = (object)permissionsUser.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPermissionsUserDbCommand.CommandText}\r\n-- Id: {permissionsUser.Id}\r\n-- Content: {permissionsUser.Content}\r\n-- CreationTime: {permissionsUser.CreationTime}\r\n-- CreationUserId: {permissionsUser.CreationUserId}");
            insertPermissionsUserDbCommand.ExecuteNonQuery();
        }

        public void Update(PermissionsUser permissionsUser)
        {
            if (ConnectIfNecessary() || updatePermissionsUserDbCommand == null)
            {
                updatePermissionsUserDbCommand = dbConnection.CreateCommand();
                updatePermissionsUserDbCommand.Transaction = dbTransaction;
                updatePermissionsUserDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updatePermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePermissionsUserDbCommand.Parameters.Add(dp);
                dp = updatePermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePermissionsUserDbCommand.Parameters.Add(dp);
                dp = updatePermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePermissionsUserDbCommand.Parameters.Add(dp);
                dp = updatePermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePermissionsUserDbCommand.Parameters.Add(dp);
                updatePermissionsUserDbCommand.Prepare();
            }
            updatePermissionsUserDbCommand.Transaction = dbTransaction;
            updatePermissionsUserDbCommand.Parameters[0].Value = (object)permissionsUser.Content ?? DBNull.Value;
            updatePermissionsUserDbCommand.Parameters[1].Value = (object)permissionsUser.CreationTime ?? DBNull.Value;
            updatePermissionsUserDbCommand.Parameters[2].Value = (object)permissionsUser.CreationUserId ?? DBNull.Value;
            updatePermissionsUserDbCommand.Parameters[3].Value = permissionsUser.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePermissionsUserDbCommand.CommandText}\r\n-- Content: {permissionsUser.Content}\r\n-- CreationTime: {permissionsUser.CreationTime}\r\n-- CreationUserId: {permissionsUser.CreationUserId}\r\n-- Id: {permissionsUser.Id}");
            updatePermissionsUserDbCommand.ExecuteNonQuery();
        }

        public void Delete(PermissionsUser permissionsUser)
        {
            if (ConnectIfNecessary() || deletePermissionsUserDbCommand == null)
            {
                deletePermissionsUserDbCommand = dbConnection.CreateCommand();
                deletePermissionsUserDbCommand.Transaction = dbTransaction;
                deletePermissionsUserDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")} WHERE {Quote("_id")} = @Id";
                var dp = deletePermissionsUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePermissionsUserDbCommand.Parameters.Add(dp);
                deletePermissionsUserDbCommand.Prepare();
            }
            deletePermissionsUserDbCommand.Transaction = dbTransaction;
            deletePermissionsUserDbCommand.Parameters[0].Value = permissionsUser.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePermissionsUserDbCommand.CommandText}\r\n-- Id: {permissionsUser.Id}");
            deletePermissionsUserDbCommand.ExecuteNonQuery();
        }

        public void Insert(PhoneNumber phoneNumber)
        {
            if (phoneNumber.Id == null) phoneNumber.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPhoneNumberDbCommand == null)
            {
                insertPhoneNumberDbCommand = dbConnection.CreateCommand();
                insertPhoneNumberDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPhoneNumberDbCommand.Parameters.Add(dp);
                dp = insertPhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPhoneNumberDbCommand.Parameters.Add(dp);
                dp = insertPhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPhoneNumberDbCommand.Parameters.Add(dp);
                dp = insertPhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPhoneNumberDbCommand.Parameters.Add(dp);
                insertPhoneNumberDbCommand.Transaction = dbTransaction;
                insertPhoneNumberDbCommand.Prepare();
            }
            insertPhoneNumberDbCommand.Transaction = dbTransaction;
            insertPhoneNumberDbCommand.Parameters[0].Value = (object)phoneNumber.Id ?? DBNull.Value;
            insertPhoneNumberDbCommand.Parameters[1].Value = (object)phoneNumber.Content ?? DBNull.Value;
            insertPhoneNumberDbCommand.Parameters[2].Value = (object)phoneNumber.CreationTime ?? DBNull.Value;
            insertPhoneNumberDbCommand.Parameters[3].Value = (object)phoneNumber.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPhoneNumberDbCommand.CommandText}\r\n-- Id: {phoneNumber.Id}\r\n-- Content: {phoneNumber.Content}\r\n-- CreationTime: {phoneNumber.CreationTime}\r\n-- CreationUserId: {phoneNumber.CreationUserId}");
            insertPhoneNumberDbCommand.ExecuteNonQuery();
        }

        public void Update(PhoneNumber phoneNumber)
        {
            if (ConnectIfNecessary() || updatePhoneNumberDbCommand == null)
            {
                updatePhoneNumberDbCommand = dbConnection.CreateCommand();
                updatePhoneNumberDbCommand.Transaction = dbTransaction;
                updatePhoneNumberDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updatePhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePhoneNumberDbCommand.Parameters.Add(dp);
                dp = updatePhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePhoneNumberDbCommand.Parameters.Add(dp);
                dp = updatePhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePhoneNumberDbCommand.Parameters.Add(dp);
                dp = updatePhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePhoneNumberDbCommand.Parameters.Add(dp);
                updatePhoneNumberDbCommand.Prepare();
            }
            updatePhoneNumberDbCommand.Transaction = dbTransaction;
            updatePhoneNumberDbCommand.Parameters[0].Value = (object)phoneNumber.Content ?? DBNull.Value;
            updatePhoneNumberDbCommand.Parameters[1].Value = (object)phoneNumber.CreationTime ?? DBNull.Value;
            updatePhoneNumberDbCommand.Parameters[2].Value = (object)phoneNumber.CreationUserId ?? DBNull.Value;
            updatePhoneNumberDbCommand.Parameters[3].Value = phoneNumber.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePhoneNumberDbCommand.CommandText}\r\n-- Content: {phoneNumber.Content}\r\n-- CreationTime: {phoneNumber.CreationTime}\r\n-- CreationUserId: {phoneNumber.CreationUserId}\r\n-- Id: {phoneNumber.Id}");
            updatePhoneNumberDbCommand.ExecuteNonQuery();
        }

        public void Delete(PhoneNumber phoneNumber)
        {
            if (ConnectIfNecessary() || deletePhoneNumberDbCommand == null)
            {
                deletePhoneNumberDbCommand = dbConnection.CreateCommand();
                deletePhoneNumberDbCommand.Transaction = dbTransaction;
                deletePhoneNumberDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")} WHERE {Quote("id")} = @Id";
                var dp = deletePhoneNumberDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePhoneNumberDbCommand.Parameters.Add(dp);
                deletePhoneNumberDbCommand.Prepare();
            }
            deletePhoneNumberDbCommand.Transaction = dbTransaction;
            deletePhoneNumberDbCommand.Parameters[0].Value = phoneNumber.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePhoneNumberDbCommand.CommandText}\r\n-- Id: {phoneNumber.Id}");
            deletePhoneNumberDbCommand.ExecuteNonQuery();
        }

        public void Insert(Physical physical)
        {
            if (physical.Id == null) physical.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPhysicalDbCommand == null)
            {
                insertPhysicalDbCommand = dbConnection.CreateCommand();
                insertPhysicalDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPhysicalDbCommand.Parameters.Add(dp);
                dp = insertPhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPhysicalDbCommand.Parameters.Add(dp);
                dp = insertPhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPhysicalDbCommand.Parameters.Add(dp);
                dp = insertPhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPhysicalDbCommand.Parameters.Add(dp);
                insertPhysicalDbCommand.Transaction = dbTransaction;
                insertPhysicalDbCommand.Prepare();
            }
            insertPhysicalDbCommand.Transaction = dbTransaction;
            insertPhysicalDbCommand.Parameters[0].Value = (object)physical.Id ?? DBNull.Value;
            insertPhysicalDbCommand.Parameters[1].Value = (object)physical.Content ?? DBNull.Value;
            insertPhysicalDbCommand.Parameters[2].Value = (object)physical.CreationTime ?? DBNull.Value;
            insertPhysicalDbCommand.Parameters[3].Value = (object)physical.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPhysicalDbCommand.CommandText}\r\n-- Id: {physical.Id}\r\n-- Content: {physical.Content}\r\n-- CreationTime: {physical.CreationTime}\r\n-- CreationUserId: {physical.CreationUserId}");
            insertPhysicalDbCommand.ExecuteNonQuery();
        }

        public void Update(Physical physical)
        {
            if (ConnectIfNecessary() || updatePhysicalDbCommand == null)
            {
                updatePhysicalDbCommand = dbConnection.CreateCommand();
                updatePhysicalDbCommand.Transaction = dbTransaction;
                updatePhysicalDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updatePhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePhysicalDbCommand.Parameters.Add(dp);
                dp = updatePhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePhysicalDbCommand.Parameters.Add(dp);
                dp = updatePhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePhysicalDbCommand.Parameters.Add(dp);
                dp = updatePhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePhysicalDbCommand.Parameters.Add(dp);
                updatePhysicalDbCommand.Prepare();
            }
            updatePhysicalDbCommand.Transaction = dbTransaction;
            updatePhysicalDbCommand.Parameters[0].Value = (object)physical.Content ?? DBNull.Value;
            updatePhysicalDbCommand.Parameters[1].Value = (object)physical.CreationTime ?? DBNull.Value;
            updatePhysicalDbCommand.Parameters[2].Value = (object)physical.CreationUserId ?? DBNull.Value;
            updatePhysicalDbCommand.Parameters[3].Value = physical.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePhysicalDbCommand.CommandText}\r\n-- Content: {physical.Content}\r\n-- CreationTime: {physical.CreationTime}\r\n-- CreationUserId: {physical.CreationUserId}\r\n-- Id: {physical.Id}");
            updatePhysicalDbCommand.ExecuteNonQuery();
        }

        public void Delete(Physical physical)
        {
            if (ConnectIfNecessary() || deletePhysicalDbCommand == null)
            {
                deletePhysicalDbCommand = dbConnection.CreateCommand();
                deletePhysicalDbCommand.Transaction = dbTransaction;
                deletePhysicalDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")} WHERE {Quote("id")} = @Id";
                var dp = deletePhysicalDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePhysicalDbCommand.Parameters.Add(dp);
                deletePhysicalDbCommand.Prepare();
            }
            deletePhysicalDbCommand.Transaction = dbTransaction;
            deletePhysicalDbCommand.Parameters[0].Value = physical.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePhysicalDbCommand.CommandText}\r\n-- Id: {physical.Id}");
            deletePhysicalDbCommand.ExecuteNonQuery();
        }

        public void Insert(Piece piece)
        {
            if (piece.Id == null) piece.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertPieceDbCommand == null)
            {
                insertPieceDbCommand = dbConnection.CreateCommand();
                insertPieceDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertPieceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertPieceDbCommand.Parameters.Add(dp);
                dp = insertPieceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPieceDbCommand.Parameters.Add(dp);
                dp = insertPieceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertPieceDbCommand.Parameters.Add(dp);
                dp = insertPieceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertPieceDbCommand.Parameters.Add(dp);
                insertPieceDbCommand.Transaction = dbTransaction;
                insertPieceDbCommand.Prepare();
            }
            insertPieceDbCommand.Transaction = dbTransaction;
            insertPieceDbCommand.Parameters[0].Value = (object)piece.Id ?? DBNull.Value;
            insertPieceDbCommand.Parameters[1].Value = (object)piece.Content ?? DBNull.Value;
            insertPieceDbCommand.Parameters[2].Value = (object)piece.CreationTime ?? DBNull.Value;
            insertPieceDbCommand.Parameters[3].Value = (object)piece.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertPieceDbCommand.CommandText}\r\n-- Id: {piece.Id}\r\n-- Content: {piece.Content}\r\n-- CreationTime: {piece.CreationTime}\r\n-- CreationUserId: {piece.CreationUserId}");
            insertPieceDbCommand.ExecuteNonQuery();
        }

        public void Update(Piece piece)
        {
            if (ConnectIfNecessary() || updatePieceDbCommand == null)
            {
                updatePieceDbCommand = dbConnection.CreateCommand();
                updatePieceDbCommand.Transaction = dbTransaction;
                updatePieceDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updatePieceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePieceDbCommand.Parameters.Add(dp);
                dp = updatePieceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updatePieceDbCommand.Parameters.Add(dp);
                dp = updatePieceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updatePieceDbCommand.Parameters.Add(dp);
                dp = updatePieceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updatePieceDbCommand.Parameters.Add(dp);
                updatePieceDbCommand.Prepare();
            }
            updatePieceDbCommand.Transaction = dbTransaction;
            updatePieceDbCommand.Parameters[0].Value = (object)piece.Content ?? DBNull.Value;
            updatePieceDbCommand.Parameters[1].Value = (object)piece.CreationTime ?? DBNull.Value;
            updatePieceDbCommand.Parameters[2].Value = (object)piece.CreationUserId ?? DBNull.Value;
            updatePieceDbCommand.Parameters[3].Value = piece.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updatePieceDbCommand.CommandText}\r\n-- Content: {piece.Content}\r\n-- CreationTime: {piece.CreationTime}\r\n-- CreationUserId: {piece.CreationUserId}\r\n-- Id: {piece.Id}");
            updatePieceDbCommand.ExecuteNonQuery();
        }

        public void Delete(Piece piece)
        {
            if (ConnectIfNecessary() || deletePieceDbCommand == null)
            {
                deletePieceDbCommand = dbConnection.CreateCommand();
                deletePieceDbCommand.Transaction = dbTransaction;
                deletePieceDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")} WHERE {Quote("id")} = @Id";
                var dp = deletePieceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deletePieceDbCommand.Parameters.Add(dp);
                deletePieceDbCommand.Prepare();
            }
            deletePieceDbCommand.Transaction = dbTransaction;
            deletePieceDbCommand.Parameters[0].Value = piece.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deletePieceDbCommand.CommandText}\r\n-- Id: {piece.Id}");
            deletePieceDbCommand.ExecuteNonQuery();
        }

        public void Insert(Proxy proxy)
        {
            if (proxy.Id == null) proxy.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertProxyDbCommand == null)
            {
                insertProxyDbCommand = dbConnection.CreateCommand();
                insertProxyDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertProxyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertProxyDbCommand.Parameters.Add(dp);
                dp = insertProxyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertProxyDbCommand.Parameters.Add(dp);
                dp = insertProxyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertProxyDbCommand.Parameters.Add(dp);
                dp = insertProxyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertProxyDbCommand.Parameters.Add(dp);
                insertProxyDbCommand.Transaction = dbTransaction;
                insertProxyDbCommand.Prepare();
            }
            insertProxyDbCommand.Transaction = dbTransaction;
            insertProxyDbCommand.Parameters[0].Value = (object)proxy.Id ?? DBNull.Value;
            insertProxyDbCommand.Parameters[1].Value = (object)proxy.Content ?? DBNull.Value;
            insertProxyDbCommand.Parameters[2].Value = (object)proxy.CreationTime ?? DBNull.Value;
            insertProxyDbCommand.Parameters[3].Value = (object)proxy.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertProxyDbCommand.CommandText}\r\n-- Id: {proxy.Id}\r\n-- Content: {proxy.Content}\r\n-- CreationTime: {proxy.CreationTime}\r\n-- CreationUserId: {proxy.CreationUserId}");
            insertProxyDbCommand.ExecuteNonQuery();
        }

        public void Update(Proxy proxy)
        {
            if (ConnectIfNecessary() || updateProxyDbCommand == null)
            {
                updateProxyDbCommand = dbConnection.CreateCommand();
                updateProxyDbCommand.Transaction = dbTransaction;
                updateProxyDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateProxyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateProxyDbCommand.Parameters.Add(dp);
                dp = updateProxyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateProxyDbCommand.Parameters.Add(dp);
                dp = updateProxyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateProxyDbCommand.Parameters.Add(dp);
                dp = updateProxyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateProxyDbCommand.Parameters.Add(dp);
                updateProxyDbCommand.Prepare();
            }
            updateProxyDbCommand.Transaction = dbTransaction;
            updateProxyDbCommand.Parameters[0].Value = (object)proxy.Content ?? DBNull.Value;
            updateProxyDbCommand.Parameters[1].Value = (object)proxy.CreationTime ?? DBNull.Value;
            updateProxyDbCommand.Parameters[2].Value = (object)proxy.CreationUserId ?? DBNull.Value;
            updateProxyDbCommand.Parameters[3].Value = proxy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateProxyDbCommand.CommandText}\r\n-- Content: {proxy.Content}\r\n-- CreationTime: {proxy.CreationTime}\r\n-- CreationUserId: {proxy.CreationUserId}\r\n-- Id: {proxy.Id}");
            updateProxyDbCommand.ExecuteNonQuery();
        }

        public void Delete(Proxy proxy)
        {
            if (ConnectIfNecessary() || deleteProxyDbCommand == null)
            {
                deleteProxyDbCommand = dbConnection.CreateCommand();
                deleteProxyDbCommand.Transaction = dbTransaction;
                deleteProxyDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")} WHERE {Quote("id")} = @Id";
                var dp = deleteProxyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteProxyDbCommand.Parameters.Add(dp);
                deleteProxyDbCommand.Prepare();
            }
            deleteProxyDbCommand.Transaction = dbTransaction;
            deleteProxyDbCommand.Parameters[0].Value = proxy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteProxyDbCommand.CommandText}\r\n-- Id: {proxy.Id}");
            deleteProxyDbCommand.ExecuteNonQuery();
        }

        public void Insert(Refund refund)
        {
            if (refund.Id == null) refund.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertRefundDbCommand == null)
            {
                insertRefundDbCommand = dbConnection.CreateCommand();
                insertRefundDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertRefundDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertRefundDbCommand.Parameters.Add(dp);
                dp = insertRefundDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertRefundDbCommand.Parameters.Add(dp);
                dp = insertRefundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertRefundDbCommand.Parameters.Add(dp);
                dp = insertRefundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertRefundDbCommand.Parameters.Add(dp);
                insertRefundDbCommand.Transaction = dbTransaction;
                insertRefundDbCommand.Prepare();
            }
            insertRefundDbCommand.Transaction = dbTransaction;
            insertRefundDbCommand.Parameters[0].Value = (object)refund.Id ?? DBNull.Value;
            insertRefundDbCommand.Parameters[1].Value = (object)refund.Content ?? DBNull.Value;
            insertRefundDbCommand.Parameters[2].Value = (object)refund.CreationTime ?? DBNull.Value;
            insertRefundDbCommand.Parameters[3].Value = (object)refund.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertRefundDbCommand.CommandText}\r\n-- Id: {refund.Id}\r\n-- Content: {refund.Content}\r\n-- CreationTime: {refund.CreationTime}\r\n-- CreationUserId: {refund.CreationUserId}");
            insertRefundDbCommand.ExecuteNonQuery();
        }

        public void Update(Refund refund)
        {
            if (ConnectIfNecessary() || updateRefundDbCommand == null)
            {
                updateRefundDbCommand = dbConnection.CreateCommand();
                updateRefundDbCommand.Transaction = dbTransaction;
                updateRefundDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateRefundDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateRefundDbCommand.Parameters.Add(dp);
                dp = updateRefundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateRefundDbCommand.Parameters.Add(dp);
                dp = updateRefundDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateRefundDbCommand.Parameters.Add(dp);
                dp = updateRefundDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateRefundDbCommand.Parameters.Add(dp);
                updateRefundDbCommand.Prepare();
            }
            updateRefundDbCommand.Transaction = dbTransaction;
            updateRefundDbCommand.Parameters[0].Value = (object)refund.Content ?? DBNull.Value;
            updateRefundDbCommand.Parameters[1].Value = (object)refund.CreationTime ?? DBNull.Value;
            updateRefundDbCommand.Parameters[2].Value = (object)refund.CreationUserId ?? DBNull.Value;
            updateRefundDbCommand.Parameters[3].Value = refund.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateRefundDbCommand.CommandText}\r\n-- Content: {refund.Content}\r\n-- CreationTime: {refund.CreationTime}\r\n-- CreationUserId: {refund.CreationUserId}\r\n-- Id: {refund.Id}");
            updateRefundDbCommand.ExecuteNonQuery();
        }

        public void Delete(Refund refund)
        {
            if (ConnectIfNecessary() || deleteRefundDbCommand == null)
            {
                deleteRefundDbCommand = dbConnection.CreateCommand();
                deleteRefundDbCommand.Transaction = dbTransaction;
                deleteRefundDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")} WHERE {Quote("id")} = @Id";
                var dp = deleteRefundDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteRefundDbCommand.Parameters.Add(dp);
                deleteRefundDbCommand.Prepare();
            }
            deleteRefundDbCommand.Transaction = dbTransaction;
            deleteRefundDbCommand.Parameters[0].Value = refund.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteRefundDbCommand.CommandText}\r\n-- Id: {refund.Id}");
            deleteRefundDbCommand.ExecuteNonQuery();
        }

        public void Insert(ReportingCode reportingCode)
        {
            if (reportingCode.Id == null) reportingCode.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertReportingCodeDbCommand == null)
            {
                insertReportingCodeDbCommand = dbConnection.CreateCommand();
                insertReportingCodeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertReportingCodeDbCommand.Parameters.Add(dp);
                dp = insertReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertReportingCodeDbCommand.Parameters.Add(dp);
                dp = insertReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertReportingCodeDbCommand.Parameters.Add(dp);
                dp = insertReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertReportingCodeDbCommand.Parameters.Add(dp);
                insertReportingCodeDbCommand.Transaction = dbTransaction;
                insertReportingCodeDbCommand.Prepare();
            }
            insertReportingCodeDbCommand.Transaction = dbTransaction;
            insertReportingCodeDbCommand.Parameters[0].Value = (object)reportingCode.Id ?? DBNull.Value;
            insertReportingCodeDbCommand.Parameters[1].Value = (object)reportingCode.Content ?? DBNull.Value;
            insertReportingCodeDbCommand.Parameters[2].Value = (object)reportingCode.CreationTime ?? DBNull.Value;
            insertReportingCodeDbCommand.Parameters[3].Value = (object)reportingCode.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertReportingCodeDbCommand.CommandText}\r\n-- Id: {reportingCode.Id}\r\n-- Content: {reportingCode.Content}\r\n-- CreationTime: {reportingCode.CreationTime}\r\n-- CreationUserId: {reportingCode.CreationUserId}");
            insertReportingCodeDbCommand.ExecuteNonQuery();
        }

        public void Update(ReportingCode reportingCode)
        {
            if (ConnectIfNecessary() || updateReportingCodeDbCommand == null)
            {
                updateReportingCodeDbCommand = dbConnection.CreateCommand();
                updateReportingCodeDbCommand.Transaction = dbTransaction;
                updateReportingCodeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateReportingCodeDbCommand.Parameters.Add(dp);
                dp = updateReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateReportingCodeDbCommand.Parameters.Add(dp);
                dp = updateReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateReportingCodeDbCommand.Parameters.Add(dp);
                dp = updateReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateReportingCodeDbCommand.Parameters.Add(dp);
                updateReportingCodeDbCommand.Prepare();
            }
            updateReportingCodeDbCommand.Transaction = dbTransaction;
            updateReportingCodeDbCommand.Parameters[0].Value = (object)reportingCode.Content ?? DBNull.Value;
            updateReportingCodeDbCommand.Parameters[1].Value = (object)reportingCode.CreationTime ?? DBNull.Value;
            updateReportingCodeDbCommand.Parameters[2].Value = (object)reportingCode.CreationUserId ?? DBNull.Value;
            updateReportingCodeDbCommand.Parameters[3].Value = reportingCode.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateReportingCodeDbCommand.CommandText}\r\n-- Content: {reportingCode.Content}\r\n-- CreationTime: {reportingCode.CreationTime}\r\n-- CreationUserId: {reportingCode.CreationUserId}\r\n-- Id: {reportingCode.Id}");
            updateReportingCodeDbCommand.ExecuteNonQuery();
        }

        public void Delete(ReportingCode reportingCode)
        {
            if (ConnectIfNecessary() || deleteReportingCodeDbCommand == null)
            {
                deleteReportingCodeDbCommand = dbConnection.CreateCommand();
                deleteReportingCodeDbCommand.Transaction = dbTransaction;
                deleteReportingCodeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")} WHERE {Quote("id")} = @Id";
                var dp = deleteReportingCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteReportingCodeDbCommand.Parameters.Add(dp);
                deleteReportingCodeDbCommand.Prepare();
            }
            deleteReportingCodeDbCommand.Transaction = dbTransaction;
            deleteReportingCodeDbCommand.Parameters[0].Value = reportingCode.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteReportingCodeDbCommand.CommandText}\r\n-- Id: {reportingCode.Id}");
            deleteReportingCodeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Request request)
        {
            if (request.Id == null) request.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertRequestDbCommand == null)
            {
                insertRequestDbCommand = dbConnection.CreateCommand();
                insertRequestDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("cancellationreasonid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Cancellationreasonid)";
                var dp = insertRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertRequestDbCommand.Parameters.Add(dp);
                dp = insertRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertRequestDbCommand.Parameters.Add(dp);
                dp = insertRequestDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertRequestDbCommand.Parameters.Add(dp);
                dp = insertRequestDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertRequestDbCommand.Parameters.Add(dp);
                dp = insertRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Cancellationreasonid";
                dp.DbType = DbType.Guid;
                insertRequestDbCommand.Parameters.Add(dp);
                insertRequestDbCommand.Transaction = dbTransaction;
                insertRequestDbCommand.Prepare();
            }
            insertRequestDbCommand.Transaction = dbTransaction;
            insertRequestDbCommand.Parameters[0].Value = (object)request.Id ?? DBNull.Value;
            insertRequestDbCommand.Parameters[1].Value = (object)request.Content ?? DBNull.Value;
            insertRequestDbCommand.Parameters[2].Value = (object)request.CreationTime ?? DBNull.Value;
            insertRequestDbCommand.Parameters[3].Value = (object)request.CreationUserId ?? DBNull.Value;
            insertRequestDbCommand.Parameters[4].Value = (object)request.Cancellationreasonid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertRequestDbCommand.CommandText}\r\n-- Id: {request.Id}\r\n-- Content: {request.Content}\r\n-- CreationTime: {request.CreationTime}\r\n-- CreationUserId: {request.CreationUserId}\r\n-- Cancellationreasonid: {request.Cancellationreasonid}");
            insertRequestDbCommand.ExecuteNonQuery();
        }

        public void Update(Request request)
        {
            if (ConnectIfNecessary() || updateRequestDbCommand == null)
            {
                updateRequestDbCommand = dbConnection.CreateCommand();
                updateRequestDbCommand.Transaction = dbTransaction;
                updateRequestDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("cancellationreasonid")} = @Cancellationreasonid WHERE {Quote("_id")} = @Id";
                var dp = updateRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateRequestDbCommand.Parameters.Add(dp);
                dp = updateRequestDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateRequestDbCommand.Parameters.Add(dp);
                dp = updateRequestDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateRequestDbCommand.Parameters.Add(dp);
                dp = updateRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Cancellationreasonid";
                dp.DbType = DbType.Guid;
                updateRequestDbCommand.Parameters.Add(dp);
                dp = updateRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateRequestDbCommand.Parameters.Add(dp);
                updateRequestDbCommand.Prepare();
            }
            updateRequestDbCommand.Transaction = dbTransaction;
            updateRequestDbCommand.Parameters[0].Value = (object)request.Content ?? DBNull.Value;
            updateRequestDbCommand.Parameters[1].Value = (object)request.CreationTime ?? DBNull.Value;
            updateRequestDbCommand.Parameters[2].Value = (object)request.CreationUserId ?? DBNull.Value;
            updateRequestDbCommand.Parameters[3].Value = (object)request.Cancellationreasonid ?? DBNull.Value;
            updateRequestDbCommand.Parameters[4].Value = request.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateRequestDbCommand.CommandText}\r\n-- Content: {request.Content}\r\n-- CreationTime: {request.CreationTime}\r\n-- CreationUserId: {request.CreationUserId}\r\n-- Cancellationreasonid: {request.Cancellationreasonid}\r\n-- Id: {request.Id}");
            updateRequestDbCommand.ExecuteNonQuery();
        }

        public void Delete(Request request)
        {
            if (ConnectIfNecessary() || deleteRequestDbCommand == null)
            {
                deleteRequestDbCommand = dbConnection.CreateCommand();
                deleteRequestDbCommand.Transaction = dbTransaction;
                deleteRequestDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")} WHERE {Quote("_id")} = @Id";
                var dp = deleteRequestDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteRequestDbCommand.Parameters.Add(dp);
                deleteRequestDbCommand.Prepare();
            }
            deleteRequestDbCommand.Transaction = dbTransaction;
            deleteRequestDbCommand.Parameters[0].Value = request.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteRequestDbCommand.CommandText}\r\n-- Id: {request.Id}");
            deleteRequestDbCommand.ExecuteNonQuery();
        }

        public void Insert(RequestPolicy requestPolicy)
        {
            if (requestPolicy.Id == null) requestPolicy.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertRequestPolicyDbCommand == null)
            {
                insertRequestPolicyDbCommand = dbConnection.CreateCommand();
                insertRequestPolicyDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertRequestPolicyDbCommand.Parameters.Add(dp);
                dp = insertRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertRequestPolicyDbCommand.Parameters.Add(dp);
                dp = insertRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertRequestPolicyDbCommand.Parameters.Add(dp);
                dp = insertRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertRequestPolicyDbCommand.Parameters.Add(dp);
                insertRequestPolicyDbCommand.Transaction = dbTransaction;
                insertRequestPolicyDbCommand.Prepare();
            }
            insertRequestPolicyDbCommand.Transaction = dbTransaction;
            insertRequestPolicyDbCommand.Parameters[0].Value = (object)requestPolicy.Id ?? DBNull.Value;
            insertRequestPolicyDbCommand.Parameters[1].Value = (object)requestPolicy.Content ?? DBNull.Value;
            insertRequestPolicyDbCommand.Parameters[2].Value = (object)requestPolicy.CreationTime ?? DBNull.Value;
            insertRequestPolicyDbCommand.Parameters[3].Value = (object)requestPolicy.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertRequestPolicyDbCommand.CommandText}\r\n-- Id: {requestPolicy.Id}\r\n-- Content: {requestPolicy.Content}\r\n-- CreationTime: {requestPolicy.CreationTime}\r\n-- CreationUserId: {requestPolicy.CreationUserId}");
            insertRequestPolicyDbCommand.ExecuteNonQuery();
        }

        public void Update(RequestPolicy requestPolicy)
        {
            if (ConnectIfNecessary() || updateRequestPolicyDbCommand == null)
            {
                updateRequestPolicyDbCommand = dbConnection.CreateCommand();
                updateRequestPolicyDbCommand.Transaction = dbTransaction;
                updateRequestPolicyDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateRequestPolicyDbCommand.Parameters.Add(dp);
                dp = updateRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateRequestPolicyDbCommand.Parameters.Add(dp);
                dp = updateRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateRequestPolicyDbCommand.Parameters.Add(dp);
                dp = updateRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateRequestPolicyDbCommand.Parameters.Add(dp);
                updateRequestPolicyDbCommand.Prepare();
            }
            updateRequestPolicyDbCommand.Transaction = dbTransaction;
            updateRequestPolicyDbCommand.Parameters[0].Value = (object)requestPolicy.Content ?? DBNull.Value;
            updateRequestPolicyDbCommand.Parameters[1].Value = (object)requestPolicy.CreationTime ?? DBNull.Value;
            updateRequestPolicyDbCommand.Parameters[2].Value = (object)requestPolicy.CreationUserId ?? DBNull.Value;
            updateRequestPolicyDbCommand.Parameters[3].Value = requestPolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateRequestPolicyDbCommand.CommandText}\r\n-- Content: {requestPolicy.Content}\r\n-- CreationTime: {requestPolicy.CreationTime}\r\n-- CreationUserId: {requestPolicy.CreationUserId}\r\n-- Id: {requestPolicy.Id}");
            updateRequestPolicyDbCommand.ExecuteNonQuery();
        }

        public void Delete(RequestPolicy requestPolicy)
        {
            if (ConnectIfNecessary() || deleteRequestPolicyDbCommand == null)
            {
                deleteRequestPolicyDbCommand = dbConnection.CreateCommand();
                deleteRequestPolicyDbCommand.Transaction = dbTransaction;
                deleteRequestPolicyDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")} WHERE {Quote("_id")} = @Id";
                var dp = deleteRequestPolicyDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteRequestPolicyDbCommand.Parameters.Add(dp);
                deleteRequestPolicyDbCommand.Prepare();
            }
            deleteRequestPolicyDbCommand.Transaction = dbTransaction;
            deleteRequestPolicyDbCommand.Parameters[0].Value = requestPolicy.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteRequestPolicyDbCommand.CommandText}\r\n-- Id: {requestPolicy.Id}");
            deleteRequestPolicyDbCommand.ExecuteNonQuery();
        }

        public void Insert(ServicePoint servicePoint)
        {
            if (servicePoint.Id == null) servicePoint.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertServicePointDbCommand == null)
            {
                insertServicePointDbCommand = dbConnection.CreateCommand();
                insertServicePointDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertServicePointDbCommand.Parameters.Add(dp);
                dp = insertServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertServicePointDbCommand.Parameters.Add(dp);
                dp = insertServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertServicePointDbCommand.Parameters.Add(dp);
                dp = insertServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertServicePointDbCommand.Parameters.Add(dp);
                insertServicePointDbCommand.Transaction = dbTransaction;
                insertServicePointDbCommand.Prepare();
            }
            insertServicePointDbCommand.Transaction = dbTransaction;
            insertServicePointDbCommand.Parameters[0].Value = (object)servicePoint.Id ?? DBNull.Value;
            insertServicePointDbCommand.Parameters[1].Value = (object)servicePoint.Content ?? DBNull.Value;
            insertServicePointDbCommand.Parameters[2].Value = (object)servicePoint.CreationTime ?? DBNull.Value;
            insertServicePointDbCommand.Parameters[3].Value = (object)servicePoint.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertServicePointDbCommand.CommandText}\r\n-- Id: {servicePoint.Id}\r\n-- Content: {servicePoint.Content}\r\n-- CreationTime: {servicePoint.CreationTime}\r\n-- CreationUserId: {servicePoint.CreationUserId}");
            insertServicePointDbCommand.ExecuteNonQuery();
        }

        public void Update(ServicePoint servicePoint)
        {
            if (ConnectIfNecessary() || updateServicePointDbCommand == null)
            {
                updateServicePointDbCommand = dbConnection.CreateCommand();
                updateServicePointDbCommand.Transaction = dbTransaction;
                updateServicePointDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateServicePointDbCommand.Parameters.Add(dp);
                dp = updateServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateServicePointDbCommand.Parameters.Add(dp);
                dp = updateServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateServicePointDbCommand.Parameters.Add(dp);
                dp = updateServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateServicePointDbCommand.Parameters.Add(dp);
                updateServicePointDbCommand.Prepare();
            }
            updateServicePointDbCommand.Transaction = dbTransaction;
            updateServicePointDbCommand.Parameters[0].Value = (object)servicePoint.Content ?? DBNull.Value;
            updateServicePointDbCommand.Parameters[1].Value = (object)servicePoint.CreationTime ?? DBNull.Value;
            updateServicePointDbCommand.Parameters[2].Value = (object)servicePoint.CreationUserId ?? DBNull.Value;
            updateServicePointDbCommand.Parameters[3].Value = servicePoint.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateServicePointDbCommand.CommandText}\r\n-- Content: {servicePoint.Content}\r\n-- CreationTime: {servicePoint.CreationTime}\r\n-- CreationUserId: {servicePoint.CreationUserId}\r\n-- Id: {servicePoint.Id}");
            updateServicePointDbCommand.ExecuteNonQuery();
        }

        public void Delete(ServicePoint servicePoint)
        {
            if (ConnectIfNecessary() || deleteServicePointDbCommand == null)
            {
                deleteServicePointDbCommand = dbConnection.CreateCommand();
                deleteServicePointDbCommand.Transaction = dbTransaction;
                deleteServicePointDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")} WHERE {Quote("_id")} = @Id";
                var dp = deleteServicePointDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteServicePointDbCommand.Parameters.Add(dp);
                deleteServicePointDbCommand.Prepare();
            }
            deleteServicePointDbCommand.Transaction = dbTransaction;
            deleteServicePointDbCommand.Parameters[0].Value = servicePoint.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteServicePointDbCommand.CommandText}\r\n-- Id: {servicePoint.Id}");
            deleteServicePointDbCommand.ExecuteNonQuery();
        }

        public void Insert(ServicePointUser servicePointUser)
        {
            if (servicePointUser.Id == null) servicePointUser.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertServicePointUserDbCommand == null)
            {
                insertServicePointUserDbCommand = dbConnection.CreateCommand();
                insertServicePointUserDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("defaultservicepointid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Defaultservicepointid)";
                var dp = insertServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertServicePointUserDbCommand.Parameters.Add(dp);
                dp = insertServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertServicePointUserDbCommand.Parameters.Add(dp);
                dp = insertServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertServicePointUserDbCommand.Parameters.Add(dp);
                dp = insertServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertServicePointUserDbCommand.Parameters.Add(dp);
                dp = insertServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Defaultservicepointid";
                dp.DbType = DbType.Guid;
                insertServicePointUserDbCommand.Parameters.Add(dp);
                insertServicePointUserDbCommand.Transaction = dbTransaction;
                insertServicePointUserDbCommand.Prepare();
            }
            insertServicePointUserDbCommand.Transaction = dbTransaction;
            insertServicePointUserDbCommand.Parameters[0].Value = (object)servicePointUser.Id ?? DBNull.Value;
            insertServicePointUserDbCommand.Parameters[1].Value = (object)servicePointUser.Content ?? DBNull.Value;
            insertServicePointUserDbCommand.Parameters[2].Value = (object)servicePointUser.CreationTime ?? DBNull.Value;
            insertServicePointUserDbCommand.Parameters[3].Value = (object)servicePointUser.CreationUserId ?? DBNull.Value;
            insertServicePointUserDbCommand.Parameters[4].Value = (object)servicePointUser.Defaultservicepointid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertServicePointUserDbCommand.CommandText}\r\n-- Id: {servicePointUser.Id}\r\n-- Content: {servicePointUser.Content}\r\n-- CreationTime: {servicePointUser.CreationTime}\r\n-- CreationUserId: {servicePointUser.CreationUserId}\r\n-- Defaultservicepointid: {servicePointUser.Defaultservicepointid}");
            insertServicePointUserDbCommand.ExecuteNonQuery();
        }

        public void Update(ServicePointUser servicePointUser)
        {
            if (ConnectIfNecessary() || updateServicePointUserDbCommand == null)
            {
                updateServicePointUserDbCommand = dbConnection.CreateCommand();
                updateServicePointUserDbCommand.Transaction = dbTransaction;
                updateServicePointUserDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("defaultservicepointid")} = @Defaultservicepointid WHERE {Quote("_id")} = @Id";
                var dp = updateServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateServicePointUserDbCommand.Parameters.Add(dp);
                dp = updateServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateServicePointUserDbCommand.Parameters.Add(dp);
                dp = updateServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateServicePointUserDbCommand.Parameters.Add(dp);
                dp = updateServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Defaultservicepointid";
                dp.DbType = DbType.Guid;
                updateServicePointUserDbCommand.Parameters.Add(dp);
                dp = updateServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateServicePointUserDbCommand.Parameters.Add(dp);
                updateServicePointUserDbCommand.Prepare();
            }
            updateServicePointUserDbCommand.Transaction = dbTransaction;
            updateServicePointUserDbCommand.Parameters[0].Value = (object)servicePointUser.Content ?? DBNull.Value;
            updateServicePointUserDbCommand.Parameters[1].Value = (object)servicePointUser.CreationTime ?? DBNull.Value;
            updateServicePointUserDbCommand.Parameters[2].Value = (object)servicePointUser.CreationUserId ?? DBNull.Value;
            updateServicePointUserDbCommand.Parameters[3].Value = (object)servicePointUser.Defaultservicepointid ?? DBNull.Value;
            updateServicePointUserDbCommand.Parameters[4].Value = servicePointUser.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateServicePointUserDbCommand.CommandText}\r\n-- Content: {servicePointUser.Content}\r\n-- CreationTime: {servicePointUser.CreationTime}\r\n-- CreationUserId: {servicePointUser.CreationUserId}\r\n-- Defaultservicepointid: {servicePointUser.Defaultservicepointid}\r\n-- Id: {servicePointUser.Id}");
            updateServicePointUserDbCommand.ExecuteNonQuery();
        }

        public void Delete(ServicePointUser servicePointUser)
        {
            if (ConnectIfNecessary() || deleteServicePointUserDbCommand == null)
            {
                deleteServicePointUserDbCommand = dbConnection.CreateCommand();
                deleteServicePointUserDbCommand.Transaction = dbTransaction;
                deleteServicePointUserDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")} WHERE {Quote("_id")} = @Id";
                var dp = deleteServicePointUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteServicePointUserDbCommand.Parameters.Add(dp);
                deleteServicePointUserDbCommand.Prepare();
            }
            deleteServicePointUserDbCommand.Transaction = dbTransaction;
            deleteServicePointUserDbCommand.Parameters[0].Value = servicePointUser.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteServicePointUserDbCommand.CommandText}\r\n-- Id: {servicePointUser.Id}");
            deleteServicePointUserDbCommand.ExecuteNonQuery();
        }

        public void Insert(Source source)
        {
            if (source.Id == null) source.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertSourceDbCommand == null)
            {
                insertSourceDbCommand = dbConnection.CreateCommand();
                insertSourceDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertSourceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertSourceDbCommand.Parameters.Add(dp);
                dp = insertSourceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertSourceDbCommand.Parameters.Add(dp);
                dp = insertSourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertSourceDbCommand.Parameters.Add(dp);
                dp = insertSourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertSourceDbCommand.Parameters.Add(dp);
                insertSourceDbCommand.Transaction = dbTransaction;
                insertSourceDbCommand.Prepare();
            }
            insertSourceDbCommand.Transaction = dbTransaction;
            insertSourceDbCommand.Parameters[0].Value = (object)source.Id ?? DBNull.Value;
            insertSourceDbCommand.Parameters[1].Value = (object)source.Content ?? DBNull.Value;
            insertSourceDbCommand.Parameters[2].Value = (object)source.CreationTime ?? DBNull.Value;
            insertSourceDbCommand.Parameters[3].Value = (object)source.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertSourceDbCommand.CommandText}\r\n-- Id: {source.Id}\r\n-- Content: {source.Content}\r\n-- CreationTime: {source.CreationTime}\r\n-- CreationUserId: {source.CreationUserId}");
            insertSourceDbCommand.ExecuteNonQuery();
        }

        public void Update(Source source)
        {
            if (ConnectIfNecessary() || updateSourceDbCommand == null)
            {
                updateSourceDbCommand = dbConnection.CreateCommand();
                updateSourceDbCommand.Transaction = dbTransaction;
                updateSourceDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateSourceDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateSourceDbCommand.Parameters.Add(dp);
                dp = updateSourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateSourceDbCommand.Parameters.Add(dp);
                dp = updateSourceDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateSourceDbCommand.Parameters.Add(dp);
                dp = updateSourceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateSourceDbCommand.Parameters.Add(dp);
                updateSourceDbCommand.Prepare();
            }
            updateSourceDbCommand.Transaction = dbTransaction;
            updateSourceDbCommand.Parameters[0].Value = (object)source.Content ?? DBNull.Value;
            updateSourceDbCommand.Parameters[1].Value = (object)source.CreationTime ?? DBNull.Value;
            updateSourceDbCommand.Parameters[2].Value = (object)source.CreationUserId ?? DBNull.Value;
            updateSourceDbCommand.Parameters[3].Value = source.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateSourceDbCommand.CommandText}\r\n-- Content: {source.Content}\r\n-- CreationTime: {source.CreationTime}\r\n-- CreationUserId: {source.CreationUserId}\r\n-- Id: {source.Id}");
            updateSourceDbCommand.ExecuteNonQuery();
        }

        public void Delete(Source source)
        {
            if (ConnectIfNecessary() || deleteSourceDbCommand == null)
            {
                deleteSourceDbCommand = dbConnection.CreateCommand();
                deleteSourceDbCommand.Transaction = dbTransaction;
                deleteSourceDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")} WHERE {Quote("id")} = @Id";
                var dp = deleteSourceDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteSourceDbCommand.Parameters.Add(dp);
                deleteSourceDbCommand.Prepare();
            }
            deleteSourceDbCommand.Transaction = dbTransaction;
            deleteSourceDbCommand.Parameters[0].Value = source.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteSourceDbCommand.CommandText}\r\n-- Id: {source.Id}");
            deleteSourceDbCommand.ExecuteNonQuery();
        }

        public void Insert(StaffSlip staffSlip)
        {
            if (staffSlip.Id == null) staffSlip.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertStaffSlipDbCommand == null)
            {
                insertStaffSlipDbCommand = dbConnection.CreateCommand();
                insertStaffSlipDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertStaffSlipDbCommand.Parameters.Add(dp);
                dp = insertStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertStaffSlipDbCommand.Parameters.Add(dp);
                dp = insertStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertStaffSlipDbCommand.Parameters.Add(dp);
                dp = insertStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertStaffSlipDbCommand.Parameters.Add(dp);
                insertStaffSlipDbCommand.Transaction = dbTransaction;
                insertStaffSlipDbCommand.Prepare();
            }
            insertStaffSlipDbCommand.Transaction = dbTransaction;
            insertStaffSlipDbCommand.Parameters[0].Value = (object)staffSlip.Id ?? DBNull.Value;
            insertStaffSlipDbCommand.Parameters[1].Value = (object)staffSlip.Content ?? DBNull.Value;
            insertStaffSlipDbCommand.Parameters[2].Value = (object)staffSlip.CreationTime ?? DBNull.Value;
            insertStaffSlipDbCommand.Parameters[3].Value = (object)staffSlip.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertStaffSlipDbCommand.CommandText}\r\n-- Id: {staffSlip.Id}\r\n-- Content: {staffSlip.Content}\r\n-- CreationTime: {staffSlip.CreationTime}\r\n-- CreationUserId: {staffSlip.CreationUserId}");
            insertStaffSlipDbCommand.ExecuteNonQuery();
        }

        public void Update(StaffSlip staffSlip)
        {
            if (ConnectIfNecessary() || updateStaffSlipDbCommand == null)
            {
                updateStaffSlipDbCommand = dbConnection.CreateCommand();
                updateStaffSlipDbCommand.Transaction = dbTransaction;
                updateStaffSlipDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateStaffSlipDbCommand.Parameters.Add(dp);
                dp = updateStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateStaffSlipDbCommand.Parameters.Add(dp);
                dp = updateStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateStaffSlipDbCommand.Parameters.Add(dp);
                dp = updateStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateStaffSlipDbCommand.Parameters.Add(dp);
                updateStaffSlipDbCommand.Prepare();
            }
            updateStaffSlipDbCommand.Transaction = dbTransaction;
            updateStaffSlipDbCommand.Parameters[0].Value = (object)staffSlip.Content ?? DBNull.Value;
            updateStaffSlipDbCommand.Parameters[1].Value = (object)staffSlip.CreationTime ?? DBNull.Value;
            updateStaffSlipDbCommand.Parameters[2].Value = (object)staffSlip.CreationUserId ?? DBNull.Value;
            updateStaffSlipDbCommand.Parameters[3].Value = staffSlip.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateStaffSlipDbCommand.CommandText}\r\n-- Content: {staffSlip.Content}\r\n-- CreationTime: {staffSlip.CreationTime}\r\n-- CreationUserId: {staffSlip.CreationUserId}\r\n-- Id: {staffSlip.Id}");
            updateStaffSlipDbCommand.ExecuteNonQuery();
        }

        public void Delete(StaffSlip staffSlip)
        {
            if (ConnectIfNecessary() || deleteStaffSlipDbCommand == null)
            {
                deleteStaffSlipDbCommand = dbConnection.CreateCommand();
                deleteStaffSlipDbCommand.Transaction = dbTransaction;
                deleteStaffSlipDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")} WHERE {Quote("_id")} = @Id";
                var dp = deleteStaffSlipDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteStaffSlipDbCommand.Parameters.Add(dp);
                deleteStaffSlipDbCommand.Prepare();
            }
            deleteStaffSlipDbCommand.Transaction = dbTransaction;
            deleteStaffSlipDbCommand.Parameters[0].Value = staffSlip.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteStaffSlipDbCommand.CommandText}\r\n-- Id: {staffSlip.Id}");
            deleteStaffSlipDbCommand.ExecuteNonQuery();
        }

        public void Insert(StatisticalCode statisticalCode)
        {
            if (statisticalCode.Id == null) statisticalCode.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertStatisticalCodeDbCommand == null)
            {
                insertStatisticalCodeDbCommand = dbConnection.CreateCommand();
                insertStatisticalCodeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("statisticalcodetypeid")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @Statisticalcodetypeid)";
                var dp = insertStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Statisticalcodetypeid";
                dp.DbType = DbType.Guid;
                insertStatisticalCodeDbCommand.Parameters.Add(dp);
                insertStatisticalCodeDbCommand.Transaction = dbTransaction;
                insertStatisticalCodeDbCommand.Prepare();
            }
            insertStatisticalCodeDbCommand.Transaction = dbTransaction;
            insertStatisticalCodeDbCommand.Parameters[0].Value = (object)statisticalCode.Id ?? DBNull.Value;
            insertStatisticalCodeDbCommand.Parameters[1].Value = (object)statisticalCode.Content ?? DBNull.Value;
            insertStatisticalCodeDbCommand.Parameters[2].Value = (object)statisticalCode.CreationTime ?? DBNull.Value;
            insertStatisticalCodeDbCommand.Parameters[3].Value = (object)statisticalCode.CreationUserId ?? DBNull.Value;
            insertStatisticalCodeDbCommand.Parameters[4].Value = (object)statisticalCode.Statisticalcodetypeid ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertStatisticalCodeDbCommand.CommandText}\r\n-- Id: {statisticalCode.Id}\r\n-- Content: {statisticalCode.Content}\r\n-- CreationTime: {statisticalCode.CreationTime}\r\n-- CreationUserId: {statisticalCode.CreationUserId}\r\n-- Statisticalcodetypeid: {statisticalCode.Statisticalcodetypeid}");
            insertStatisticalCodeDbCommand.ExecuteNonQuery();
        }

        public void Update(StatisticalCode statisticalCode)
        {
            if (ConnectIfNecessary() || updateStatisticalCodeDbCommand == null)
            {
                updateStatisticalCodeDbCommand = dbConnection.CreateCommand();
                updateStatisticalCodeDbCommand.Transaction = dbTransaction;
                updateStatisticalCodeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("statisticalcodetypeid")} = @Statisticalcodetypeid WHERE {Quote("_id")} = @Id";
                var dp = updateStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Statisticalcodetypeid";
                dp.DbType = DbType.Guid;
                updateStatisticalCodeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateStatisticalCodeDbCommand.Parameters.Add(dp);
                updateStatisticalCodeDbCommand.Prepare();
            }
            updateStatisticalCodeDbCommand.Transaction = dbTransaction;
            updateStatisticalCodeDbCommand.Parameters[0].Value = (object)statisticalCode.Content ?? DBNull.Value;
            updateStatisticalCodeDbCommand.Parameters[1].Value = (object)statisticalCode.CreationTime ?? DBNull.Value;
            updateStatisticalCodeDbCommand.Parameters[2].Value = (object)statisticalCode.CreationUserId ?? DBNull.Value;
            updateStatisticalCodeDbCommand.Parameters[3].Value = (object)statisticalCode.Statisticalcodetypeid ?? DBNull.Value;
            updateStatisticalCodeDbCommand.Parameters[4].Value = statisticalCode.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateStatisticalCodeDbCommand.CommandText}\r\n-- Content: {statisticalCode.Content}\r\n-- CreationTime: {statisticalCode.CreationTime}\r\n-- CreationUserId: {statisticalCode.CreationUserId}\r\n-- Statisticalcodetypeid: {statisticalCode.Statisticalcodetypeid}\r\n-- Id: {statisticalCode.Id}");
            updateStatisticalCodeDbCommand.ExecuteNonQuery();
        }

        public void Delete(StatisticalCode statisticalCode)
        {
            if (ConnectIfNecessary() || deleteStatisticalCodeDbCommand == null)
            {
                deleteStatisticalCodeDbCommand = dbConnection.CreateCommand();
                deleteStatisticalCodeDbCommand.Transaction = dbTransaction;
                deleteStatisticalCodeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")} WHERE {Quote("_id")} = @Id";
                var dp = deleteStatisticalCodeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteStatisticalCodeDbCommand.Parameters.Add(dp);
                deleteStatisticalCodeDbCommand.Prepare();
            }
            deleteStatisticalCodeDbCommand.Transaction = dbTransaction;
            deleteStatisticalCodeDbCommand.Parameters[0].Value = statisticalCode.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteStatisticalCodeDbCommand.CommandText}\r\n-- Id: {statisticalCode.Id}");
            deleteStatisticalCodeDbCommand.ExecuteNonQuery();
        }

        public void Insert(StatisticalCodeType statisticalCodeType)
        {
            if (statisticalCodeType.Id == null) statisticalCodeType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertStatisticalCodeTypeDbCommand == null)
            {
                insertStatisticalCodeTypeDbCommand = dbConnection.CreateCommand();
                insertStatisticalCodeTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                dp = insertStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                insertStatisticalCodeTypeDbCommand.Transaction = dbTransaction;
                insertStatisticalCodeTypeDbCommand.Prepare();
            }
            insertStatisticalCodeTypeDbCommand.Transaction = dbTransaction;
            insertStatisticalCodeTypeDbCommand.Parameters[0].Value = (object)statisticalCodeType.Id ?? DBNull.Value;
            insertStatisticalCodeTypeDbCommand.Parameters[1].Value = (object)statisticalCodeType.Content ?? DBNull.Value;
            insertStatisticalCodeTypeDbCommand.Parameters[2].Value = (object)statisticalCodeType.CreationTime ?? DBNull.Value;
            insertStatisticalCodeTypeDbCommand.Parameters[3].Value = (object)statisticalCodeType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertStatisticalCodeTypeDbCommand.CommandText}\r\n-- Id: {statisticalCodeType.Id}\r\n-- Content: {statisticalCodeType.Content}\r\n-- CreationTime: {statisticalCodeType.CreationTime}\r\n-- CreationUserId: {statisticalCodeType.CreationUserId}");
            insertStatisticalCodeTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(StatisticalCodeType statisticalCodeType)
        {
            if (ConnectIfNecessary() || updateStatisticalCodeTypeDbCommand == null)
            {
                updateStatisticalCodeTypeDbCommand = dbConnection.CreateCommand();
                updateStatisticalCodeTypeDbCommand.Transaction = dbTransaction;
                updateStatisticalCodeTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                dp = updateStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                updateStatisticalCodeTypeDbCommand.Prepare();
            }
            updateStatisticalCodeTypeDbCommand.Transaction = dbTransaction;
            updateStatisticalCodeTypeDbCommand.Parameters[0].Value = (object)statisticalCodeType.Content ?? DBNull.Value;
            updateStatisticalCodeTypeDbCommand.Parameters[1].Value = (object)statisticalCodeType.CreationTime ?? DBNull.Value;
            updateStatisticalCodeTypeDbCommand.Parameters[2].Value = (object)statisticalCodeType.CreationUserId ?? DBNull.Value;
            updateStatisticalCodeTypeDbCommand.Parameters[3].Value = statisticalCodeType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateStatisticalCodeTypeDbCommand.CommandText}\r\n-- Content: {statisticalCodeType.Content}\r\n-- CreationTime: {statisticalCodeType.CreationTime}\r\n-- CreationUserId: {statisticalCodeType.CreationUserId}\r\n-- Id: {statisticalCodeType.Id}");
            updateStatisticalCodeTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(StatisticalCodeType statisticalCodeType)
        {
            if (ConnectIfNecessary() || deleteStatisticalCodeTypeDbCommand == null)
            {
                deleteStatisticalCodeTypeDbCommand = dbConnection.CreateCommand();
                deleteStatisticalCodeTypeDbCommand.Transaction = dbTransaction;
                deleteStatisticalCodeTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")} WHERE {Quote("_id")} = @Id";
                var dp = deleteStatisticalCodeTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteStatisticalCodeTypeDbCommand.Parameters.Add(dp);
                deleteStatisticalCodeTypeDbCommand.Prepare();
            }
            deleteStatisticalCodeTypeDbCommand.Transaction = dbTransaction;
            deleteStatisticalCodeTypeDbCommand.Parameters[0].Value = statisticalCodeType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteStatisticalCodeTypeDbCommand.CommandText}\r\n-- Id: {statisticalCodeType.Id}");
            deleteStatisticalCodeTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Tag tag)
        {
            if (tag.Id == null) tag.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertTagDbCommand == null)
            {
                insertTagDbCommand = dbConnection.CreateCommand();
                insertTagDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")} ({Quote("_id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertTagDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertTagDbCommand.Parameters.Add(dp);
                dp = insertTagDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTagDbCommand.Parameters.Add(dp);
                dp = insertTagDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertTagDbCommand.Parameters.Add(dp);
                dp = insertTagDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTagDbCommand.Parameters.Add(dp);
                insertTagDbCommand.Transaction = dbTransaction;
                insertTagDbCommand.Prepare();
            }
            insertTagDbCommand.Transaction = dbTransaction;
            insertTagDbCommand.Parameters[0].Value = (object)tag.Id ?? DBNull.Value;
            insertTagDbCommand.Parameters[1].Value = (object)tag.Content ?? DBNull.Value;
            insertTagDbCommand.Parameters[2].Value = (object)tag.CreationTime ?? DBNull.Value;
            insertTagDbCommand.Parameters[3].Value = (object)tag.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertTagDbCommand.CommandText}\r\n-- Id: {tag.Id}\r\n-- Content: {tag.Content}\r\n-- CreationTime: {tag.CreationTime}\r\n-- CreationUserId: {tag.CreationUserId}");
            insertTagDbCommand.ExecuteNonQuery();
        }

        public void Update(Tag tag)
        {
            if (ConnectIfNecessary() || updateTagDbCommand == null)
            {
                updateTagDbCommand = dbConnection.CreateCommand();
                updateTagDbCommand.Transaction = dbTransaction;
                updateTagDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("_id")} = @Id";
                var dp = updateTagDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTagDbCommand.Parameters.Add(dp);
                dp = updateTagDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateTagDbCommand.Parameters.Add(dp);
                dp = updateTagDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTagDbCommand.Parameters.Add(dp);
                dp = updateTagDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateTagDbCommand.Parameters.Add(dp);
                updateTagDbCommand.Prepare();
            }
            updateTagDbCommand.Transaction = dbTransaction;
            updateTagDbCommand.Parameters[0].Value = (object)tag.Content ?? DBNull.Value;
            updateTagDbCommand.Parameters[1].Value = (object)tag.CreationTime ?? DBNull.Value;
            updateTagDbCommand.Parameters[2].Value = (object)tag.CreationUserId ?? DBNull.Value;
            updateTagDbCommand.Parameters[3].Value = tag.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateTagDbCommand.CommandText}\r\n-- Content: {tag.Content}\r\n-- CreationTime: {tag.CreationTime}\r\n-- CreationUserId: {tag.CreationUserId}\r\n-- Id: {tag.Id}");
            updateTagDbCommand.ExecuteNonQuery();
        }

        public void Delete(Tag tag)
        {
            if (ConnectIfNecessary() || deleteTagDbCommand == null)
            {
                deleteTagDbCommand = dbConnection.CreateCommand();
                deleteTagDbCommand.Transaction = dbTransaction;
                deleteTagDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")} WHERE {Quote("_id")} = @Id";
                var dp = deleteTagDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteTagDbCommand.Parameters.Add(dp);
                deleteTagDbCommand.Prepare();
            }
            deleteTagDbCommand.Transaction = dbTransaction;
            deleteTagDbCommand.Parameters[0].Value = tag.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteTagDbCommand.CommandText}\r\n-- Id: {tag.Id}");
            deleteTagDbCommand.ExecuteNonQuery();
        }

        public void Insert(Transaction transaction)
        {
            if (transaction.Id == null) transaction.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertTransactionDbCommand == null)
            {
                insertTransactionDbCommand = dbConnection.CreateCommand();
                insertTransactionDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}, {Quote("budget_id")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId, @BudgetId)";
                var dp = insertTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertTransactionDbCommand.Parameters.Add(dp);
                dp = insertTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTransactionDbCommand.Parameters.Add(dp);
                dp = insertTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertTransactionDbCommand.Parameters.Add(dp);
                dp = insertTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTransactionDbCommand.Parameters.Add(dp);
                dp = insertTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@BudgetId";
                dp.DbType = DbType.Guid;
                insertTransactionDbCommand.Parameters.Add(dp);
                insertTransactionDbCommand.Transaction = dbTransaction;
                insertTransactionDbCommand.Prepare();
            }
            insertTransactionDbCommand.Transaction = dbTransaction;
            insertTransactionDbCommand.Parameters[0].Value = (object)transaction.Id ?? DBNull.Value;
            insertTransactionDbCommand.Parameters[1].Value = (object)transaction.Content ?? DBNull.Value;
            insertTransactionDbCommand.Parameters[2].Value = (object)transaction.CreationTime ?? DBNull.Value;
            insertTransactionDbCommand.Parameters[3].Value = (object)transaction.CreationUserId ?? DBNull.Value;
            insertTransactionDbCommand.Parameters[4].Value = (object)transaction.BudgetId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertTransactionDbCommand.CommandText}\r\n-- Id: {transaction.Id}\r\n-- Content: {transaction.Content}\r\n-- CreationTime: {transaction.CreationTime}\r\n-- CreationUserId: {transaction.CreationUserId}\r\n-- BudgetId: {transaction.BudgetId}");
            insertTransactionDbCommand.ExecuteNonQuery();
        }

        public void Update(Transaction transaction)
        {
            if (ConnectIfNecessary() || updateTransactionDbCommand == null)
            {
                updateTransactionDbCommand = dbConnection.CreateCommand();
                updateTransactionDbCommand.Transaction = dbTransaction;
                updateTransactionDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId, {Quote("budget_id")} = @BudgetId WHERE {Quote("id")} = @Id";
                var dp = updateTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTransactionDbCommand.Parameters.Add(dp);
                dp = updateTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateTransactionDbCommand.Parameters.Add(dp);
                dp = updateTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTransactionDbCommand.Parameters.Add(dp);
                dp = updateTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@BudgetId";
                dp.DbType = DbType.Guid;
                updateTransactionDbCommand.Parameters.Add(dp);
                dp = updateTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateTransactionDbCommand.Parameters.Add(dp);
                updateTransactionDbCommand.Prepare();
            }
            updateTransactionDbCommand.Transaction = dbTransaction;
            updateTransactionDbCommand.Parameters[0].Value = (object)transaction.Content ?? DBNull.Value;
            updateTransactionDbCommand.Parameters[1].Value = (object)transaction.CreationTime ?? DBNull.Value;
            updateTransactionDbCommand.Parameters[2].Value = (object)transaction.CreationUserId ?? DBNull.Value;
            updateTransactionDbCommand.Parameters[3].Value = (object)transaction.BudgetId ?? DBNull.Value;
            updateTransactionDbCommand.Parameters[4].Value = transaction.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateTransactionDbCommand.CommandText}\r\n-- Content: {transaction.Content}\r\n-- CreationTime: {transaction.CreationTime}\r\n-- CreationUserId: {transaction.CreationUserId}\r\n-- BudgetId: {transaction.BudgetId}\r\n-- Id: {transaction.Id}");
            updateTransactionDbCommand.ExecuteNonQuery();
        }

        public void Delete(Transaction transaction)
        {
            if (ConnectIfNecessary() || deleteTransactionDbCommand == null)
            {
                deleteTransactionDbCommand = dbConnection.CreateCommand();
                deleteTransactionDbCommand.Transaction = dbTransaction;
                deleteTransactionDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")} WHERE {Quote("id")} = @Id";
                var dp = deleteTransactionDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteTransactionDbCommand.Parameters.Add(dp);
                deleteTransactionDbCommand.Prepare();
            }
            deleteTransactionDbCommand.Transaction = dbTransaction;
            deleteTransactionDbCommand.Parameters[0].Value = transaction.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteTransactionDbCommand.CommandText}\r\n-- Id: {transaction.Id}");
            deleteTransactionDbCommand.ExecuteNonQuery();
        }

        public void Insert(Transfer transfer)
        {
            if (transfer.Id == null) transfer.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertTransferDbCommand == null)
            {
                insertTransferDbCommand = dbConnection.CreateCommand();
                insertTransferDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertTransferDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertTransferDbCommand.Parameters.Add(dp);
                dp = insertTransferDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTransferDbCommand.Parameters.Add(dp);
                dp = insertTransferDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertTransferDbCommand.Parameters.Add(dp);
                dp = insertTransferDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTransferDbCommand.Parameters.Add(dp);
                insertTransferDbCommand.Transaction = dbTransaction;
                insertTransferDbCommand.Prepare();
            }
            insertTransferDbCommand.Transaction = dbTransaction;
            insertTransferDbCommand.Parameters[0].Value = (object)transfer.Id ?? DBNull.Value;
            insertTransferDbCommand.Parameters[1].Value = (object)transfer.Content ?? DBNull.Value;
            insertTransferDbCommand.Parameters[2].Value = (object)transfer.CreationTime ?? DBNull.Value;
            insertTransferDbCommand.Parameters[3].Value = (object)transfer.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertTransferDbCommand.CommandText}\r\n-- Id: {transfer.Id}\r\n-- Content: {transfer.Content}\r\n-- CreationTime: {transfer.CreationTime}\r\n-- CreationUserId: {transfer.CreationUserId}");
            insertTransferDbCommand.ExecuteNonQuery();
        }

        public void Update(Transfer transfer)
        {
            if (ConnectIfNecessary() || updateTransferDbCommand == null)
            {
                updateTransferDbCommand = dbConnection.CreateCommand();
                updateTransferDbCommand.Transaction = dbTransaction;
                updateTransferDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateTransferDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTransferDbCommand.Parameters.Add(dp);
                dp = updateTransferDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateTransferDbCommand.Parameters.Add(dp);
                dp = updateTransferDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTransferDbCommand.Parameters.Add(dp);
                dp = updateTransferDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateTransferDbCommand.Parameters.Add(dp);
                updateTransferDbCommand.Prepare();
            }
            updateTransferDbCommand.Transaction = dbTransaction;
            updateTransferDbCommand.Parameters[0].Value = (object)transfer.Content ?? DBNull.Value;
            updateTransferDbCommand.Parameters[1].Value = (object)transfer.CreationTime ?? DBNull.Value;
            updateTransferDbCommand.Parameters[2].Value = (object)transfer.CreationUserId ?? DBNull.Value;
            updateTransferDbCommand.Parameters[3].Value = transfer.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateTransferDbCommand.CommandText}\r\n-- Content: {transfer.Content}\r\n-- CreationTime: {transfer.CreationTime}\r\n-- CreationUserId: {transfer.CreationUserId}\r\n-- Id: {transfer.Id}");
            updateTransferDbCommand.ExecuteNonQuery();
        }

        public void Delete(Transfer transfer)
        {
            if (ConnectIfNecessary() || deleteTransferDbCommand == null)
            {
                deleteTransferDbCommand = dbConnection.CreateCommand();
                deleteTransferDbCommand.Transaction = dbTransaction;
                deleteTransferDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")} WHERE {Quote("id")} = @Id";
                var dp = deleteTransferDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteTransferDbCommand.Parameters.Add(dp);
                deleteTransferDbCommand.Prepare();
            }
            deleteTransferDbCommand.Transaction = dbTransaction;
            deleteTransferDbCommand.Parameters[0].Value = transfer.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteTransferDbCommand.CommandText}\r\n-- Id: {transfer.Id}");
            deleteTransferDbCommand.ExecuteNonQuery();
        }

        public void Insert(TransferCriteria transferCriteria)
        {
            if (transferCriteria.Id == null) transferCriteria.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertTransferCriteriaDbCommand == null)
            {
                insertTransferCriteriaDbCommand = dbConnection.CreateCommand();
                insertTransferCriteriaDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertTransferCriteriaDbCommand.Parameters.Add(dp);
                dp = insertTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTransferCriteriaDbCommand.Parameters.Add(dp);
                dp = insertTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertTransferCriteriaDbCommand.Parameters.Add(dp);
                dp = insertTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertTransferCriteriaDbCommand.Parameters.Add(dp);
                insertTransferCriteriaDbCommand.Transaction = dbTransaction;
                insertTransferCriteriaDbCommand.Prepare();
            }
            insertTransferCriteriaDbCommand.Transaction = dbTransaction;
            insertTransferCriteriaDbCommand.Parameters[0].Value = (object)transferCriteria.Id ?? DBNull.Value;
            insertTransferCriteriaDbCommand.Parameters[1].Value = (object)transferCriteria.Content ?? DBNull.Value;
            insertTransferCriteriaDbCommand.Parameters[2].Value = (object)transferCriteria.CreationTime ?? DBNull.Value;
            insertTransferCriteriaDbCommand.Parameters[3].Value = (object)transferCriteria.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertTransferCriteriaDbCommand.CommandText}\r\n-- Id: {transferCriteria.Id}\r\n-- Content: {transferCriteria.Content}\r\n-- CreationTime: {transferCriteria.CreationTime}\r\n-- CreationUserId: {transferCriteria.CreationUserId}");
            insertTransferCriteriaDbCommand.ExecuteNonQuery();
        }

        public void Update(TransferCriteria transferCriteria)
        {
            if (ConnectIfNecessary() || updateTransferCriteriaDbCommand == null)
            {
                updateTransferCriteriaDbCommand = dbConnection.CreateCommand();
                updateTransferCriteriaDbCommand.Transaction = dbTransaction;
                updateTransferCriteriaDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTransferCriteriaDbCommand.Parameters.Add(dp);
                dp = updateTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateTransferCriteriaDbCommand.Parameters.Add(dp);
                dp = updateTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateTransferCriteriaDbCommand.Parameters.Add(dp);
                dp = updateTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateTransferCriteriaDbCommand.Parameters.Add(dp);
                updateTransferCriteriaDbCommand.Prepare();
            }
            updateTransferCriteriaDbCommand.Transaction = dbTransaction;
            updateTransferCriteriaDbCommand.Parameters[0].Value = (object)transferCriteria.Content ?? DBNull.Value;
            updateTransferCriteriaDbCommand.Parameters[1].Value = (object)transferCriteria.CreationTime ?? DBNull.Value;
            updateTransferCriteriaDbCommand.Parameters[2].Value = (object)transferCriteria.CreationUserId ?? DBNull.Value;
            updateTransferCriteriaDbCommand.Parameters[3].Value = transferCriteria.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateTransferCriteriaDbCommand.CommandText}\r\n-- Content: {transferCriteria.Content}\r\n-- CreationTime: {transferCriteria.CreationTime}\r\n-- CreationUserId: {transferCriteria.CreationUserId}\r\n-- Id: {transferCriteria.Id}");
            updateTransferCriteriaDbCommand.ExecuteNonQuery();
        }

        public void Delete(TransferCriteria transferCriteria)
        {
            if (ConnectIfNecessary() || deleteTransferCriteriaDbCommand == null)
            {
                deleteTransferCriteriaDbCommand = dbConnection.CreateCommand();
                deleteTransferCriteriaDbCommand.Transaction = dbTransaction;
                deleteTransferCriteriaDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")} WHERE {Quote("id")} = @Id";
                var dp = deleteTransferCriteriaDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteTransferCriteriaDbCommand.Parameters.Add(dp);
                deleteTransferCriteriaDbCommand.Prepare();
            }
            deleteTransferCriteriaDbCommand.Transaction = dbTransaction;
            deleteTransferCriteriaDbCommand.Parameters[0].Value = transferCriteria.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteTransferCriteriaDbCommand.CommandText}\r\n-- Id: {transferCriteria.Id}");
            deleteTransferCriteriaDbCommand.ExecuteNonQuery();
        }

        public void Insert(Url url)
        {
            if (url.Id == null) url.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertUrlDbCommand == null)
            {
                insertUrlDbCommand = dbConnection.CreateCommand();
                insertUrlDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertUrlDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertUrlDbCommand.Parameters.Add(dp);
                dp = insertUrlDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertUrlDbCommand.Parameters.Add(dp);
                dp = insertUrlDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertUrlDbCommand.Parameters.Add(dp);
                dp = insertUrlDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertUrlDbCommand.Parameters.Add(dp);
                insertUrlDbCommand.Transaction = dbTransaction;
                insertUrlDbCommand.Prepare();
            }
            insertUrlDbCommand.Transaction = dbTransaction;
            insertUrlDbCommand.Parameters[0].Value = (object)url.Id ?? DBNull.Value;
            insertUrlDbCommand.Parameters[1].Value = (object)url.Content ?? DBNull.Value;
            insertUrlDbCommand.Parameters[2].Value = (object)url.CreationTime ?? DBNull.Value;
            insertUrlDbCommand.Parameters[3].Value = (object)url.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertUrlDbCommand.CommandText}\r\n-- Id: {url.Id}\r\n-- Content: {url.Content}\r\n-- CreationTime: {url.CreationTime}\r\n-- CreationUserId: {url.CreationUserId}");
            insertUrlDbCommand.ExecuteNonQuery();
        }

        public void Update(Url url)
        {
            if (ConnectIfNecessary() || updateUrlDbCommand == null)
            {
                updateUrlDbCommand = dbConnection.CreateCommand();
                updateUrlDbCommand.Transaction = dbTransaction;
                updateUrlDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateUrlDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateUrlDbCommand.Parameters.Add(dp);
                dp = updateUrlDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateUrlDbCommand.Parameters.Add(dp);
                dp = updateUrlDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateUrlDbCommand.Parameters.Add(dp);
                dp = updateUrlDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateUrlDbCommand.Parameters.Add(dp);
                updateUrlDbCommand.Prepare();
            }
            updateUrlDbCommand.Transaction = dbTransaction;
            updateUrlDbCommand.Parameters[0].Value = (object)url.Content ?? DBNull.Value;
            updateUrlDbCommand.Parameters[1].Value = (object)url.CreationTime ?? DBNull.Value;
            updateUrlDbCommand.Parameters[2].Value = (object)url.CreationUserId ?? DBNull.Value;
            updateUrlDbCommand.Parameters[3].Value = url.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateUrlDbCommand.CommandText}\r\n-- Content: {url.Content}\r\n-- CreationTime: {url.CreationTime}\r\n-- CreationUserId: {url.CreationUserId}\r\n-- Id: {url.Id}");
            updateUrlDbCommand.ExecuteNonQuery();
        }

        public void Delete(Url url)
        {
            if (ConnectIfNecessary() || deleteUrlDbCommand == null)
            {
                deleteUrlDbCommand = dbConnection.CreateCommand();
                deleteUrlDbCommand.Transaction = dbTransaction;
                deleteUrlDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")} WHERE {Quote("id")} = @Id";
                var dp = deleteUrlDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteUrlDbCommand.Parameters.Add(dp);
                deleteUrlDbCommand.Prepare();
            }
            deleteUrlDbCommand.Transaction = dbTransaction;
            deleteUrlDbCommand.Parameters[0].Value = url.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteUrlDbCommand.CommandText}\r\n-- Id: {url.Id}");
            deleteUrlDbCommand.ExecuteNonQuery();
        }

        public void Insert(User user)
        {
            if (user.Id == null) user.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertUserDbCommand == null)
            {
                insertUserDbCommand = dbConnection.CreateCommand();
                insertUserDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertUserDbCommand.Parameters.Add(dp);
                dp = insertUserDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertUserDbCommand.Parameters.Add(dp);
                dp = insertUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertUserDbCommand.Parameters.Add(dp);
                dp = insertUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertUserDbCommand.Parameters.Add(dp);
                insertUserDbCommand.Transaction = dbTransaction;
                insertUserDbCommand.Prepare();
            }
            insertUserDbCommand.Transaction = dbTransaction;
            insertUserDbCommand.Parameters[0].Value = (object)user.Id ?? DBNull.Value;
            insertUserDbCommand.Parameters[1].Value = (object)user.Content ?? DBNull.Value;
            insertUserDbCommand.Parameters[2].Value = (object)user.CreationTime ?? DBNull.Value;
            insertUserDbCommand.Parameters[3].Value = (object)user.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertUserDbCommand.CommandText}\r\n-- Id: {user.Id}\r\n-- Content: {user.Content}\r\n-- CreationTime: {user.CreationTime}\r\n-- CreationUserId: {user.CreationUserId}");
            insertUserDbCommand.ExecuteNonQuery();
        }

        public void Update(User user)
        {
            if (ConnectIfNecessary() || updateUserDbCommand == null)
            {
                updateUserDbCommand = dbConnection.CreateCommand();
                updateUserDbCommand.Transaction = dbTransaction;
                updateUserDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateUserDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateUserDbCommand.Parameters.Add(dp);
                dp = updateUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateUserDbCommand.Parameters.Add(dp);
                dp = updateUserDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateUserDbCommand.Parameters.Add(dp);
                dp = updateUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateUserDbCommand.Parameters.Add(dp);
                updateUserDbCommand.Prepare();
            }
            updateUserDbCommand.Transaction = dbTransaction;
            updateUserDbCommand.Parameters[0].Value = (object)user.Content ?? DBNull.Value;
            updateUserDbCommand.Parameters[1].Value = (object)user.CreationTime ?? DBNull.Value;
            updateUserDbCommand.Parameters[2].Value = (object)user.CreationUserId ?? DBNull.Value;
            updateUserDbCommand.Parameters[3].Value = user.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateUserDbCommand.CommandText}\r\n-- Content: {user.Content}\r\n-- CreationTime: {user.CreationTime}\r\n-- CreationUserId: {user.CreationUserId}\r\n-- Id: {user.Id}");
            updateUserDbCommand.ExecuteNonQuery();
        }

        public void Delete(User user)
        {
            if (ConnectIfNecessary() || deleteUserDbCommand == null)
            {
                deleteUserDbCommand = dbConnection.CreateCommand();
                deleteUserDbCommand.Transaction = dbTransaction;
                deleteUserDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")} WHERE {Quote("id")} = @Id";
                var dp = deleteUserDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteUserDbCommand.Parameters.Add(dp);
                deleteUserDbCommand.Prepare();
            }
            deleteUserDbCommand.Transaction = dbTransaction;
            deleteUserDbCommand.Parameters[0].Value = user.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteUserDbCommand.CommandText}\r\n-- Id: {user.Id}");
            deleteUserDbCommand.ExecuteNonQuery();
        }

        public void Insert(Vendor vendor)
        {
            if (vendor.Id == null) vendor.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertVendorDbCommand == null)
            {
                insertVendorDbCommand = dbConnection.CreateCommand();
                insertVendorDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertVendorDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertVendorDbCommand.Parameters.Add(dp);
                dp = insertVendorDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorDbCommand.Parameters.Add(dp);
                dp = insertVendorDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertVendorDbCommand.Parameters.Add(dp);
                dp = insertVendorDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorDbCommand.Parameters.Add(dp);
                insertVendorDbCommand.Transaction = dbTransaction;
                insertVendorDbCommand.Prepare();
            }
            insertVendorDbCommand.Transaction = dbTransaction;
            insertVendorDbCommand.Parameters[0].Value = (object)vendor.Id ?? DBNull.Value;
            insertVendorDbCommand.Parameters[1].Value = (object)vendor.Content ?? DBNull.Value;
            insertVendorDbCommand.Parameters[2].Value = (object)vendor.CreationTime ?? DBNull.Value;
            insertVendorDbCommand.Parameters[3].Value = (object)vendor.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertVendorDbCommand.CommandText}\r\n-- Id: {vendor.Id}\r\n-- Content: {vendor.Content}\r\n-- CreationTime: {vendor.CreationTime}\r\n-- CreationUserId: {vendor.CreationUserId}");
            insertVendorDbCommand.ExecuteNonQuery();
        }

        public void Update(Vendor vendor)
        {
            if (ConnectIfNecessary() || updateVendorDbCommand == null)
            {
                updateVendorDbCommand = dbConnection.CreateCommand();
                updateVendorDbCommand.Transaction = dbTransaction;
                updateVendorDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateVendorDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorDbCommand.Parameters.Add(dp);
                dp = updateVendorDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateVendorDbCommand.Parameters.Add(dp);
                dp = updateVendorDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorDbCommand.Parameters.Add(dp);
                dp = updateVendorDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateVendorDbCommand.Parameters.Add(dp);
                updateVendorDbCommand.Prepare();
            }
            updateVendorDbCommand.Transaction = dbTransaction;
            updateVendorDbCommand.Parameters[0].Value = (object)vendor.Content ?? DBNull.Value;
            updateVendorDbCommand.Parameters[1].Value = (object)vendor.CreationTime ?? DBNull.Value;
            updateVendorDbCommand.Parameters[2].Value = (object)vendor.CreationUserId ?? DBNull.Value;
            updateVendorDbCommand.Parameters[3].Value = vendor.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateVendorDbCommand.CommandText}\r\n-- Content: {vendor.Content}\r\n-- CreationTime: {vendor.CreationTime}\r\n-- CreationUserId: {vendor.CreationUserId}\r\n-- Id: {vendor.Id}");
            updateVendorDbCommand.ExecuteNonQuery();
        }

        public void Delete(Vendor vendor)
        {
            if (ConnectIfNecessary() || deleteVendorDbCommand == null)
            {
                deleteVendorDbCommand = dbConnection.CreateCommand();
                deleteVendorDbCommand.Transaction = dbTransaction;
                deleteVendorDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")} WHERE {Quote("id")} = @Id";
                var dp = deleteVendorDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteVendorDbCommand.Parameters.Add(dp);
                deleteVendorDbCommand.Prepare();
            }
            deleteVendorDbCommand.Transaction = dbTransaction;
            deleteVendorDbCommand.Parameters[0].Value = vendor.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteVendorDbCommand.CommandText}\r\n-- Id: {vendor.Id}");
            deleteVendorDbCommand.ExecuteNonQuery();
        }

        public void Insert(VendorCategory vendorCategory)
        {
            if (vendorCategory.Id == null) vendorCategory.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertVendorCategoryDbCommand == null)
            {
                insertVendorCategoryDbCommand = dbConnection.CreateCommand();
                insertVendorCategoryDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertVendorCategoryDbCommand.Parameters.Add(dp);
                dp = insertVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorCategoryDbCommand.Parameters.Add(dp);
                dp = insertVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertVendorCategoryDbCommand.Parameters.Add(dp);
                dp = insertVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorCategoryDbCommand.Parameters.Add(dp);
                insertVendorCategoryDbCommand.Transaction = dbTransaction;
                insertVendorCategoryDbCommand.Prepare();
            }
            insertVendorCategoryDbCommand.Transaction = dbTransaction;
            insertVendorCategoryDbCommand.Parameters[0].Value = (object)vendorCategory.Id ?? DBNull.Value;
            insertVendorCategoryDbCommand.Parameters[1].Value = (object)vendorCategory.Content ?? DBNull.Value;
            insertVendorCategoryDbCommand.Parameters[2].Value = (object)vendorCategory.CreationTime ?? DBNull.Value;
            insertVendorCategoryDbCommand.Parameters[3].Value = (object)vendorCategory.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertVendorCategoryDbCommand.CommandText}\r\n-- Id: {vendorCategory.Id}\r\n-- Content: {vendorCategory.Content}\r\n-- CreationTime: {vendorCategory.CreationTime}\r\n-- CreationUserId: {vendorCategory.CreationUserId}");
            insertVendorCategoryDbCommand.ExecuteNonQuery();
        }

        public void Update(VendorCategory vendorCategory)
        {
            if (ConnectIfNecessary() || updateVendorCategoryDbCommand == null)
            {
                updateVendorCategoryDbCommand = dbConnection.CreateCommand();
                updateVendorCategoryDbCommand.Transaction = dbTransaction;
                updateVendorCategoryDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorCategoryDbCommand.Parameters.Add(dp);
                dp = updateVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateVendorCategoryDbCommand.Parameters.Add(dp);
                dp = updateVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorCategoryDbCommand.Parameters.Add(dp);
                dp = updateVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateVendorCategoryDbCommand.Parameters.Add(dp);
                updateVendorCategoryDbCommand.Prepare();
            }
            updateVendorCategoryDbCommand.Transaction = dbTransaction;
            updateVendorCategoryDbCommand.Parameters[0].Value = (object)vendorCategory.Content ?? DBNull.Value;
            updateVendorCategoryDbCommand.Parameters[1].Value = (object)vendorCategory.CreationTime ?? DBNull.Value;
            updateVendorCategoryDbCommand.Parameters[2].Value = (object)vendorCategory.CreationUserId ?? DBNull.Value;
            updateVendorCategoryDbCommand.Parameters[3].Value = vendorCategory.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateVendorCategoryDbCommand.CommandText}\r\n-- Content: {vendorCategory.Content}\r\n-- CreationTime: {vendorCategory.CreationTime}\r\n-- CreationUserId: {vendorCategory.CreationUserId}\r\n-- Id: {vendorCategory.Id}");
            updateVendorCategoryDbCommand.ExecuteNonQuery();
        }

        public void Delete(VendorCategory vendorCategory)
        {
            if (ConnectIfNecessary() || deleteVendorCategoryDbCommand == null)
            {
                deleteVendorCategoryDbCommand = dbConnection.CreateCommand();
                deleteVendorCategoryDbCommand.Transaction = dbTransaction;
                deleteVendorCategoryDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")} WHERE {Quote("id")} = @Id";
                var dp = deleteVendorCategoryDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteVendorCategoryDbCommand.Parameters.Add(dp);
                deleteVendorCategoryDbCommand.Prepare();
            }
            deleteVendorCategoryDbCommand.Transaction = dbTransaction;
            deleteVendorCategoryDbCommand.Parameters[0].Value = vendorCategory.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteVendorCategoryDbCommand.CommandText}\r\n-- Id: {vendorCategory.Id}");
            deleteVendorCategoryDbCommand.ExecuteNonQuery();
        }

        public void Insert(VendorDetail vendorDetail)
        {
            if (vendorDetail.Id == null) vendorDetail.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertVendorDetailDbCommand == null)
            {
                insertVendorDetailDbCommand = dbConnection.CreateCommand();
                insertVendorDetailDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertVendorDetailDbCommand.Parameters.Add(dp);
                dp = insertVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorDetailDbCommand.Parameters.Add(dp);
                dp = insertVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertVendorDetailDbCommand.Parameters.Add(dp);
                dp = insertVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorDetailDbCommand.Parameters.Add(dp);
                insertVendorDetailDbCommand.Transaction = dbTransaction;
                insertVendorDetailDbCommand.Prepare();
            }
            insertVendorDetailDbCommand.Transaction = dbTransaction;
            insertVendorDetailDbCommand.Parameters[0].Value = (object)vendorDetail.Id ?? DBNull.Value;
            insertVendorDetailDbCommand.Parameters[1].Value = (object)vendorDetail.Content ?? DBNull.Value;
            insertVendorDetailDbCommand.Parameters[2].Value = (object)vendorDetail.CreationTime ?? DBNull.Value;
            insertVendorDetailDbCommand.Parameters[3].Value = (object)vendorDetail.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertVendorDetailDbCommand.CommandText}\r\n-- Id: {vendorDetail.Id}\r\n-- Content: {vendorDetail.Content}\r\n-- CreationTime: {vendorDetail.CreationTime}\r\n-- CreationUserId: {vendorDetail.CreationUserId}");
            insertVendorDetailDbCommand.ExecuteNonQuery();
        }

        public void Update(VendorDetail vendorDetail)
        {
            if (ConnectIfNecessary() || updateVendorDetailDbCommand == null)
            {
                updateVendorDetailDbCommand = dbConnection.CreateCommand();
                updateVendorDetailDbCommand.Transaction = dbTransaction;
                updateVendorDetailDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorDetailDbCommand.Parameters.Add(dp);
                dp = updateVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateVendorDetailDbCommand.Parameters.Add(dp);
                dp = updateVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorDetailDbCommand.Parameters.Add(dp);
                dp = updateVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateVendorDetailDbCommand.Parameters.Add(dp);
                updateVendorDetailDbCommand.Prepare();
            }
            updateVendorDetailDbCommand.Transaction = dbTransaction;
            updateVendorDetailDbCommand.Parameters[0].Value = (object)vendorDetail.Content ?? DBNull.Value;
            updateVendorDetailDbCommand.Parameters[1].Value = (object)vendorDetail.CreationTime ?? DBNull.Value;
            updateVendorDetailDbCommand.Parameters[2].Value = (object)vendorDetail.CreationUserId ?? DBNull.Value;
            updateVendorDetailDbCommand.Parameters[3].Value = vendorDetail.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateVendorDetailDbCommand.CommandText}\r\n-- Content: {vendorDetail.Content}\r\n-- CreationTime: {vendorDetail.CreationTime}\r\n-- CreationUserId: {vendorDetail.CreationUserId}\r\n-- Id: {vendorDetail.Id}");
            updateVendorDetailDbCommand.ExecuteNonQuery();
        }

        public void Delete(VendorDetail vendorDetail)
        {
            if (ConnectIfNecessary() || deleteVendorDetailDbCommand == null)
            {
                deleteVendorDetailDbCommand = dbConnection.CreateCommand();
                deleteVendorDetailDbCommand.Transaction = dbTransaction;
                deleteVendorDetailDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")} WHERE {Quote("id")} = @Id";
                var dp = deleteVendorDetailDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteVendorDetailDbCommand.Parameters.Add(dp);
                deleteVendorDetailDbCommand.Prepare();
            }
            deleteVendorDetailDbCommand.Transaction = dbTransaction;
            deleteVendorDetailDbCommand.Parameters[0].Value = vendorDetail.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteVendorDetailDbCommand.CommandText}\r\n-- Id: {vendorDetail.Id}");
            deleteVendorDetailDbCommand.ExecuteNonQuery();
        }

        public void Insert(VendorType vendorType)
        {
            if (vendorType.Id == null) vendorType.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertVendorTypeDbCommand == null)
            {
                insertVendorTypeDbCommand = dbConnection.CreateCommand();
                insertVendorTypeDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertVendorTypeDbCommand.Parameters.Add(dp);
                dp = insertVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorTypeDbCommand.Parameters.Add(dp);
                dp = insertVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertVendorTypeDbCommand.Parameters.Add(dp);
                dp = insertVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertVendorTypeDbCommand.Parameters.Add(dp);
                insertVendorTypeDbCommand.Transaction = dbTransaction;
                insertVendorTypeDbCommand.Prepare();
            }
            insertVendorTypeDbCommand.Transaction = dbTransaction;
            insertVendorTypeDbCommand.Parameters[0].Value = (object)vendorType.Id ?? DBNull.Value;
            insertVendorTypeDbCommand.Parameters[1].Value = (object)vendorType.Content ?? DBNull.Value;
            insertVendorTypeDbCommand.Parameters[2].Value = (object)vendorType.CreationTime ?? DBNull.Value;
            insertVendorTypeDbCommand.Parameters[3].Value = (object)vendorType.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertVendorTypeDbCommand.CommandText}\r\n-- Id: {vendorType.Id}\r\n-- Content: {vendorType.Content}\r\n-- CreationTime: {vendorType.CreationTime}\r\n-- CreationUserId: {vendorType.CreationUserId}");
            insertVendorTypeDbCommand.ExecuteNonQuery();
        }

        public void Update(VendorType vendorType)
        {
            if (ConnectIfNecessary() || updateVendorTypeDbCommand == null)
            {
                updateVendorTypeDbCommand = dbConnection.CreateCommand();
                updateVendorTypeDbCommand.Transaction = dbTransaction;
                updateVendorTypeDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorTypeDbCommand.Parameters.Add(dp);
                dp = updateVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateVendorTypeDbCommand.Parameters.Add(dp);
                dp = updateVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateVendorTypeDbCommand.Parameters.Add(dp);
                dp = updateVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateVendorTypeDbCommand.Parameters.Add(dp);
                updateVendorTypeDbCommand.Prepare();
            }
            updateVendorTypeDbCommand.Transaction = dbTransaction;
            updateVendorTypeDbCommand.Parameters[0].Value = (object)vendorType.Content ?? DBNull.Value;
            updateVendorTypeDbCommand.Parameters[1].Value = (object)vendorType.CreationTime ?? DBNull.Value;
            updateVendorTypeDbCommand.Parameters[2].Value = (object)vendorType.CreationUserId ?? DBNull.Value;
            updateVendorTypeDbCommand.Parameters[3].Value = vendorType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateVendorTypeDbCommand.CommandText}\r\n-- Content: {vendorType.Content}\r\n-- CreationTime: {vendorType.CreationTime}\r\n-- CreationUserId: {vendorType.CreationUserId}\r\n-- Id: {vendorType.Id}");
            updateVendorTypeDbCommand.ExecuteNonQuery();
        }

        public void Delete(VendorType vendorType)
        {
            if (ConnectIfNecessary() || deleteVendorTypeDbCommand == null)
            {
                deleteVendorTypeDbCommand = dbConnection.CreateCommand();
                deleteVendorTypeDbCommand.Transaction = dbTransaction;
                deleteVendorTypeDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")} WHERE {Quote("id")} = @Id";
                var dp = deleteVendorTypeDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteVendorTypeDbCommand.Parameters.Add(dp);
                deleteVendorTypeDbCommand.Prepare();
            }
            deleteVendorTypeDbCommand.Transaction = dbTransaction;
            deleteVendorTypeDbCommand.Parameters[0].Value = vendorType.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteVendorTypeDbCommand.CommandText}\r\n-- Id: {vendorType.Id}");
            deleteVendorTypeDbCommand.ExecuteNonQuery();
        }

        public void Insert(Waive waive)
        {
            if (waive.Id == null) waive.Id = Guid.NewGuid();
            if (ConnectIfNecessary() || insertWaiveDbCommand == null)
            {
                insertWaiveDbCommand = dbConnection.CreateCommand();
                insertWaiveDbCommand.CommandText = $"INSERT INTO {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")} ({Quote("id")}, {Quote("jsonb")}, {Quote("creation_date")}, {Quote("created_by")}) VALUES (@Id, @Content{(IsPostgreSql ? "::jsonb" : "")}, @CreationTime, @CreationUserId)";
                var dp = insertWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                insertWaiveDbCommand.Parameters.Add(dp);
                dp = insertWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertWaiveDbCommand.Parameters.Add(dp);
                dp = insertWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                insertWaiveDbCommand.Parameters.Add(dp);
                dp = insertWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                insertWaiveDbCommand.Parameters.Add(dp);
                insertWaiveDbCommand.Transaction = dbTransaction;
                insertWaiveDbCommand.Prepare();
            }
            insertWaiveDbCommand.Transaction = dbTransaction;
            insertWaiveDbCommand.Parameters[0].Value = (object)waive.Id ?? DBNull.Value;
            insertWaiveDbCommand.Parameters[1].Value = (object)waive.Content ?? DBNull.Value;
            insertWaiveDbCommand.Parameters[2].Value = (object)waive.CreationTime ?? DBNull.Value;
            insertWaiveDbCommand.Parameters[3].Value = (object)waive.CreationUserId ?? DBNull.Value;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{insertWaiveDbCommand.CommandText}\r\n-- Id: {waive.Id}\r\n-- Content: {waive.Content}\r\n-- CreationTime: {waive.CreationTime}\r\n-- CreationUserId: {waive.CreationUserId}");
            insertWaiveDbCommand.ExecuteNonQuery();
        }

        public void Update(Waive waive)
        {
            if (ConnectIfNecessary() || updateWaiveDbCommand == null)
            {
                updateWaiveDbCommand = dbConnection.CreateCommand();
                updateWaiveDbCommand.Transaction = dbTransaction;
                updateWaiveDbCommand.CommandText = $"UPDATE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")} SET {Quote("jsonb")} = @Content{(IsPostgreSql ? "::jsonb" : "")}, {Quote("creation_date")} = @CreationTime, {Quote("created_by")} = @CreationUserId WHERE {Quote("id")} = @Id";
                var dp = updateWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@Content";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateWaiveDbCommand.Parameters.Add(dp);
                dp = updateWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@CreationTime";
                dp.DbType = IsMySql ? DbType.DateTime : DbType.DateTime2;
                if (!IsMySql) dp.Size = 8;
                updateWaiveDbCommand.Parameters.Add(dp);
                dp = updateWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@CreationUserId";
                dp.DbType = DbType.String;
                dp.Size = int.MaxValue;
                updateWaiveDbCommand.Parameters.Add(dp);
                dp = updateWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                updateWaiveDbCommand.Parameters.Add(dp);
                updateWaiveDbCommand.Prepare();
            }
            updateWaiveDbCommand.Transaction = dbTransaction;
            updateWaiveDbCommand.Parameters[0].Value = (object)waive.Content ?? DBNull.Value;
            updateWaiveDbCommand.Parameters[1].Value = (object)waive.CreationTime ?? DBNull.Value;
            updateWaiveDbCommand.Parameters[2].Value = (object)waive.CreationUserId ?? DBNull.Value;
            updateWaiveDbCommand.Parameters[3].Value = waive.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{updateWaiveDbCommand.CommandText}\r\n-- Content: {waive.Content}\r\n-- CreationTime: {waive.CreationTime}\r\n-- CreationUserId: {waive.CreationUserId}\r\n-- Id: {waive.Id}");
            updateWaiveDbCommand.ExecuteNonQuery();
        }

        public void Delete(Waive waive)
        {
            if (ConnectIfNecessary() || deleteWaiveDbCommand == null)
            {
                deleteWaiveDbCommand = dbConnection.CreateCommand();
                deleteWaiveDbCommand.Transaction = dbTransaction;
                deleteWaiveDbCommand.CommandText = $"DELETE FROM {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")} WHERE {Quote("id")} = @Id";
                var dp = deleteWaiveDbCommand.CreateParameter();
                dp.ParameterName = "@Id";
                dp.DbType = DbType.Guid;
                deleteWaiveDbCommand.Parameters.Add(dp);
                deleteWaiveDbCommand.Prepare();
            }
            deleteWaiveDbCommand.Transaction = dbTransaction;
            deleteWaiveDbCommand.Parameters[0].Value = waive.Id;
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{deleteWaiveDbCommand.CommandText}\r\n-- Id: {waive.Id}");
            deleteWaiveDbCommand.ExecuteNonQuery();
        }

        public void AddAccountsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.accounts (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_accounts_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_accounts PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_accounts (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_accounts PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.accounts (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_accounts PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAccountsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")}");

        public void AddAccountsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"accounts_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAccountsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_accounts")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.accounts')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("accounts_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")}")}");
        }

        public void TruncateAccounts() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")}");

        public void AddAccount2sTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.account (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_account_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_account PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_account (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_account PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.account (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_account PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAccount2sTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")}");

        public void AddAccount2sIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"account_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAccount2sIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_account")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.account')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("account_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")}")}");
        }

        public void TruncateAccount2s() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")}");

        public void AddAddressesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.address (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_address_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_address PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_address (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_address PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.address (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_address PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAddressesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")}");

        public void AddAddressesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"address_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAddressesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_address")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.address')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("address_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")}")}");
        }

        public void TruncateAddresses() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")}");

        public void AddAddressTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_users.addresstype (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_addresstype_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_addresstype PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_users_addresstype (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_addresstype PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_users.addresstype (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_addresstype PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAddressTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")}");

        public void AddAddressTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"addresstype_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAddressTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_users_addresstype")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_users.addresstype')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_users")}.{Quote("addresstype_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")}")}");
        }

        public void TruncateAddressTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")}");

        public void AddAdjustmentsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.adjustment (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_adjustment_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_adjustment PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_adjustment (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_adjustment PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.adjustment (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_adjustment PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAdjustmentsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")}");

        public void AddAdjustmentsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"adjustment_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAdjustmentsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_adjustment")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.adjustment')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("adjustment_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")}")}");
        }

        public void TruncateAdjustments() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")}");

        public void AddAgreementsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.agreement (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_agreement_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_agreement PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_agreement (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_agreement PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.agreement (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_agreement PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAgreementsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")}");

        public void AddAgreementsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"agreement_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAgreementsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_agreement")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.agreement')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("agreement_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")}")}");
        }

        public void TruncateAgreements() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")}");

        public void AddAlertsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.alert (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_alert_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_alert PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_alert (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_alert PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.alert (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_alert PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAlertsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")}");

        public void AddAlertsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"alert_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAlertsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_alert")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.alert')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("alert_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")}")}");
        }

        public void TruncateAlerts() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")}");

        public void AddAliasesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.alias (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_alias_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_alias PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_alias (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_alias PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.alias (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_alias PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveAliasesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")}");

        public void AddAliasesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"alias_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAliasesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_alias")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.alias')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("alias_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")}")}");
        }

        public void TruncateAliases() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")}");

        public void AddAlternativeTitleTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.alternative_title_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_alternative_title_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_alternative_title_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_alternative_title_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_alternative_title_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.alternative_title_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_alternative_title_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveAlternativeTitleTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")}");

        public void AddAlternativeTitleTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"alternative_title_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAlternativeTitleTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_alternative_title_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.alternative_title_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("alternative_title_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")}")}");
        }

        public void TruncateAlternativeTitleTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")}");

        public void AddAuditLoansTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.audit_loan (_id UNIQUEIDENTIFIER NOT NULL, orig_id UNIQUEIDENTIFIER NOT NULL, operation NVARCHAR(1) NOT NULL, jsonb NVARCHAR(MAX), CONSTRAINT CK_audit_loan_jsonb CHECK (ISJSON(jsonb)=1), created_date DATETIME2 NOT NULL, CONSTRAINT PK_audit_loan PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_audit_loan (_id VARCHAR(36) NOT NULL, orig_id VARCHAR(36) NOT NULL, operation VARCHAR(1) NOT NULL, jsonb JSON, created_date DATETIME NOT NULL, CONSTRAINT PK_audit_loan PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.audit_loan (_id UUID NOT NULL, orig_id UUID NOT NULL, operation VARCHAR(1) NOT NULL, jsonb JSONB, created_date TIMESTAMP NOT NULL, CONSTRAINT PK_audit_loan PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveAuditLoansTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")}");

        public void AddAuditLoansIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"audit_loan_" : "")}created_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")}(created_date DESC)", 60 * 10);
        }

        public void RemoveAuditLoansIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_audit_loan")} WHERE key_name LIKE 'created_date'" : "SELECT 1 FROM sys.indexes WHERE name='created_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.audit_loan')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("audit_loan_created_date")}" : $"created_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")}")}");
        }

        public void TruncateAuditLoans() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")}");

        public void AddAuthAttemptsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_attempts (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_auth_attempts_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_auth_attempts PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_login_auth_attempts (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_auth_attempts PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_attempts (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_auth_attempts PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveAuthAttemptsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")}");

        public void AddAuthAttemptsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"auth_attempts_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAuthAttemptsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_login_auth_attempts")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_login.auth_attempts')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_login")}.{Quote("auth_attempts_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")}")}");
        }

        public void TruncateAuthAttempts() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")}");

        public void AddAuthCredentialsHistoriesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_credentials_history (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_auth_credentials_history_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_auth_credentials_history PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_login_auth_credentials_history (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_auth_credentials_history PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_credentials_history (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_auth_credentials_history PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveAuthCredentialsHistoriesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")}");

        public void AddAuthCredentialsHistoriesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"auth_credentials_history_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAuthCredentialsHistoriesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_login_auth_credentials_history")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_login.auth_credentials_history')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_login")}.{Quote("auth_credentials_history_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")}")}");
        }

        public void TruncateAuthCredentialsHistories() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")}");

        public void AddAuthPasswordActionsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_password_action (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_auth_password_action_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_auth_password_action PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_login_auth_password_action (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_auth_password_action PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_password_action (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_auth_password_action PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveAuthPasswordActionsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")}");

        public void AddAuthPasswordActionsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"auth_password_action_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveAuthPasswordActionsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_login_auth_password_action")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_login.auth_password_action')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_login")}.{Quote("auth_password_action_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")}")}");
        }

        public void TruncateAuthPasswordActions() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")}");

        public void AddBlocksTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.manualblocks (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_manualblocks_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_manualblocks PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_manualblocks (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_manualblocks PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.manualblocks (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_manualblocks PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveBlocksTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")}");

        public void AddBlocksIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"manualblocks_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveBlocksIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_manualblocks")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.manualblocks')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("manualblocks_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")}")}");
        }

        public void TruncateBlocks() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")}");

        public void AddBudgetsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage_budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2 FOREIGN KEY(fund_id) REFERENCES diku_mod_finance_storage.fund(id); ALTER TABLE diku_mod_finance_storage_budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1 FOREIGN KEY(fiscal_year_id) REFERENCES diku_mod_finance_storage.fiscal_year(id)", 60 * 5);

        public void RemoveBudgetsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1");
        }

        public void AddBudgetsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage.fund_distribution ADD CONSTRAINT FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id); ALTER TABLE diku_mod_finance_storage.transaction ADD CONSTRAINT FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id)");

        public void RemoveBudgetsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.transaction DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35");
        }

        public void AddBudgetsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution ADD CONSTRAINT FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id); ALTER TABLE diku_mod_finance_storage.transaction ADD CONSTRAINT FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id)");

        public void RemoveBudgetsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.transaction DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35");
        }

        public void AddBudgetsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.budget (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_budget_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), fund_id UNIQUEIDENTIFIER, fiscal_year_id UNIQUEIDENTIFIER, CONSTRAINT PK_budget PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage_budget (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, fund_id VARCHAR(36), fiscal_year_id VARCHAR(36), CONSTRAINT PK_budget PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.budget (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, fund_id UUID, fiscal_year_id UUID, CONSTRAINT PK_budget PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveBudgetsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}");

        public void AddBudgetsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"budget_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2 ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}(fund_id)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1 ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}(fiscal_year_id)", 60 * 10);
        }

        public void RemoveBudgetsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_finance_storage_budget")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_finance_storage.budget')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_finance_storage")}.{Quote("budget_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2' AND object_id = OBJECT_ID('budget')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2" : $"FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2 ON {(IsSqlServer ? "diku_mod_finance_storage." : "")}budget")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1' AND object_id = OBJECT_ID('budget')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1" : $"FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1 ON {(IsSqlServer ? "diku_mod_finance_storage." : "")}budget")}");
        }

        public void TruncateBudgets(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveBudgetsDependentConstraints(); else RemoveBudgetsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddBudgetsDependentConstraints(); else AddBudgetsReferencingConstraints(); else EnableConstraints();
        }

        public void AddCallNumberTypesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6 FOREIGN KEY(callnumbertypeid) REFERENCES diku_mod_inventory_storage.call_number_type(_id)");

        public void RemoveCallNumberTypesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6");
        }

        public void AddCallNumberTypesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6 FOREIGN KEY(callnumbertypeid) REFERENCES diku_mod_inventory_storage.call_number_type(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveCallNumberTypesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddCallNumberTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.call_number_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_call_number_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_call_number_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_call_number_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_call_number_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.call_number_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_call_number_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveCallNumberTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")}");

        public void AddCallNumberTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"call_number_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveCallNumberTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_call_number_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.call_number_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("call_number_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")}")}");
        }

        public void TruncateCallNumberTypes(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveCallNumberTypesDependentConstraints(); else RemoveCallNumberTypesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddCallNumberTypesDependentConstraints(); else AddCallNumberTypesReferencingConstraints(); else EnableConstraints();
        }

        public void AddCampusesConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_loccampus ADD CONSTRAINT FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30 FOREIGN KEY(institutionid) REFERENCES diku_mod_inventory_storage.locinstitution(_id)", 60 * 5);

        public void RemoveCampusesConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loccampus DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30");
        }

        public void AddCampusesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.loclibrary ADD CONSTRAINT FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id)");

        public void RemoveCampusesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loclibrary DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27");
        }

        public void AddCampusesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loclibrary ADD CONSTRAINT FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 FOREIGN KEY(libraryid) REFERENCES diku_mod_inventory_storage.loclibrary(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id)");

        public void RemoveCampusesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loclibrary DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23");
        }

        public void AddCampusesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.loccampus (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_loccampus_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), institutionid UNIQUEIDENTIFIER, CONSTRAINT PK_loccampus PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_loccampus (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, institutionid VARCHAR(36), CONSTRAINT PK_loccampus PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.loccampus (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, institutionid UUID, CONSTRAINT PK_loccampus PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveCampusesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}");

        public void AddCampusesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"loccampus_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}(institutionid)", 60 * 10);
        }

        public void RemoveCampusesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_loccampus")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.loccampus')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("loccampus_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30' AND object_id = OBJECT_ID('loccampus')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30" : $"FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}loccampus")}");
        }

        public void TruncateCampuses(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveCampusesDependentConstraints(); else RemoveCampusesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddCampusesDependentConstraints(); else AddCampusesReferencingConstraints(); else EnableConstraints();
        }

        public void AddCancellationReasonsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_circulation_storage.request ADD CONSTRAINT FK_diku_mod_circulation_storage.request_diku_mod_circulation32 FOREIGN KEY(cancellationreasonid) REFERENCES diku_mod_circulation_storage.cancellation_reason(_id)");

        public void RemoveCancellationReasonsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.request_diku_mod_circulation32'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.request_diku_mod_circulation32'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.request DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.request_diku_mod_circulation32");
        }

        public void AddCancellationReasonsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.request ADD CONSTRAINT FK_diku_mod_circulation_storage.request_diku_mod_circulation32 FOREIGN KEY(cancellationreasonid) REFERENCES diku_mod_circulation_storage.cancellation_reason(_id)");

        public void RemoveCancellationReasonsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.request_diku_mod_circulation32'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.request_diku_mod_circulation32'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.request DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.request_diku_mod_circulation32");
        }

        public void AddCancellationReasonsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.cancellation_reason (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_cancellation_reason_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_cancellation_reason PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_cancellation_reason (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_cancellation_reason PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.cancellation_reason (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_cancellation_reason PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveCancellationReasonsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")}");

        public void AddCancellationReasonsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"cancellation_reason_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveCancellationReasonsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_cancellation_reason")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.cancellation_reason')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("cancellation_reason_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")}")}");
        }

        public void TruncateCancellationReasons(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveCancellationReasonsDependentConstraints(); else RemoveCancellationReasonsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddCancellationReasonsDependentConstraints(); else AddCancellationReasonsReferencingConstraints(); else EnableConstraints();
        }

        public void AddCategoriesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.category (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_category_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_category PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_category (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_category PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.category (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_category PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveCategoriesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")}");

        public void AddCategoriesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"category_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveCategoriesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_category")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.category')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("category_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")}")}");
        }

        public void TruncateCategories() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")}");

        public void AddCirculationRulesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.circulation_rules (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_circulation_rules_jsonb CHECK (ISJSON(jsonb)=1), lock BIT, CONSTRAINT PK_circulation_rules PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_circulation_rules (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, lock BOOLEAN, CONSTRAINT PK_circulation_rules PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.circulation_rules (_id UUID NOT NULL, jsonb JSONB NOT NULL, lock BOOLEAN, CONSTRAINT PK_circulation_rules PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveCirculationRulesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}circulation_rules")}");

        public void TruncateCirculationRules() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}circulation_rules")}");

        public void AddClaimsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.claim (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_claim_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_claim PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_claim (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_claim PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.claim (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_claim PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveClaimsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")}");

        public void AddClaimsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"claim_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveClaimsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_claim")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.claim')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("claim_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")}")}");
        }

        public void TruncateClaims() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")}");

        public void AddClassificationTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.classification_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_classification_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_classification_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_classification_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_classification_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.classification_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_classification_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveClassificationTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")}");

        public void AddClassificationTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"classification_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveClassificationTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_classification_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.classification_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("classification_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")}")}");
        }

        public void TruncateClassificationTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")}");

        public void AddCommentsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.comments (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_comments_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_comments PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_comments (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_comments PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.comments (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_comments PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveCommentsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")}");

        public void AddCommentsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"comments_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveCommentsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_comments")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.comments')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("comments_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")}")}");
        }

        public void TruncateComments() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")}");

        public void AddContactsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.contact (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_contact_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_contact PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_contact (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_contact PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.contact (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_contact PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveContactsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")}");

        public void AddContactsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"contact_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveContactsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_contact")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.contact')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("contact_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")}")}");
        }

        public void TruncateContacts() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")}");

        public void AddContactCategoriesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.contact_category (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_contact_category_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_contact_category PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_contact_category (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_contact_category PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.contact_category (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_contact_category PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveContactCategoriesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")}");

        public void AddContactCategoriesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"contact_category_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveContactCategoriesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_contact_category")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.contact_category')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("contact_category_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")}")}");
        }

        public void TruncateContactCategories() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")}");

        public void AddContributorNameTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.contributor_name_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_contributor_name_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_contributor_name_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_contributor_name_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_contributor_name_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.contributor_name_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_contributor_name_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveContributorNameTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")}");

        public void AddContributorNameTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"contributor_name_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveContributorNameTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_contributor_name_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.contributor_name_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("contributor_name_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")}")}");
        }

        public void TruncateContributorNameTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")}");

        public void AddContributorTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.contributor_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_contributor_type_jsonb CHECK (ISJSON(jsonb)=1), CONSTRAINT PK_contributor_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_contributor_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, CONSTRAINT PK_contributor_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.contributor_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, CONSTRAINT PK_contributor_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveContributorTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_type")}");

        public void TruncateContributorTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_type")}");

        public void AddCostsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.cost (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_cost_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_cost PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_cost (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_cost PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.cost (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_cost PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveCostsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")}");

        public void AddCostsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"cost_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveCostsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_cost")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.cost')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("cost_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")}")}");
        }

        public void TruncateCosts() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")}");

        public void AddDetailsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.details (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_details_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_details PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_details (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_details PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.details (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_details PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveDetailsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")}");

        public void AddDetailsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"details_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveDetailsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_details")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.details')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("details_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")}")}");
        }

        public void TruncateDetails() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")}");

        public void AddElectronicAccessRelationshipsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.electronic_access_relationship (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_electronic_access_relationship_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_electronic_access_relationship PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_electronic_access_relationship (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_electronic_access_relationship PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.electronic_access_relationship (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_electronic_access_relationship PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveElectronicAccessRelationshipsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")}");

        public void AddElectronicAccessRelationshipsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"electronic_access_relationship_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveElectronicAccessRelationshipsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_electronic_access_relationship")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.electronic_access_relationship')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("electronic_access_relationship_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")}")}");
        }

        public void TruncateElectronicAccessRelationships() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")}");

        public void AddEmailsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.email (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_email_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_email PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_email (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_email PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.email (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_email PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveEmailsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")}");

        public void AddEmailsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"email_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveEmailsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_email")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.email')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("email_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")}")}");
        }

        public void TruncateEmails() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")}");

        public void AddEresourcesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.eresource (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_eresource_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_eresource PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_eresource (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_eresource PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.eresource (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_eresource PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveEresourcesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")}");

        public void AddEresourcesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"eresource_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveEresourcesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_eresource")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.eresource')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("eresource_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")}")}");
        }

        public void TruncateEresources() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")}");

        public void AddEventLogsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_login.event_logs (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_event_logs_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_event_logs PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_login_event_logs (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_event_logs PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_login.event_logs (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_event_logs PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveEventLogsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")}");

        public void AddEventLogsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"event_logs_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveEventLogsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_login_event_logs")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_login.event_logs')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_login")}.{Quote("event_logs_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")}")}");
        }

        public void TruncateEventLogs() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")}");

        public void AddFeesConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_feesfines_feefines ADD CONSTRAINT FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3 FOREIGN KEY(ownerid) REFERENCES diku_mod_feesfines.owners(id)", 60 * 5);

        public void RemoveFeesConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_feesfines.feefines DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3");
        }

        public void AddFeesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.feefines (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_feefines_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), ownerid UNIQUEIDENTIFIER, CONSTRAINT PK_feefines PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_feefines (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, ownerid VARCHAR(36), CONSTRAINT PK_feefines PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.feefines (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, ownerid UUID, CONSTRAINT PK_feefines PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveFeesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}");

        public void AddFeesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"feefines_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3 ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}(ownerid)", 60 * 10);
        }

        public void RemoveFeesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_feefines")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.feefines')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("feefines_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3' AND object_id = OBJECT_ID('feefines')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3" : $"FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3 ON {(IsSqlServer ? "diku_mod_feesfines." : "")}feefines")}");
        }

        public void TruncateFees() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}");

        public void AddFeeActionsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.feefineactions (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_feefineactions_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_feefineactions PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_feefineactions (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_feefineactions PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.feefineactions (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_feefineactions PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveFeeActionsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")}");

        public void AddFeeActionsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"feefineactions_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveFeeActionsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_feefineactions")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.feefineactions')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("feefineactions_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")}")}");
        }

        public void TruncateFeeActions() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")}");

        public void AddFiscalYearsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage.budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1 FOREIGN KEY(fiscal_year_id) REFERENCES diku_mod_finance_storage.fiscal_year(id)");

        public void RemoveFiscalYearsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1");
        }

        public void AddFiscalYearsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1 FOREIGN KEY(fiscal_year_id) REFERENCES diku_mod_finance_storage.fiscal_year(id); ALTER TABLE diku_mod_finance_storage.fund_distribution ADD CONSTRAINT FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id); ALTER TABLE diku_mod_finance_storage.transaction ADD CONSTRAINT FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id)");

        public void RemoveFiscalYearsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.1");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.transaction DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35");
        }

        public void AddFiscalYearsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.fiscal_year (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_fiscal_year_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_fiscal_year PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage_fiscal_year (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_fiscal_year PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.fiscal_year (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_fiscal_year PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveFiscalYearsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")}");

        public void AddFiscalYearsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"fiscal_year_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveFiscalYearsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_finance_storage_fiscal_year")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_finance_storage.fiscal_year')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_finance_storage")}.{Quote("fiscal_year_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")}")}");
        }

        public void TruncateFiscalYears(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveFiscalYearsDependentConstraints(); else RemoveFiscalYearsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddFiscalYearsDependentConstraints(); else AddFiscalYearsReferencingConstraints(); else EnableConstraints();
        }

        public void AddFixedDueDateSchedulesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_circulation_storage.loan_policy ADD CONSTRAINT FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25 FOREIGN KEY(loanspolicy_fixedduedatescheduleid) REFERENCES diku_mod_circulation_storage.fixed_due_date_schedule(_id); ALTER TABLE diku_mod_circulation_storage.loan_policy ADD CONSTRAINT FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26 FOREIGN KEY(renewalspolicy_alternatefixedduedatescheduleid) REFERENCES diku_mod_circulation_storage.fixed_due_date_schedule(_id)");

        public void RemoveFixedDueDateSchedulesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26");
        }

        public void AddFixedDueDateSchedulesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy ADD CONSTRAINT FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25 FOREIGN KEY(loanspolicy_fixedduedatescheduleid) REFERENCES diku_mod_circulation_storage.fixed_due_date_schedule(_id); ALTER TABLE diku_mod_circulation_storage.loan_policy ADD CONSTRAINT FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26 FOREIGN KEY(renewalspolicy_alternatefixedduedatescheduleid) REFERENCES diku_mod_circulation_storage.fixed_due_date_schedule(_id)");

        public void RemoveFixedDueDateSchedulesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26");
        }

        public void AddFixedDueDateSchedulesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.fixed_due_date_schedule (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_fixed_due_date_schedule_jsonb CHECK (ISJSON(jsonb)=1), CONSTRAINT PK_fixed_due_date_schedule PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_fixed_due_date_schedule (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, CONSTRAINT PK_fixed_due_date_schedule PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.fixed_due_date_schedule (_id UUID NOT NULL, jsonb JSONB NOT NULL, CONSTRAINT PK_fixed_due_date_schedule PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveFixedDueDateSchedulesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}fixed_due_date_schedule")}");

        public void TruncateFixedDueDateSchedules(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveFixedDueDateSchedulesDependentConstraints(); else RemoveFixedDueDateSchedulesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}fixed_due_date_schedule")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddFixedDueDateSchedulesDependentConstraints(); else AddFixedDueDateSchedulesReferencingConstraints(); else EnableConstraints();
        }

        public void AddFundsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage_fund ADD CONSTRAINT FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4 FOREIGN KEY(ledger_id) REFERENCES diku_mod_finance_storage.ledger(id)", 60 * 5);

        public void RemoveFundsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4");
        }

        public void AddFundsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage.budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2 FOREIGN KEY(fund_id) REFERENCES diku_mod_finance_storage.fund(id)");

        public void RemoveFundsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2");
        }

        public void AddFundsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2 FOREIGN KEY(fund_id) REFERENCES diku_mod_finance_storage.fund(id); ALTER TABLE diku_mod_finance_storage.fund_distribution ADD CONSTRAINT FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id); ALTER TABLE diku_mod_finance_storage.transaction ADD CONSTRAINT FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id)");

        public void RemoveFundsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.transaction DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35");
        }

        public void AddFundsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.fund (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_fund_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), ledger_id UNIQUEIDENTIFIER, CONSTRAINT PK_fund PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage_fund (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, ledger_id VARCHAR(36), CONSTRAINT PK_fund PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.fund (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, ledger_id UUID, CONSTRAINT PK_fund PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveFundsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}");

        public void AddFundsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"fund_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4 ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}(ledger_id)", 60 * 10);
        }

        public void RemoveFundsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_finance_storage_fund")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_finance_storage.fund')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_finance_storage")}.{Quote("fund_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4' AND object_id = OBJECT_ID('fund')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4" : $"FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4 ON {(IsSqlServer ? "diku_mod_finance_storage." : "")}fund")}");
        }

        public void TruncateFunds(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveFundsDependentConstraints(); else RemoveFundsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddFundsDependentConstraints(); else AddFundsReferencingConstraints(); else EnableConstraints();
        }

        public void AddFundDistributionsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage_fund_distribution ADD CONSTRAINT FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id)", 60 * 5);

        public void RemoveFundDistributionsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5");
        }

        public void AddFundDistributionsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.fund_distribution (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_fund_distribution_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), budget_id UNIQUEIDENTIFIER, CONSTRAINT PK_fund_distribution PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage_fund_distribution (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, budget_id VARCHAR(36), CONSTRAINT PK_fund_distribution PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.fund_distribution (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, budget_id UUID, CONSTRAINT PK_fund_distribution PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveFundDistributionsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}");

        public void AddFundDistributionsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"fund_distribution_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}(budget_id)", 60 * 10);
        }

        public void RemoveFundDistributionsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_finance_storage_fund_distribution")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_finance_storage.fund_distribution')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_finance_storage")}.{Quote("fund_distribution_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5' AND object_id = OBJECT_ID('fund_distribution')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5" : $"FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 ON {(IsSqlServer ? "diku_mod_finance_storage." : "")}fund_distribution")}");
        }

        public void TruncateFundDistributions() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}");

        public void AddFundDistribution2sTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.fund_distribution (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_fund_distribution_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_fund_distribution PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_fund_distribution (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_fund_distribution PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.fund_distribution (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_fund_distribution PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveFundDistribution2sTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")}");

        public void AddFundDistribution2sIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"fund_distribution_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveFundDistribution2sIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_fund_distribution")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.fund_distribution')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("fund_distribution_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")}")}");
        }

        public void TruncateFundDistribution2s() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")}");

        public void AddGroupsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_users.groups (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_groups_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_groups PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_users_groups (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_groups PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_users.groups (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_groups PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveGroupsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")}");

        public void AddGroupsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"groups_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveGroupsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_users_groups")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_users.groups')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_users")}.{Quote("groups_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")}")}");
        }

        public void TruncateGroups() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")}");

        public void AddHoldingsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 FOREIGN KEY(instanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage_holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage_holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage_holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7 FOREIGN KEY(holdingstypeid) REFERENCES diku_mod_inventory_storage.holdings_type(_id); ALTER TABLE diku_mod_inventory_storage_holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6 FOREIGN KEY(callnumbertypeid) REFERENCES diku_mod_inventory_storage.call_number_type(_id); ALTER TABLE diku_mod_inventory_storage_holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8 FOREIGN KEY(illpolicyid) REFERENCES diku_mod_inventory_storage.ill_policy(_id)", 60 * 5);

        public void RemoveHoldingsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8");
        }

        public void AddHoldingsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveHoldingsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddHoldingsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveHoldingsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddHoldingsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.holdings_record (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_holdings_record_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), instanceid UNIQUEIDENTIFIER, permanentlocationid UNIQUEIDENTIFIER, temporarylocationid UNIQUEIDENTIFIER, holdingstypeid UNIQUEIDENTIFIER, callnumbertypeid UNIQUEIDENTIFIER, illpolicyid UNIQUEIDENTIFIER, CONSTRAINT PK_holdings_record PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_holdings_record (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, instanceid VARCHAR(36), permanentlocationid VARCHAR(36), temporarylocationid VARCHAR(36), holdingstypeid VARCHAR(36), callnumbertypeid VARCHAR(36), illpolicyid VARCHAR(36), CONSTRAINT PK_holdings_record PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.holdings_record (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, instanceid UUID, permanentlocationid UUID, temporarylocationid UUID, holdingstypeid UUID, callnumbertypeid UUID, illpolicyid UUID, CONSTRAINT PK_holdings_record PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveHoldingsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}");

        public void AddHoldingsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"holdings_record_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(instanceid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(permanentlocationid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(temporarylocationid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(holdingstypeid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(callnumbertypeid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}(illpolicyid)", 60 * 10);
        }

        public void RemoveHoldingsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_holdings_record")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.holdings_record')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("holdings_record_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9' AND object_id = OBJECT_ID('holdings_record')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9" : $"FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}holdings_record")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10' AND object_id = OBJECT_ID('holdings_record')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10" : $"FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}holdings_record")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11' AND object_id = OBJECT_ID('holdings_record')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11" : $"FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}holdings_record")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7' AND object_id = OBJECT_ID('holdings_record')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7" : $"FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}holdings_record")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6' AND object_id = OBJECT_ID('holdings_record')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6" : $"FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven6 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}holdings_record")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8' AND object_id = OBJECT_ID('holdings_record')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8" : $"FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}holdings_record")}");
        }

        public void TruncateHoldings(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveHoldingsDependentConstraints(); else RemoveHoldingsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddHoldingsDependentConstraints(); else AddHoldingsReferencingConstraints(); else EnableConstraints();
        }

        public void AddHoldingNoteTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.holdings_note_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_holdings_note_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_holdings_note_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_holdings_note_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_holdings_note_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.holdings_note_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_holdings_note_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveHoldingNoteTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")}");

        public void AddHoldingNoteTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"holdings_note_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveHoldingNoteTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_holdings_note_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.holdings_note_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("holdings_note_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")}")}");
        }

        public void TruncateHoldingNoteTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")}");

        public void AddHoldingTypesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7 FOREIGN KEY(holdingstypeid) REFERENCES diku_mod_inventory_storage.holdings_type(_id)");

        public void RemoveHoldingTypesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7");
        }

        public void AddHoldingTypesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7 FOREIGN KEY(holdingstypeid) REFERENCES diku_mod_inventory_storage.holdings_type(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveHoldingTypesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven7");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddHoldingTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.holdings_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_holdings_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_holdings_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_holdings_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_holdings_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.holdings_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_holdings_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveHoldingTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")}");

        public void AddHoldingTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"holdings_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveHoldingTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_holdings_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.holdings_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("holdings_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")}")}");
        }

        public void TruncateHoldingTypes(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveHoldingTypesDependentConstraints(); else RemoveHoldingTypesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddHoldingTypesDependentConstraints(); else AddHoldingTypesReferencingConstraints(); else EnableConstraints();
        }

        public void AddIdTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.identifier_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_identifier_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_identifier_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_identifier_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_identifier_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.identifier_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_identifier_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveIdTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")}");

        public void AddIdTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"identifier_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveIdTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_identifier_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.identifier_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("identifier_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")}")}");
        }

        public void TruncateIdTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")}");

        public void AddIllPoliciesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8 FOREIGN KEY(illpolicyid) REFERENCES diku_mod_inventory_storage.ill_policy(_id)");

        public void RemoveIllPoliciesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8");
        }

        public void AddIllPoliciesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8 FOREIGN KEY(illpolicyid) REFERENCES diku_mod_inventory_storage.ill_policy(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveIllPoliciesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven8");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddIllPoliciesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.ill_policy (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_ill_policy_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_ill_policy PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_ill_policy (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_ill_policy PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.ill_policy (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_ill_policy PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveIllPoliciesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")}");

        public void AddIllPoliciesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"ill_policy_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveIllPoliciesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_ill_policy")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.ill_policy')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("ill_policy_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")}")}");
        }

        public void TruncateIllPolicies(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveIllPoliciesDependentConstraints(); else RemoveIllPoliciesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddIllPoliciesDependentConstraints(); else AddIllPoliciesReferencingConstraints(); else EnableConstraints();
        }

        public void AddInstancesConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_instance ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12 FOREIGN KEY(instancestatusid) REFERENCES diku_mod_inventory_storage.instance_status(_id); ALTER TABLE diku_mod_inventory_storage_instance ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13 FOREIGN KEY(modeofissuanceid) REFERENCES diku_mod_inventory_storage.mode_of_issuance(_id)", 60 * 5);

        public void RemoveInstancesConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13");
        }

        public void AddInstancesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 FOREIGN KEY(instanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 FOREIGN KEY(subinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 FOREIGN KEY(superinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_source_marc ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 FOREIGN KEY(_id) REFERENCES diku_mod_inventory_storage.instance(_id)");

        public void RemoveInstancesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod15");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod16");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_source_marc DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17");
        }

        public void AddInstancesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 FOREIGN KEY(instanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 FOREIGN KEY(subinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 FOREIGN KEY(superinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_source_marc ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 FOREIGN KEY(_id) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveInstancesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod15");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod16");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_source_marc DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddInstancesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), instancestatusid UNIQUEIDENTIFIER, modeofissuanceid UNIQUEIDENTIFIER, CONSTRAINT PK_instance PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, instancestatusid VARCHAR(36), modeofissuanceid VARCHAR(36), CONSTRAINT PK_instance PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, instancestatusid UUID, modeofissuanceid UUID, CONSTRAINT PK_instance PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstancesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}");

        public void AddInstancesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"instance_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}(instancestatusid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}(modeofissuanceid)", 60 * 10);
        }

        public void RemoveInstancesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_instance")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.instance')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("instance_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12' AND object_id = OBJECT_ID('instance')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12" : $"FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}instance")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13' AND object_id = OBJECT_ID('instance')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13" : $"FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}instance")}");
        }

        public void TruncateInstances(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveInstancesDependentConstraints(); else RemoveInstancesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddInstancesDependentConstraints(); else AddInstancesReferencingConstraints(); else EnableConstraints();
        }

        public void AddInstanceFormatsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_format (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_format_jsonb CHECK (ISJSON(jsonb)=1), CONSTRAINT PK_instance_format PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance_format (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, CONSTRAINT PK_instance_format PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_format (_id UUID NOT NULL, jsonb JSONB NOT NULL, CONSTRAINT PK_instance_format PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstanceFormatsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_format")}");

        public void TruncateInstanceFormats() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_format")}");

        public void AddInstanceRelationshipsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 FOREIGN KEY(superinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage_instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 FOREIGN KEY(subinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage_instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod14 FOREIGN KEY(instancerelationshiptypeid) REFERENCES diku_mod_inventory_storage.instance_relationship_type(_id)", 60 * 5);

        public void RemoveInstanceRelationshipsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod16");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod15");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod14'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod14'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod14");
        }

        public void AddInstanceRelationshipsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_relationship (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_relationship_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), superinstanceid UNIQUEIDENTIFIER, subinstanceid UNIQUEIDENTIFIER, instancerelationshiptypeid UNIQUEIDENTIFIER, CONSTRAINT PK_instance_relationship PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance_relationship (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, superinstanceid VARCHAR(36), subinstanceid VARCHAR(36), instancerelationshiptypeid VARCHAR(36), CONSTRAINT PK_instance_relationship PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_relationship (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, superinstanceid UUID, subinstanceid UUID, instancerelationshiptypeid UUID, CONSTRAINT PK_instance_relationship PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstanceRelationshipsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}");

        public void AddInstanceRelationshipsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"instance_relationship_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}(superinstanceid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}(subinstanceid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.instance_relationship_diku_mod14 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}(instancerelationshiptypeid)", 60 * 10);
        }

        public void RemoveInstanceRelationshipsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_instance_relationship")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.instance_relationship')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("instance_relationship_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod16' AND object_id = OBJECT_ID('instance_relationship')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.instance_relationship_diku_mod16" : $"FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}instance_relationship")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod15' AND object_id = OBJECT_ID('instance_relationship')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.instance_relationship_diku_mod15" : $"FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}instance_relationship")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod14' AND object_id = OBJECT_ID('instance_relationship')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.instance_relationship_diku_mod14" : $"FK_diku_mod_inventory_storage.instance_relationship_diku_mod14 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}instance_relationship")}");
        }

        public void TruncateInstanceRelationships() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}");

        public void AddInstanceRelationshipTypesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod14 FOREIGN KEY(instancerelationshiptypeid) REFERENCES diku_mod_inventory_storage.instance_relationship_type(_id)");

        public void RemoveInstanceRelationshipTypesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod14'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod14'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod14");
        }

        public void AddInstanceRelationshipTypesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod14 FOREIGN KEY(instancerelationshiptypeid) REFERENCES diku_mod_inventory_storage.instance_relationship_type(_id)");

        public void RemoveInstanceRelationshipTypesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod14'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod14'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod14");
        }

        public void AddInstanceRelationshipTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_relationship_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_relationship_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_instance_relationship_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance_relationship_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_instance_relationship_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_relationship_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_instance_relationship_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstanceRelationshipTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")}");

        public void AddInstanceRelationshipTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"instance_relationship_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveInstanceRelationshipTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_instance_relationship_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.instance_relationship_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("instance_relationship_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")}")}");
        }

        public void TruncateInstanceRelationshipTypes(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveInstanceRelationshipTypesDependentConstraints(); else RemoveInstanceRelationshipTypesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddInstanceRelationshipTypesDependentConstraints(); else AddInstanceRelationshipTypesReferencingConstraints(); else EnableConstraints();
        }

        public void AddInstanceSourceMarcsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_instance_source_marc ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 FOREIGN KEY(_id) REFERENCES diku_mod_inventory_storage.instance(_id)", 60 * 5);

        public void RemoveInstanceSourceMarcsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_source_marc DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17");
        }

        public void AddInstanceSourceMarcsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_source_marc (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_source_marc_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_instance_source_marc PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance_source_marc (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_instance_source_marc PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_source_marc (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_instance_source_marc PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstanceSourceMarcsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}");

        public void AddInstanceSourceMarcsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"instance_source_marc_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}(_id)", 60 * 10);
        }

        public void RemoveInstanceSourceMarcsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_instance_source_marc")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.instance_source_marc')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("instance_source_marc_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17' AND object_id = OBJECT_ID('instance_source_marc')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17" : $"FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}instance_source_marc")}");
        }

        public void TruncateInstanceSourceMarcs() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}");

        public void AddInstanceStatusesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.instance ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12 FOREIGN KEY(instancestatusid) REFERENCES diku_mod_inventory_storage.instance_status(_id)");

        public void RemoveInstanceStatusesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12");
        }

        public void AddInstanceStatusesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12 FOREIGN KEY(instancestatusid) REFERENCES diku_mod_inventory_storage.instance_status(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 FOREIGN KEY(instanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 FOREIGN KEY(subinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 FOREIGN KEY(superinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_source_marc ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 FOREIGN KEY(_id) REFERENCES diku_mod_inventory_storage.instance(_id)");

        public void RemoveInstanceStatusesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st12");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod15");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod16");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_source_marc DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17");
        }

        public void AddInstanceStatusesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_status (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_status_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_instance_status PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance_status (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_instance_status PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_status (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_instance_status PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstanceStatusesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")}");

        public void AddInstanceStatusesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"instance_status_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveInstanceStatusesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_instance_status")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.instance_status')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("instance_status_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")}")}");
        }

        public void TruncateInstanceStatuses(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveInstanceStatusesDependentConstraints(); else RemoveInstanceStatusesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddInstanceStatusesDependentConstraints(); else AddInstanceStatusesReferencingConstraints(); else EnableConstraints();
        }

        public void AddInstanceTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_instance_type_jsonb CHECK (ISJSON(jsonb)=1), CONSTRAINT PK_instance_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_instance_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, CONSTRAINT PK_instance_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.instance_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, CONSTRAINT PK_instance_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstanceTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_type")}");

        public void TruncateInstanceTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_type")}");

        public void AddInstitutionsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.loccampus ADD CONSTRAINT FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30 FOREIGN KEY(institutionid) REFERENCES diku_mod_inventory_storage.locinstitution(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28 FOREIGN KEY(institutionid) REFERENCES diku_mod_inventory_storage.locinstitution(_id)");

        public void RemoveInstitutionsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loccampus DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28");
        }

        public void AddInstitutionsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loccampus ADD CONSTRAINT FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30 FOREIGN KEY(institutionid) REFERENCES diku_mod_inventory_storage.locinstitution(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28 FOREIGN KEY(institutionid) REFERENCES diku_mod_inventory_storage.locinstitution(_id); ALTER TABLE diku_mod_inventory_storage.loclibrary ADD CONSTRAINT FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id); ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 FOREIGN KEY(libraryid) REFERENCES diku_mod_inventory_storage.loclibrary(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id)");

        public void RemoveInstitutionsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loccampus DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loccampus_diku_mod_inventory_s30");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loclibrary DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23");
        }

        public void AddInstitutionsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.locinstitution (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_locinstitution_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_locinstitution PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_locinstitution (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_locinstitution PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.locinstitution (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_locinstitution PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveInstitutionsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")}");

        public void AddInstitutionsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"locinstitution_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveInstitutionsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_locinstitution")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.locinstitution')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("locinstitution_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")}")}");
        }

        public void TruncateInstitutions(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveInstitutionsDependentConstraints(); else RemoveInstitutionsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddInstitutionsDependentConstraints(); else AddInstitutionsReferencingConstraints(); else EnableConstraints();
        }

        public void AddInterfacesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.interface (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_interface_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_interface PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_interface (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_interface PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.interface (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_interface PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveInterfacesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")}");

        public void AddInterfacesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"interface_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveInterfacesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_interface")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.interface')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("interface_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")}")}");
        }

        public void TruncateInterfaces() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")}");

        public void AddItemsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id); ALTER TABLE diku_mod_inventory_storage_item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20 FOREIGN KEY(permanentloantypeid) REFERENCES diku_mod_inventory_storage.loan_type(_id); ALTER TABLE diku_mod_inventory_storage_item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22 FOREIGN KEY(temporaryloantypeid) REFERENCES diku_mod_inventory_storage.loan_type(_id); ALTER TABLE diku_mod_inventory_storage_item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19 FOREIGN KEY(materialtypeid) REFERENCES diku_mod_inventory_storage.material_type(_id); ALTER TABLE diku_mod_inventory_storage_item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage_item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id)", 60 * 5);

        public void RemoveItemsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23");
        }

        public void AddItemsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.item (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_item_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), holdingsrecordid UNIQUEIDENTIFIER, permanentloantypeid UNIQUEIDENTIFIER, temporaryloantypeid UNIQUEIDENTIFIER, materialtypeid UNIQUEIDENTIFIER, permanentlocationid UNIQUEIDENTIFIER, temporarylocationid UNIQUEIDENTIFIER, CONSTRAINT PK_item PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_item (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, holdingsrecordid VARCHAR(36), permanentloantypeid VARCHAR(36), temporaryloantypeid VARCHAR(36), materialtypeid VARCHAR(36), permanentlocationid VARCHAR(36), temporarylocationid VARCHAR(36), CONSTRAINT PK_item PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.item (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, holdingsrecordid UUID, permanentloantypeid UUID, temporaryloantypeid UUID, materialtypeid UUID, permanentlocationid UUID, temporarylocationid UUID, CONSTRAINT PK_item PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveItemsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}");

        public void AddItemsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"item_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(holdingsrecordid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(permanentloantypeid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(temporaryloantypeid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(materialtypeid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(permanentlocationid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}(temporarylocationid)", 60 * 10);
        }

        public void RemoveItemsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_item")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.item')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("item_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18' AND object_id = OBJECT_ID('item')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18" : $"FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}item")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20' AND object_id = OBJECT_ID('item')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20" : $"FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}item")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22' AND object_id = OBJECT_ID('item')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22" : $"FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}item")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19' AND object_id = OBJECT_ID('item')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19" : $"FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}item")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21' AND object_id = OBJECT_ID('item')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21" : $"FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}item")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23' AND object_id = OBJECT_ID('item')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23" : $"FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}item")}");
        }

        public void TruncateItems() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}");

        public void AddItemNoteTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.item_note_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_item_note_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_item_note_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_item_note_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_item_note_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.item_note_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_item_note_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveItemNoteTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")}");

        public void AddItemNoteTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"item_note_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveItemNoteTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_item_note_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.item_note_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("item_note_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")}")}");
        }

        public void TruncateItemNoteTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")}");

        public void AddLedgersReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage.fund ADD CONSTRAINT FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4 FOREIGN KEY(ledger_id) REFERENCES diku_mod_finance_storage.ledger(id)");

        public void RemoveLedgersReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4");
        }

        public void AddLedgersDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund ADD CONSTRAINT FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4 FOREIGN KEY(ledger_id) REFERENCES diku_mod_finance_storage.ledger(id); ALTER TABLE diku_mod_finance_storage.fund_distribution ADD CONSTRAINT FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id); ALTER TABLE diku_mod_finance_storage.transaction ADD CONSTRAINT FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id); ALTER TABLE diku_mod_finance_storage.budget ADD CONSTRAINT FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2 FOREIGN KEY(fund_id) REFERENCES diku_mod_finance_storage.fund(id)");

        public void RemoveLedgersDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_diku_mod_finance_storage.le4");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.fund_distribution DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.fund_distribution_diku_mod_finan5");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.transaction DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.budget DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.budget_diku_mod_finance_storage.2");
        }

        public void AddLedgersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.ledger (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_ledger_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_ledger PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage_ledger (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_ledger PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.ledger (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_ledger PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveLedgersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")}");

        public void AddLedgersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"ledger_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveLedgersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_finance_storage_ledger")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_finance_storage.ledger')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_finance_storage")}.{Quote("ledger_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")}")}");
        }

        public void TruncateLedgers(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveLedgersDependentConstraints(); else RemoveLedgersReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddLedgersDependentConstraints(); else AddLedgersReferencingConstraints(); else EnableConstraints();
        }

        public void AddLibrariesConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_loclibrary ADD CONSTRAINT FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id)", 60 * 5);

        public void RemoveLibrariesConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.loclibrary DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31");
        }

        public void AddLibrariesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 FOREIGN KEY(libraryid) REFERENCES diku_mod_inventory_storage.loclibrary(_id)");

        public void RemoveLibrariesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29");
        }

        public void AddLibrariesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 FOREIGN KEY(libraryid) REFERENCES diku_mod_inventory_storage.loclibrary(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id)");

        public void RemoveLibrariesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23");
        }

        public void AddLibrariesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.loclibrary (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_loclibrary_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), campusid UNIQUEIDENTIFIER, CONSTRAINT PK_loclibrary PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_loclibrary (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, campusid VARCHAR(36), CONSTRAINT PK_loclibrary PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.loclibrary (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, campusid UUID, CONSTRAINT PK_loclibrary PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveLibrariesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}");

        public void AddLibrariesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"loclibrary_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}(campusid)", 60 * 10);
        }

        public void RemoveLibrariesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_loclibrary")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.loclibrary')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("loclibrary_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31' AND object_id = OBJECT_ID('loclibrary')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31" : $"FK_diku_mod_inventory_storage.loclibrary_diku_mod_inventory_31 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}loclibrary")}");
        }

        public void TruncateLibraries(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveLibrariesDependentConstraints(); else RemoveLibrariesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddLibrariesDependentConstraints(); else AddLibrariesReferencingConstraints(); else EnableConstraints();
        }

        public void AddLoansTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.loan (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_loan_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_loan PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_loan (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_loan PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.loan (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_loan PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveLoansTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")}");

        public void AddLoansIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"loan_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveLoansIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_loan")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.loan')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("loan_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")}")}");
        }

        public void TruncateLoans() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")}");

        public void AddLoanPoliciesConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_circulation_storage_loan_policy ADD CONSTRAINT FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25 FOREIGN KEY(loanspolicy_fixedduedatescheduleid) REFERENCES diku_mod_circulation_storage.fixed_due_date_schedule(_id); ALTER TABLE diku_mod_circulation_storage_loan_policy ADD CONSTRAINT FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26 FOREIGN KEY(renewalspolicy_alternatefixedduedatescheduleid) REFERENCES diku_mod_circulation_storage.fixed_due_date_schedule(_id)", 60 * 5);

        public void RemoveLoanPoliciesConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.loan_policy DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26");
        }

        public void AddLoanPoliciesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.loan_policy (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_loan_policy_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), loanspolicy_fixedduedatescheduleid UNIQUEIDENTIFIER, renewalspolicy_alternatefixedduedatescheduleid UNIQUEIDENTIFIER, CONSTRAINT PK_loan_policy PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_loan_policy (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, loanspolicy_fixedduedatescheduleid VARCHAR(36), renewalspolicy_alternatefixedduedatescheduleid VARCHAR(36), CONSTRAINT PK_loan_policy PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.loan_policy (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, loanspolicy_fixedduedatescheduleid UUID, renewalspolicy_alternatefixedduedatescheduleid UUID, CONSTRAINT PK_loan_policy PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveLoanPoliciesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}");

        public void AddLoanPoliciesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"loan_policy_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25 ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}(loanspolicy_fixedduedatescheduleid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26 ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}(renewalspolicy_alternatefixedduedatescheduleid)", 60 * 10);
        }

        public void RemoveLoanPoliciesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_loan_policy")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.loan_policy')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("loan_policy_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25' AND object_id = OBJECT_ID('loan_policy')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25" : $"FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula25 ON {(IsSqlServer ? "diku_mod_circulation_storage." : "")}loan_policy")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26' AND object_id = OBJECT_ID('loan_policy')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26" : $"FK_diku_mod_circulation_storage.loan_policy_diku_mod_circula26 ON {(IsSqlServer ? "diku_mod_circulation_storage." : "")}loan_policy")}");
        }

        public void TruncateLoanPolicies() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}");

        public void AddLoanTypesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20 FOREIGN KEY(permanentloantypeid) REFERENCES diku_mod_inventory_storage.loan_type(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22 FOREIGN KEY(temporaryloantypeid) REFERENCES diku_mod_inventory_storage.loan_type(_id)");

        public void RemoveLoanTypesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22");
        }

        public void AddLoanTypesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20 FOREIGN KEY(permanentloantypeid) REFERENCES diku_mod_inventory_storage.loan_type(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22 FOREIGN KEY(temporaryloantypeid) REFERENCES diku_mod_inventory_storage.loan_type(_id)");

        public void RemoveLoanTypesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag20");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag22");
        }

        public void AddLoanTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.loan_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_loan_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_loan_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_loan_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_loan_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.loan_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_loan_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveLoanTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")}");

        public void AddLoanTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"loan_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveLoanTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_loan_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.loan_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("loan_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")}")}");
        }

        public void TruncateLoanTypes(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveLoanTypesDependentConstraints(); else RemoveLoanTypesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddLoanTypesDependentConstraints(); else AddLoanTypesReferencingConstraints(); else EnableConstraints();
        }

        public void AddLocationsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28 FOREIGN KEY(institutionid) REFERENCES diku_mod_inventory_storage.locinstitution(_id); ALTER TABLE diku_mod_inventory_storage_location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27 FOREIGN KEY(campusid) REFERENCES diku_mod_inventory_storage.loccampus(_id); ALTER TABLE diku_mod_inventory_storage_location ADD CONSTRAINT FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 FOREIGN KEY(libraryid) REFERENCES diku_mod_inventory_storage.loclibrary(_id)", 60 * 5);

        public void RemoveLocationsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.location DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29");
        }

        public void AddLocationsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id)");

        public void RemoveLocationsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23");
        }

        public void AddLocationsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21 FOREIGN KEY(permanentlocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23 FOREIGN KEY(temporarylocationid) REFERENCES diku_mod_inventory_storage.location(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id)");

        public void RemoveLocationsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven10");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven11");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag21");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag23");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
        }

        public void AddLocationsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.location (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_location_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), institutionid UNIQUEIDENTIFIER, campusid UNIQUEIDENTIFIER, libraryid UNIQUEIDENTIFIER, CONSTRAINT PK_location PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_location (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, institutionid VARCHAR(36), campusid VARCHAR(36), libraryid VARCHAR(36), CONSTRAINT PK_location PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.location (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, institutionid UUID, campusid UUID, libraryid UUID, CONSTRAINT PK_location PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveLocationsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}");

        public void AddLocationsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"location_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}(institutionid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}(campusid)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}(libraryid)", 60 * 10);
        }

        public void RemoveLocationsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_location")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.location')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("location_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28' AND object_id = OBJECT_ID('location')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28" : $"FK_diku_mod_inventory_storage.location_diku_mod_inventory_st28 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}location")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27' AND object_id = OBJECT_ID('location')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27" : $"FK_diku_mod_inventory_storage.location_diku_mod_inventory_st27 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}location")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29' AND object_id = OBJECT_ID('location')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29" : $"FK_diku_mod_inventory_storage.location_diku_mod_inventory_st29 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}location")}");
        }

        public void TruncateLocations(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveLocationsDependentConstraints(); else RemoveLocationsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddLocationsDependentConstraints(); else AddLocationsReferencingConstraints(); else EnableConstraints();
        }

        public void AddLoginsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_credentials (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_auth_credentials_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_auth_credentials PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_login_auth_credentials (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_auth_credentials PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_login.auth_credentials (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_auth_credentials PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveLoginsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")}");

        public void AddLoginsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"auth_credentials_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveLoginsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_login_auth_credentials")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_login.auth_credentials')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_login")}.{Quote("auth_credentials_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")}")}");
        }

        public void TruncateLogins() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")}");

        public void AddMaterialTypesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19 FOREIGN KEY(materialtypeid) REFERENCES diku_mod_inventory_storage.material_type(_id)");

        public void RemoveMaterialTypesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19");
        }

        public void AddMaterialTypesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19 FOREIGN KEY(materialtypeid) REFERENCES diku_mod_inventory_storage.material_type(_id)");

        public void RemoveMaterialTypesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag19");
        }

        public void AddMaterialTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.material_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_material_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_material_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_material_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_material_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.material_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_material_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveMaterialTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")}");

        public void AddMaterialTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"material_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveMaterialTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_material_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.material_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("material_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")}")}");
        }

        public void TruncateMaterialTypes(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveMaterialTypesDependentConstraints(); else RemoveMaterialTypesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddMaterialTypesDependentConstraints(); else AddMaterialTypesReferencingConstraints(); else EnableConstraints();
        }

        public void AddModeOfIssuancesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.instance ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13 FOREIGN KEY(modeofissuanceid) REFERENCES diku_mod_inventory_storage.mode_of_issuance(_id)");

        public void RemoveModeOfIssuancesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13");
        }

        public void AddModeOfIssuancesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13 FOREIGN KEY(modeofissuanceid) REFERENCES diku_mod_inventory_storage.mode_of_issuance(_id); ALTER TABLE diku_mod_inventory_storage.item ADD CONSTRAINT FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18 FOREIGN KEY(holdingsrecordid) REFERENCES diku_mod_inventory_storage.holdings_record(_id); ALTER TABLE diku_mod_inventory_storage.holdings_record ADD CONSTRAINT FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9 FOREIGN KEY(instanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod15 FOREIGN KEY(subinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_relationship ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_relationship_diku_mod16 FOREIGN KEY(superinstanceid) REFERENCES diku_mod_inventory_storage.instance(_id); ALTER TABLE diku_mod_inventory_storage.instance_source_marc ADD CONSTRAINT FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17 FOREIGN KEY(_id) REFERENCES diku_mod_inventory_storage.instance(_id)");

        public void RemoveModeOfIssuancesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_diku_mod_inventory_st13");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.item DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.item_diku_mod_inventory_storag18");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.holdings_record DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.holdings_record_diku_mod_inven9");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod15'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod15");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_relationship_diku_mod16'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_relationship DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_relationship_diku_mod16");
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.instance_source_marc DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.instance_source_marc_diku_mod_17");
        }

        public void AddModeOfIssuancesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.mode_of_issuance (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_mode_of_issuance_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_mode_of_issuance PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_mode_of_issuance (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_mode_of_issuance PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.mode_of_issuance (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_mode_of_issuance PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveModeOfIssuancesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")}");

        public void AddModeOfIssuancesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"mode_of_issuance_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveModeOfIssuancesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_mode_of_issuance")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.mode_of_issuance')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("mode_of_issuance_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")}")}");
        }

        public void TruncateModeOfIssuances(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveModeOfIssuancesDependentConstraints(); else RemoveModeOfIssuancesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddModeOfIssuancesDependentConstraints(); else AddModeOfIssuancesReferencingConstraints(); else EnableConstraints();
        }

        public void AddNotesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_notes.note_data (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_note_data_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_note_data PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_notes_note_data (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_note_data PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_notes.note_data (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_note_data PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveNotesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")}");

        public void AddNotesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"note_data_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveNotesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_notes_note_data")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_notes.note_data')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_notes")}.{Quote("note_data_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")}")}");
        }

        public void TruncateNotes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")}");

        public void AddOrdersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.purchase_order (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_purchase_order_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_purchase_order PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_purchase_order (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_purchase_order PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.purchase_order (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_purchase_order PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveOrdersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")}");

        public void AddOrdersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"purchase_order_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveOrdersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_purchase_order")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.purchase_order')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("purchase_order_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")}")}");
        }

        public void TruncateOrders() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")}");

        public void AddOrderItemsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.po_line (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_po_line_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_po_line PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_po_line (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_po_line PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.po_line (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_po_line PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveOrderItemsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")}");

        public void AddOrderItemsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"po_line_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveOrderItemsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_po_line")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.po_line')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("po_line_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")}")}");
        }

        public void TruncateOrderItems() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")}");

        public void AddOrderItemLocationsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.location (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_location_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_location PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_location (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_location PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.location (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_location PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveOrderItemLocationsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")}");

        public void AddOrderItemLocationsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"location_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveOrderItemLocationsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_location")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.location')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("location_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")}")}");
        }

        public void TruncateOrderItemLocations() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")}");

        public void AddOwnersReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_feesfines.feefines ADD CONSTRAINT FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3 FOREIGN KEY(ownerid) REFERENCES diku_mod_feesfines.owners(id)");

        public void RemoveOwnersReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_feesfines.feefines DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3");
        }

        public void AddOwnersDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_feesfines.feefines ADD CONSTRAINT FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3 FOREIGN KEY(ownerid) REFERENCES diku_mod_feesfines.owners(id)");

        public void RemoveOwnersDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_feesfines.feefines DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_feesfines.feefines_diku_mod_feesfines.owners_own3");
        }

        public void AddOwnersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.owners (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_owners_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_owners PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_owners (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_owners PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.owners (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_owners PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveOwnersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")}");

        public void AddOwnersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"owners_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveOwnersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_owners")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.owners')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("owners_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")}")}");
        }

        public void TruncateOwners(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveOwnersDependentConstraints(); else RemoveOwnersReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddOwnersDependentConstraints(); else AddOwnersReferencingConstraints(); else EnableConstraints();
        }

        public void AddPatronNoticePoliciesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.patron_notice_policy (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_patron_notice_policy_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_patron_notice_policy PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_patron_notice_policy (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_patron_notice_policy PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.patron_notice_policy (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_patron_notice_policy PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemovePatronNoticePoliciesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")}");

        public void AddPatronNoticePoliciesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"patron_notice_policy_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePatronNoticePoliciesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_patron_notice_policy")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.patron_notice_policy')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("patron_notice_policy_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")}")}");
        }

        public void TruncatePatronNoticePolicies() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")}");

        public void AddPaymentsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.payments (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_payments_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_payments PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_payments (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_payments PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.payments (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_payments PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemovePaymentsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")}");

        public void AddPaymentsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"payments_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePaymentsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_payments")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.payments')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("payments_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")}")}");
        }

        public void TruncatePayments() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")}");

        public void AddPermissionsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_permissions.permissions (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_permissions_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_permissions PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_permissions_permissions (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_permissions PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_permissions.permissions (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_permissions PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemovePermissionsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")}");

        public void AddPermissionsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"permissions_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePermissionsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_permissions_permissions")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_permissions.permissions')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_permissions")}.{Quote("permissions_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")}")}");
        }

        public void TruncatePermissions() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")}");

        public void AddPermissionsUsersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_permissions.permissions_users (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_permissions_users_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_permissions_users PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_permissions_permissions_users (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_permissions_users PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_permissions.permissions_users (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_permissions_users PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemovePermissionsUsersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")}");

        public void AddPermissionsUsersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"permissions_users_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePermissionsUsersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_permissions_permissions_users")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_permissions.permissions_users')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_permissions")}.{Quote("permissions_users_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")}")}");
        }

        public void TruncatePermissionsUsers() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")}");

        public void AddPhoneNumbersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.phone_number (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_phone_number_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_phone_number PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_phone_number (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_phone_number PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.phone_number (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_phone_number PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemovePhoneNumbersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")}");

        public void AddPhoneNumbersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"phone_number_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePhoneNumbersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_phone_number")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.phone_number')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("phone_number_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")}")}");
        }

        public void TruncatePhoneNumbers() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")}");

        public void AddPhysicalsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.physical (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_physical_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_physical PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_physical (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_physical PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.physical (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_physical PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemovePhysicalsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")}");

        public void AddPhysicalsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"physical_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePhysicalsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_physical")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.physical')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("physical_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")}")}");
        }

        public void TruncatePhysicals() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")}");

        public void AddPiecesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.pieces (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_pieces_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_pieces PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_pieces (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_pieces PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.pieces (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_pieces PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemovePiecesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")}");

        public void AddPiecesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"pieces_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")}(creation_date DESC)", 60 * 10);
        }

        public void RemovePiecesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_pieces")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.pieces')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("pieces_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")}")}");
        }

        public void TruncatePieces() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")}");

        public void AddProxiesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_users.proxyfor (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_proxyfor_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_proxyfor PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_users_proxyfor (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_proxyfor PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_users.proxyfor (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_proxyfor PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveProxiesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")}");

        public void AddProxiesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"proxyfor_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveProxiesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_users_proxyfor")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_users.proxyfor')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_users")}.{Quote("proxyfor_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")}")}");
        }

        public void TruncateProxies() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")}");

        public void AddRefundsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.refunds (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_refunds_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_refunds PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_refunds (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_refunds PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.refunds (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_refunds PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveRefundsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")}");

        public void AddRefundsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"refunds_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveRefundsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_refunds")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.refunds')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("refunds_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")}")}");
        }

        public void TruncateRefunds() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")}");

        public void AddReportingCodesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.reporting_code (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_reporting_code_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_reporting_code PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_reporting_code (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_reporting_code PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.reporting_code (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_reporting_code PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveReportingCodesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")}");

        public void AddReportingCodesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"reporting_code_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveReportingCodesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_reporting_code")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.reporting_code')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("reporting_code_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")}")}");
        }

        public void TruncateReportingCodes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")}");

        public void AddRequestsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_circulation_storage_request ADD CONSTRAINT FK_diku_mod_circulation_storage.request_diku_mod_circulation32 FOREIGN KEY(cancellationreasonid) REFERENCES diku_mod_circulation_storage.cancellation_reason(_id)", 60 * 5);

        public void RemoveRequestsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_circulation_storage.request_diku_mod_circulation32'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_circulation_storage.request_diku_mod_circulation32'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_circulation_storage.request DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_circulation_storage.request_diku_mod_circulation32");
        }

        public void AddRequestsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.request (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_request_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), cancellationreasonid UNIQUEIDENTIFIER, CONSTRAINT PK_request PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_request (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, cancellationreasonid VARCHAR(36), CONSTRAINT PK_request PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.request (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, cancellationreasonid UUID, CONSTRAINT PK_request PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveRequestsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}");

        public void AddRequestsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"request_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_circulation_storage.request_diku_mod_circulation32 ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}(cancellationreasonid)", 60 * 10);
        }

        public void RemoveRequestsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_request")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.request')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("request_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_circulation_storage.request_diku_mod_circulation32' AND object_id = OBJECT_ID('request')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_circulation_storage.request_diku_mod_circulation32" : $"FK_diku_mod_circulation_storage.request_diku_mod_circulation32 ON {(IsSqlServer ? "diku_mod_circulation_storage." : "")}request")}");
        }

        public void TruncateRequests() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}");

        public void AddRequestPoliciesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.request_policy (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_request_policy_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_request_policy PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_request_policy (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_request_policy PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.request_policy (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_request_policy PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveRequestPoliciesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")}");

        public void AddRequestPoliciesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"request_policy_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveRequestPoliciesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_request_policy")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.request_policy')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("request_policy_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")}")}");
        }

        public void TruncateRequestPolicies() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")}");

        public void AddServicePointsReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.service_point_user ADD CONSTRAINT FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33 FOREIGN KEY(defaultservicepointid) REFERENCES diku_mod_inventory_storage.service_point(_id)");

        public void RemoveServicePointsReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.service_point_user DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33");
        }

        public void AddServicePointsDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.service_point_user ADD CONSTRAINT FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33 FOREIGN KEY(defaultservicepointid) REFERENCES diku_mod_inventory_storage.service_point(_id)");

        public void RemoveServicePointsDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.service_point_user DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33");
        }

        public void AddServicePointsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.service_point (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_service_point_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_service_point PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_service_point (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_service_point PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.service_point (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_service_point PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveServicePointsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")}");

        public void AddServicePointsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"service_point_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveServicePointsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_service_point")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.service_point')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("service_point_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")}")}");
        }

        public void TruncateServicePoints(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveServicePointsDependentConstraints(); else RemoveServicePointsReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddServicePointsDependentConstraints(); else AddServicePointsReferencingConstraints(); else EnableConstraints();
        }

        public void AddServicePointUsersConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_service_point_user ADD CONSTRAINT FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33 FOREIGN KEY(defaultservicepointid) REFERENCES diku_mod_inventory_storage.service_point(_id)", 60 * 5);

        public void RemoveServicePointUsersConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.service_point_user DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33");
        }

        public void AddServicePointUsersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.service_point_user (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_service_point_user_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), defaultservicepointid UNIQUEIDENTIFIER, CONSTRAINT PK_service_point_user PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_service_point_user (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, defaultservicepointid VARCHAR(36), CONSTRAINT PK_service_point_user PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.service_point_user (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, defaultservicepointid UUID, CONSTRAINT PK_service_point_user PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveServicePointUsersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}");

        public void AddServicePointUsersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"service_point_user_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}(defaultservicepointid)", 60 * 10);
        }

        public void RemoveServicePointUsersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_service_point_user")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.service_point_user')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("service_point_user_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33' AND object_id = OBJECT_ID('service_point_user')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33" : $"FK_diku_mod_inventory_storage.service_point_user_diku_mod_in33 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}service_point_user")}");
        }

        public void TruncateServicePointUsers() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}");

        public void AddSourcesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.source (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_source_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_source PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_source (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_source PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.source (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_source PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveSourcesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")}");

        public void AddSourcesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"source_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveSourcesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_source")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.source')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("source_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")}")}");
        }

        public void TruncateSources() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")}");

        public void AddStaffSlipsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.staff_slips (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_staff_slips_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_staff_slips PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage_staff_slips (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_staff_slips PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_circulation_storage.staff_slips (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_staff_slips PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveStaffSlipsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")}");

        public void AddStaffSlipsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"staff_slips_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveStaffSlipsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_circulation_storage_staff_slips")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_circulation_storage.staff_slips')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_circulation_storage")}.{Quote("staff_slips_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")}")}");
        }

        public void TruncateStaffSlips() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")}");

        public void AddStatisticalCodesConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage_statistical_code ADD CONSTRAINT FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34 FOREIGN KEY(statisticalcodetypeid) REFERENCES diku_mod_inventory_storage.statistical_code_type(_id)", 60 * 5);

        public void RemoveStatisticalCodesConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.statistical_code DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34");
        }

        public void AddStatisticalCodesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.statistical_code (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_statistical_code_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), statisticalcodetypeid UNIQUEIDENTIFIER, CONSTRAINT PK_statistical_code PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_statistical_code (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, statisticalcodetypeid VARCHAR(36), CONSTRAINT PK_statistical_code PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.statistical_code (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, statisticalcodetypeid UUID, CONSTRAINT PK_statistical_code PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveStatisticalCodesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}");

        public void AddStatisticalCodesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"statistical_code_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34 ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}(statisticalcodetypeid)", 60 * 10);
        }

        public void RemoveStatisticalCodesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_statistical_code")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.statistical_code')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("statistical_code_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34' AND object_id = OBJECT_ID('statistical_code')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34" : $"FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34 ON {(IsSqlServer ? "diku_mod_inventory_storage." : "")}statistical_code")}");
        }

        public void TruncateStatisticalCodes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}");

        public void AddStatisticalCodeTypesReferencingConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_inventory_storage.statistical_code ADD CONSTRAINT FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34 FOREIGN KEY(statisticalcodetypeid) REFERENCES diku_mod_inventory_storage.statistical_code_type(_id)");

        public void RemoveStatisticalCodeTypesReferencingConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.statistical_code DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34");
        }

        public void AddStatisticalCodeTypesDependentConstraints() => ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.statistical_code ADD CONSTRAINT FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34 FOREIGN KEY(statisticalcodetypeid) REFERENCES diku_mod_inventory_storage.statistical_code_type(_id)");

        public void RemoveStatisticalCodeTypesDependentConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_inventory_storage.statistical_code DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_inventory_storage.statistical_code_diku_mod_inve34");
        }

        public void AddStatisticalCodeTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.statistical_code_type (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_statistical_code_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_statistical_code_type PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage_statistical_code_type (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_statistical_code_type PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_inventory_storage.statistical_code_type (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_statistical_code_type PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveStatisticalCodeTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")}");

        public void AddStatisticalCodeTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"statistical_code_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveStatisticalCodeTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_inventory_storage_statistical_code_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_inventory_storage.statistical_code_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_inventory_storage")}.{Quote("statistical_code_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")}")}");
        }

        public void TruncateStatisticalCodeTypes(bool dependent = false, bool constraints = true)
        {
            if (constraints) if (!IsMySql) if (dependent) RemoveStatisticalCodeTypesDependentConstraints(); else RemoveStatisticalCodeTypesReferencingConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")}{(dependent ? $"; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}" : "")}");
            if (constraints) if (!IsMySql) if (dependent) AddStatisticalCodeTypesDependentConstraints(); else AddStatisticalCodeTypesReferencingConstraints(); else EnableConstraints();
        }

        public void AddTagsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_tags.tags (_id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_tags_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_tags PRIMARY KEY(_id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_tags_tags (_id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_tags PRIMARY KEY(_id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_tags.tags (_id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_tags PRIMARY KEY(_id))");
            else throw new NotImplementedException();
        }

        public void RemoveTagsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")}");

        public void AddTagsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"tags_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveTagsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_tags_tags")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_tags.tags')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_tags")}.{Quote("tags_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")}")}");
        }

        public void TruncateTags() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")}");

        public void AddTransactionsConstraints() => ExecuteNonQuery("ALTER TABLE diku_mod_finance_storage_transaction ADD CONSTRAINT FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 FOREIGN KEY(budget_id) REFERENCES diku_mod_finance_storage.budget(id)", 60 * 5);

        public void RemoveTransactionsConstraints()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SELECT 1 FROM information_schema.referential_constraints WHERE constraint_schema = '{databaseName}' AND constraint_name = 'FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'" : "SELECT 1 FROM sys.foreign_keys WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35'") != null) ExecuteNonQuery($"ALTER TABLE diku_mod_finance_storage.transaction DROP {(IsMySql ? "FOREIGN KEY" : IsPostgreSql ? "CONSTRAINT IF EXISTS" : "CONSTRAINT")} FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35");
        }

        public void AddTransactionsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.transaction (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_transaction_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), budget_id UNIQUEIDENTIFIER, CONSTRAINT PK_transaction PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage_transaction (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, budget_id VARCHAR(36), CONSTRAINT PK_transaction PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_finance_storage.transaction (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, budget_id UUID, CONSTRAINT PK_transaction PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveTransactionsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}");

        public void AddTransactionsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"transaction_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}(creation_date DESC)", 60 * 10);
            if (!IsMySql) ExecuteNonQuery($"CREATE INDEX FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}(budget_id)", 60 * 10);
        }

        public void RemoveTransactionsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_finance_storage_transaction")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_finance_storage.transaction')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_finance_storage")}.{Quote("transaction_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}")}");
            if (!IsMySql && (IsPostgreSql || ExecuteScalar("SELECT 1 FROM sys.indexes WHERE name='FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35' AND object_id = OBJECT_ID('transaction')") != null)) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35" : $"FK_diku_mod_finance_storage.transaction_diku_mod_finance_sto35 ON {(IsSqlServer ? "diku_mod_finance_storage." : "")}transaction")}");
        }

        public void TruncateTransactions() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}");

        public void AddTransfersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.transfers (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_transfers_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_transfers PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_transfers (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_transfers PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.transfers (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_transfers PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveTransfersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")}");

        public void AddTransfersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"transfers_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveTransfersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_transfers")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.transfers')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("transfers_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")}")}");
        }

        public void TruncateTransfers() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")}");

        public void AddTransferCriteriasTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.transfer_criteria (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_transfer_criteria_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_transfer_criteria PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_transfer_criteria (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_transfer_criteria PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.transfer_criteria (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_transfer_criteria PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveTransferCriteriasTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")}");

        public void AddTransferCriteriasIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"transfer_criteria_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveTransferCriteriasIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_transfer_criteria")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.transfer_criteria')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("transfer_criteria_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")}")}");
        }

        public void TruncateTransferCriterias() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")}");

        public void AddUrlsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.url (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_url_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_url PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_url (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_url PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.url (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_url PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveUrlsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")}");

        public void AddUrlsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"url_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveUrlsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_url")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.url')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("url_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")}")}");
        }

        public void TruncateUrls() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")}");

        public void AddUsersTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_users.users (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_users_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_users PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_users_users (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_users PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_users.users (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_users PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveUsersTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")}");

        public void AddUsersIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"users_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveUsersIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_users_users")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_users.users')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_users")}.{Quote("users_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")}")}");
        }

        public void TruncateUsers() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")}");

        public void AddVendorsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.vendor (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_vendor_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_vendor PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_vendor (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_vendor PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.vendor (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_vendor PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveVendorsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")}");

        public void AddVendorsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"vendor_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveVendorsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_vendor")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.vendor')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("vendor_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")}")}");
        }

        public void TruncateVendors() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")}");

        public void AddVendorCategoriesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.vendor_category (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_vendor_category_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_vendor_category PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_vendor_category (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_vendor_category PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.vendor_category (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_vendor_category PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveVendorCategoriesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")}");

        public void AddVendorCategoriesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"vendor_category_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveVendorCategoriesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_vendor_category")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.vendor_category')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("vendor_category_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")}")}");
        }

        public void TruncateVendorCategories() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")}");

        public void AddVendorDetailsTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.vendor_detail (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_vendor_detail_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_vendor_detail PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage_vendor_detail (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_vendor_detail PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_orders_storage.vendor_detail (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_vendor_detail PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveVendorDetailsTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")}");

        public void AddVendorDetailsIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"vendor_detail_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveVendorDetailsIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_orders_storage_vendor_detail")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_orders_storage.vendor_detail')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_orders_storage")}.{Quote("vendor_detail_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")}")}");
        }

        public void TruncateVendorDetails() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")}");

        public void AddVendorTypesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.vendor_type (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_vendor_type_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_vendor_type PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors_vendor_type (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_vendor_type PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_vendors.vendor_type (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_vendor_type PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveVendorTypesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")}");

        public void AddVendorTypesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"vendor_type_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveVendorTypesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_vendors_vendor_type")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_vendors.vendor_type')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_vendors")}.{Quote("vendor_type_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")}")}");
        }

        public void TruncateVendorTypes() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")}");

        public void AddWaivesTable()
        {
            if (IsSqlServer) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.waives (id UNIQUEIDENTIFIER NOT NULL, jsonb NVARCHAR(MAX) NOT NULL, CONSTRAINT CK_waives_jsonb CHECK (ISJSON(jsonb)=1), creation_date DATETIME2, created_by NVARCHAR(MAX), CONSTRAINT PK_waives PRIMARY KEY(id))");
            else if (IsMySql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines_waives (id VARCHAR(36) NOT NULL, jsonb JSON NOT NULL, creation_date DATETIME, created_by LONGTEXT, CONSTRAINT PK_waives PRIMARY KEY(id)) ROW_FORMAT=DYNAMIC");
            else if (IsPostgreSql) ExecuteNonQuery("CREATE TABLE diku_mod_feesfines.waives (id UUID NOT NULL, jsonb JSONB NOT NULL, creation_date TIMESTAMP, created_by TEXT, CONSTRAINT PK_waives PRIMARY KEY(id))");
            else throw new NotImplementedException();
        }

        public void RemoveWaivesTable() => ExecuteNonQuery($"DROP TABLE IF EXISTS {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")}");

        public void AddWaivesIndexes()
        {
            ExecuteNonQuery($"CREATE INDEX {(IsPostgreSql ? $"waives_" : "")}creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")}(creation_date DESC)", 60 * 10);
        }

        public void RemoveWaivesIndexes()
        {
            if (IsPostgreSql || ExecuteScalar(IsMySql ? $"SHOW INDEX FROM {Quote("diku_mod_feesfines_waives")} WHERE key_name LIKE 'creation_date'" : "SELECT 1 FROM sys.indexes WHERE name='creation_date' AND object_id = OBJECT_ID('diku_mod_feesfines.waives')") != null) ExecuteNonQuery($"DROP INDEX {(IsPostgreSql ? $"IF EXISTS {Quote("diku_mod_feesfines")}.{Quote("waives_creation_date")}" : $"creation_date ON {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")}")}");
        }

        public void TruncateWaives() => ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")}");

        public void Truncate(bool constraints = true)
        {
            if (constraints) if (!IsMySql) RemoveConstraints(); else DisableConstraints();
            ExecuteNonQuery($"TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}accounts")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}account")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}address")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}addresstype")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}adjustment")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}agreement")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}alert")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}alias")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}alternative_title_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}audit_loan")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_attempts")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials_history")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_password_action")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}manualblocks")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}budget")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}call_number_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loccampus")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}cancellation_reason")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}category")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}circulation_rules")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}claim")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}classification_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}comments")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}contact_category")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_name_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}contributor_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}cost")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}details")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}electronic_access_relationship")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}email")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}eresource")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}event_logs")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefines")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}feefineactions")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fiscal_year")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}fixed_due_date_schedule")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}fund_distribution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}fund_distribution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}groups")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_record")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_note_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}holdings_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}identifier_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}ill_policy")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_format")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_relationship_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_source_marc")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_status")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}instance_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}locinstitution")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}interface")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}item_note_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}ledger")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loclibrary")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}loan_policy")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}loan_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}location")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_login")}." : "")}{Quote($"{(IsMySql ? "diku_mod_login_" : "")}auth_credentials")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}material_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}mode_of_issuance")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_notes")}." : "")}{Quote($"{(IsMySql ? "diku_mod_notes_" : "")}note_data")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}purchase_order")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}po_line")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}location")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}owners")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}patron_notice_policy")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}payments")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_permissions")}." : "")}{Quote($"{(IsMySql ? "diku_mod_permissions_" : "")}permissions_users")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}phone_number")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}physical")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}pieces")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}proxyfor")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}refunds")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}reporting_code")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}request_policy")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}service_point_user")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}source")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_circulation_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_circulation_storage_" : "")}staff_slips")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_inventory_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_inventory_storage_" : "")}statistical_code_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_tags")}." : "")}{Quote($"{(IsMySql ? "diku_mod_tags_" : "")}tags")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_finance_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_finance_storage_" : "")}transaction")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfers")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}transfer_criteria")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}url")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_users")}." : "")}{Quote($"{(IsMySql ? "diku_mod_users_" : "")}users")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_category")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_orders_storage")}." : "")}{Quote($"{(IsMySql ? "diku_mod_orders_storage_" : "")}vendor_detail")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_vendors")}." : "")}{Quote($"{(IsMySql ? "diku_mod_vendors_" : "")}vendor_type")}; TRUNCATE TABLE {(!IsMySql ? $"{Quote("diku_mod_feesfines")}." : "")}{Quote($"{(IsMySql ? "diku_mod_feesfines_" : "")}waives")}");
            if (constraints) if (!IsMySql) AddConstraints(); else EnableConstraints();
        }

        public void AddTables()
        {
            AddAccountsTable();
            AddAccount2sTable();
            AddAddressesTable();
            AddAddressTypesTable();
            AddAdjustmentsTable();
            AddAgreementsTable();
            AddAlertsTable();
            AddAliasesTable();
            AddAlternativeTitleTypesTable();
            AddAuditLoansTable();
            AddAuthAttemptsTable();
            AddAuthCredentialsHistoriesTable();
            AddAuthPasswordActionsTable();
            AddBlocksTable();
            AddBudgetsTable();
            AddCallNumberTypesTable();
            AddCampusesTable();
            AddCancellationReasonsTable();
            AddCategoriesTable();
            AddCirculationRulesTable();
            AddClaimsTable();
            AddClassificationTypesTable();
            AddCommentsTable();
            AddContactsTable();
            AddContactCategoriesTable();
            AddContributorNameTypesTable();
            AddContributorTypesTable();
            AddCostsTable();
            AddDetailsTable();
            AddElectronicAccessRelationshipsTable();
            AddEmailsTable();
            AddEresourcesTable();
            AddEventLogsTable();
            AddFeesTable();
            AddFeeActionsTable();
            AddFiscalYearsTable();
            AddFixedDueDateSchedulesTable();
            AddFundsTable();
            AddFundDistributionsTable();
            AddFundDistribution2sTable();
            AddGroupsTable();
            AddHoldingsTable();
            AddHoldingNoteTypesTable();
            AddHoldingTypesTable();
            AddIdTypesTable();
            AddIllPoliciesTable();
            AddInstancesTable();
            AddInstanceFormatsTable();
            AddInstanceRelationshipsTable();
            AddInstanceRelationshipTypesTable();
            AddInstanceSourceMarcsTable();
            AddInstanceStatusesTable();
            AddInstanceTypesTable();
            AddInstitutionsTable();
            AddInterfacesTable();
            AddItemsTable();
            AddItemNoteTypesTable();
            AddLedgersTable();
            AddLibrariesTable();
            AddLoansTable();
            AddLoanPoliciesTable();
            AddLoanTypesTable();
            AddLocationsTable();
            AddLoginsTable();
            AddMaterialTypesTable();
            AddModeOfIssuancesTable();
            AddNotesTable();
            AddOrdersTable();
            AddOrderItemsTable();
            AddOrderItemLocationsTable();
            AddOwnersTable();
            AddPatronNoticePoliciesTable();
            AddPaymentsTable();
            AddPermissionsTable();
            AddPermissionsUsersTable();
            AddPhoneNumbersTable();
            AddPhysicalsTable();
            AddPiecesTable();
            AddProxiesTable();
            AddRefundsTable();
            AddReportingCodesTable();
            AddRequestsTable();
            AddRequestPoliciesTable();
            AddServicePointsTable();
            AddServicePointUsersTable();
            AddSourcesTable();
            AddStaffSlipsTable();
            AddStatisticalCodesTable();
            AddStatisticalCodeTypesTable();
            AddTagsTable();
            AddTransactionsTable();
            AddTransfersTable();
            AddTransferCriteriasTable();
            AddUrlsTable();
            AddUsersTable();
            AddVendorsTable();
            AddVendorCategoriesTable();
            AddVendorDetailsTable();
            AddVendorTypesTable();
            AddWaivesTable();
        }

        public void RemoveTables()
        {
            RemoveAccountsTable();
            RemoveAccount2sTable();
            RemoveAddressesTable();
            RemoveAddressTypesTable();
            RemoveAdjustmentsTable();
            RemoveAgreementsTable();
            RemoveAlertsTable();
            RemoveAliasesTable();
            RemoveAlternativeTitleTypesTable();
            RemoveAuditLoansTable();
            RemoveAuthAttemptsTable();
            RemoveAuthCredentialsHistoriesTable();
            RemoveAuthPasswordActionsTable();
            RemoveBlocksTable();
            RemoveBudgetsTable();
            RemoveCallNumberTypesTable();
            RemoveCampusesTable();
            RemoveCancellationReasonsTable();
            RemoveCategoriesTable();
            RemoveCirculationRulesTable();
            RemoveClaimsTable();
            RemoveClassificationTypesTable();
            RemoveCommentsTable();
            RemoveContactsTable();
            RemoveContactCategoriesTable();
            RemoveContributorNameTypesTable();
            RemoveContributorTypesTable();
            RemoveCostsTable();
            RemoveDetailsTable();
            RemoveElectronicAccessRelationshipsTable();
            RemoveEmailsTable();
            RemoveEresourcesTable();
            RemoveEventLogsTable();
            RemoveFeesTable();
            RemoveFeeActionsTable();
            RemoveFiscalYearsTable();
            RemoveFixedDueDateSchedulesTable();
            RemoveFundsTable();
            RemoveFundDistributionsTable();
            RemoveFundDistribution2sTable();
            RemoveGroupsTable();
            RemoveHoldingsTable();
            RemoveHoldingNoteTypesTable();
            RemoveHoldingTypesTable();
            RemoveIdTypesTable();
            RemoveIllPoliciesTable();
            RemoveInstancesTable();
            RemoveInstanceFormatsTable();
            RemoveInstanceRelationshipsTable();
            RemoveInstanceRelationshipTypesTable();
            RemoveInstanceSourceMarcsTable();
            RemoveInstanceStatusesTable();
            RemoveInstanceTypesTable();
            RemoveInstitutionsTable();
            RemoveInterfacesTable();
            RemoveItemsTable();
            RemoveItemNoteTypesTable();
            RemoveLedgersTable();
            RemoveLibrariesTable();
            RemoveLoansTable();
            RemoveLoanPoliciesTable();
            RemoveLoanTypesTable();
            RemoveLocationsTable();
            RemoveLoginsTable();
            RemoveMaterialTypesTable();
            RemoveModeOfIssuancesTable();
            RemoveNotesTable();
            RemoveOrdersTable();
            RemoveOrderItemsTable();
            RemoveOrderItemLocationsTable();
            RemoveOwnersTable();
            RemovePatronNoticePoliciesTable();
            RemovePaymentsTable();
            RemovePermissionsTable();
            RemovePermissionsUsersTable();
            RemovePhoneNumbersTable();
            RemovePhysicalsTable();
            RemovePiecesTable();
            RemoveProxiesTable();
            RemoveRefundsTable();
            RemoveReportingCodesTable();
            RemoveRequestsTable();
            RemoveRequestPoliciesTable();
            RemoveServicePointsTable();
            RemoveServicePointUsersTable();
            RemoveSourcesTable();
            RemoveStaffSlipsTable();
            RemoveStatisticalCodesTable();
            RemoveStatisticalCodeTypesTable();
            RemoveTagsTable();
            RemoveTransactionsTable();
            RemoveTransfersTable();
            RemoveTransferCriteriasTable();
            RemoveUrlsTable();
            RemoveUsersTable();
            RemoveVendorsTable();
            RemoveVendorCategoriesTable();
            RemoveVendorDetailsTable();
            RemoveVendorTypesTable();
            RemoveWaivesTable();
        }

        public void AddConstraints()
        {
            AddBudgetsConstraints();
            AddCampusesConstraints();
            AddFeesConstraints();
            AddFundsConstraints();
            AddFundDistributionsConstraints();
            AddHoldingsConstraints();
            AddInstancesConstraints();
            AddInstanceRelationshipsConstraints();
            AddInstanceSourceMarcsConstraints();
            AddItemsConstraints();
            AddLibrariesConstraints();
            AddLoanPoliciesConstraints();
            AddLocationsConstraints();
            AddRequestsConstraints();
            AddServicePointUsersConstraints();
            AddStatisticalCodesConstraints();
            AddTransactionsConstraints();
        }

        public void RemoveConstraints()
        {
            RemoveBudgetsConstraints();
            RemoveCampusesConstraints();
            RemoveFeesConstraints();
            RemoveFundsConstraints();
            RemoveFundDistributionsConstraints();
            RemoveHoldingsConstraints();
            RemoveInstancesConstraints();
            RemoveInstanceRelationshipsConstraints();
            RemoveInstanceSourceMarcsConstraints();
            RemoveItemsConstraints();
            RemoveLibrariesConstraints();
            RemoveLoanPoliciesConstraints();
            RemoveLocationsConstraints();
            RemoveRequestsConstraints();
            RemoveServicePointUsersConstraints();
            RemoveStatisticalCodesConstraints();
            RemoveTransactionsConstraints();
        }

        public void AddIndexes()
        {
            AddAccountsIndexes();
            AddAccount2sIndexes();
            AddAddressesIndexes();
            AddAddressTypesIndexes();
            AddAdjustmentsIndexes();
            AddAgreementsIndexes();
            AddAlertsIndexes();
            AddAliasesIndexes();
            AddAlternativeTitleTypesIndexes();
            AddAuditLoansIndexes();
            AddAuthAttemptsIndexes();
            AddAuthCredentialsHistoriesIndexes();
            AddAuthPasswordActionsIndexes();
            AddBlocksIndexes();
            AddBudgetsIndexes();
            AddCallNumberTypesIndexes();
            AddCampusesIndexes();
            AddCancellationReasonsIndexes();
            AddCategoriesIndexes();
            AddClaimsIndexes();
            AddClassificationTypesIndexes();
            AddCommentsIndexes();
            AddContactsIndexes();
            AddContactCategoriesIndexes();
            AddContributorNameTypesIndexes();
            AddCostsIndexes();
            AddDetailsIndexes();
            AddElectronicAccessRelationshipsIndexes();
            AddEmailsIndexes();
            AddEresourcesIndexes();
            AddEventLogsIndexes();
            AddFeesIndexes();
            AddFeeActionsIndexes();
            AddFiscalYearsIndexes();
            AddFundsIndexes();
            AddFundDistributionsIndexes();
            AddFundDistribution2sIndexes();
            AddGroupsIndexes();
            AddHoldingsIndexes();
            AddHoldingNoteTypesIndexes();
            AddHoldingTypesIndexes();
            AddIdTypesIndexes();
            AddIllPoliciesIndexes();
            AddInstancesIndexes();
            AddInstanceRelationshipsIndexes();
            AddInstanceRelationshipTypesIndexes();
            AddInstanceSourceMarcsIndexes();
            AddInstanceStatusesIndexes();
            AddInstitutionsIndexes();
            AddInterfacesIndexes();
            AddItemsIndexes();
            AddItemNoteTypesIndexes();
            AddLedgersIndexes();
            AddLibrariesIndexes();
            AddLoansIndexes();
            AddLoanPoliciesIndexes();
            AddLoanTypesIndexes();
            AddLocationsIndexes();
            AddLoginsIndexes();
            AddMaterialTypesIndexes();
            AddModeOfIssuancesIndexes();
            AddNotesIndexes();
            AddOrdersIndexes();
            AddOrderItemsIndexes();
            AddOrderItemLocationsIndexes();
            AddOwnersIndexes();
            AddPatronNoticePoliciesIndexes();
            AddPaymentsIndexes();
            AddPermissionsIndexes();
            AddPermissionsUsersIndexes();
            AddPhoneNumbersIndexes();
            AddPhysicalsIndexes();
            AddPiecesIndexes();
            AddProxiesIndexes();
            AddRefundsIndexes();
            AddReportingCodesIndexes();
            AddRequestsIndexes();
            AddRequestPoliciesIndexes();
            AddServicePointsIndexes();
            AddServicePointUsersIndexes();
            AddSourcesIndexes();
            AddStaffSlipsIndexes();
            AddStatisticalCodesIndexes();
            AddStatisticalCodeTypesIndexes();
            AddTagsIndexes();
            AddTransactionsIndexes();
            AddTransfersIndexes();
            AddTransferCriteriasIndexes();
            AddUrlsIndexes();
            AddUsersIndexes();
            AddVendorsIndexes();
            AddVendorCategoriesIndexes();
            AddVendorDetailsIndexes();
            AddVendorTypesIndexes();
            AddWaivesIndexes();
        }

        public void RemoveIndexes()
        {
            RemoveAccountsIndexes();
            RemoveAccount2sIndexes();
            RemoveAddressesIndexes();
            RemoveAddressTypesIndexes();
            RemoveAdjustmentsIndexes();
            RemoveAgreementsIndexes();
            RemoveAlertsIndexes();
            RemoveAliasesIndexes();
            RemoveAlternativeTitleTypesIndexes();
            RemoveAuditLoansIndexes();
            RemoveAuthAttemptsIndexes();
            RemoveAuthCredentialsHistoriesIndexes();
            RemoveAuthPasswordActionsIndexes();
            RemoveBlocksIndexes();
            RemoveBudgetsIndexes();
            RemoveCallNumberTypesIndexes();
            RemoveCampusesIndexes();
            RemoveCancellationReasonsIndexes();
            RemoveCategoriesIndexes();
            RemoveClaimsIndexes();
            RemoveClassificationTypesIndexes();
            RemoveCommentsIndexes();
            RemoveContactsIndexes();
            RemoveContactCategoriesIndexes();
            RemoveContributorNameTypesIndexes();
            RemoveCostsIndexes();
            RemoveDetailsIndexes();
            RemoveElectronicAccessRelationshipsIndexes();
            RemoveEmailsIndexes();
            RemoveEresourcesIndexes();
            RemoveEventLogsIndexes();
            RemoveFeesIndexes();
            RemoveFeeActionsIndexes();
            RemoveFiscalYearsIndexes();
            RemoveFundsIndexes();
            RemoveFundDistributionsIndexes();
            RemoveFundDistribution2sIndexes();
            RemoveGroupsIndexes();
            RemoveHoldingsIndexes();
            RemoveHoldingNoteTypesIndexes();
            RemoveHoldingTypesIndexes();
            RemoveIdTypesIndexes();
            RemoveIllPoliciesIndexes();
            RemoveInstancesIndexes();
            RemoveInstanceRelationshipsIndexes();
            RemoveInstanceRelationshipTypesIndexes();
            RemoveInstanceSourceMarcsIndexes();
            RemoveInstanceStatusesIndexes();
            RemoveInstitutionsIndexes();
            RemoveInterfacesIndexes();
            RemoveItemsIndexes();
            RemoveItemNoteTypesIndexes();
            RemoveLedgersIndexes();
            RemoveLibrariesIndexes();
            RemoveLoansIndexes();
            RemoveLoanPoliciesIndexes();
            RemoveLoanTypesIndexes();
            RemoveLocationsIndexes();
            RemoveLoginsIndexes();
            RemoveMaterialTypesIndexes();
            RemoveModeOfIssuancesIndexes();
            RemoveNotesIndexes();
            RemoveOrdersIndexes();
            RemoveOrderItemsIndexes();
            RemoveOrderItemLocationsIndexes();
            RemoveOwnersIndexes();
            RemovePatronNoticePoliciesIndexes();
            RemovePaymentsIndexes();
            RemovePermissionsIndexes();
            RemovePermissionsUsersIndexes();
            RemovePhoneNumbersIndexes();
            RemovePhysicalsIndexes();
            RemovePiecesIndexes();
            RemoveProxiesIndexes();
            RemoveRefundsIndexes();
            RemoveReportingCodesIndexes();
            RemoveRequestsIndexes();
            RemoveRequestPoliciesIndexes();
            RemoveServicePointsIndexes();
            RemoveServicePointUsersIndexes();
            RemoveSourcesIndexes();
            RemoveStaffSlipsIndexes();
            RemoveStatisticalCodesIndexes();
            RemoveStatisticalCodeTypesIndexes();
            RemoveTagsIndexes();
            RemoveTransactionsIndexes();
            RemoveTransfersIndexes();
            RemoveTransferCriteriasIndexes();
            RemoveUrlsIndexes();
            RemoveUsersIndexes();
            RemoveVendorsIndexes();
            RemoveVendorCategoriesIndexes();
            RemoveVendorDetailsIndexes();
            RemoveVendorTypesIndexes();
            RemoveWaivesIndexes();
        }

        public void SetDatabaseRecoverySimple()
        {
            using (var dc = DbProviderFactories.GetFactory(providerName).CreateConnection())
            using (var dc2 = dc.CreateCommand())
            {
                dc.ConnectionString = connectionString;
                dc.Open();
                dc2.CommandText = $"ALTER DATABASE {databaseName} SET RECOVERY SIMPLE";
                traceSource.TraceEvent(TraceEventType.Verbose, 0, dc2.CommandText);
                dc2.ExecuteNonQuery();
            }
        }

        public class Constraint
        {
            public string ProviderName { get; set; }
            public string Name { get; set; }
            public string SchemaName { get; set; }
            public string TableName { get; set; }
            public ICollection<string> ColumnNames { get; set; } = new List<string>();
            public string ReferencedSchemaName { get; set; }
            public string ReferencedTableName { get; set; }
            public ICollection<string> ReferencedColumnNames { get; set; } = new List<string>();
            public string DeleteRule { get; set; }
            public string UpdateRule { get; set; }

            public string AddStatement => $"";
            public string DeleteStatement => $"";

            public override string ToString() => $"{{ Name = {Name}, SchemaName = {SchemaName}, TableName = {TableName}, ColumnNames = {{ {string.Join(", ", ColumnNames)} }}, ReferencedSchemaName = {ReferencedSchemaName}, ReferencedTableName = {ReferencedTableName}, ReferencedColumnNames = {{ {string.Join(", ", ReferencedColumnNames)} }}, DeleteRule = {DeleteRule}, UpdateRule = {UpdateRule} }}";
        }

        public ICollection<Constraint> GetConstraints(string tableName = null, string referencedTableName = null)
        {
            if (!IsSqlServer && !IsMySql && !IsPostgreSql) throw new NotSupportedException();
            ConnectIfNecessary();
            using (var dc = dbConnection.CreateCommand())
            {
                dc.CommandText = !IsMySql ? $"SELECT rc.CONSTRAINT_NAME AS Name, kcu.TABLE_SCHEMA AS SchemaName, kcu.TABLE_NAME AS TableName, kcu.COLUMN_NAME AS ColumnName, kcu.ORDINAL_POSITION AS \"Order\", kcu2.TABLE_SCHEMA AS ReferencedSchemaName, kcu2.TABLE_NAME AS ReferencedTableName, kcu2.COLUMN_NAME AS ReferencedColumnName, rc.DELETE_RULE AS DeleteRule, rc.UPDATE_RULE AS UpdateRule FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON rc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu2 ON rc.UNIQUE_CONSTRAINT_NAME = kcu2.CONSTRAINT_NAME WHERE kcu.ORDINAL_POSITION = kcu2.ORDINAL_POSITION{(tableName != null ? $" AND kcu.TABLE_NAME = '{tableName}'" : "")}{(referencedTableName != null ? $" AND kcu2.TABLE_NAME = '{referencedTableName}'" : "")} ORDER BY TableName, Name, \"Order\""
                    : $"SELECT rc.CONSTRAINT_NAME AS Name, NULL AS SchemaName, kcu.TABLE_NAME AS TableName, kcu.COLUMN_NAME AS ColumnName, kcu.ORDINAL_POSITION AS `Order`, NULL AS ReferencedSchemaName, kcu.REFERENCED_TABLE_NAME AS ReferencedTableName, kcu.REFERENCED_COLUMN_NAME AS ReferencedColumnName, rc.DELETE_RULE AS DeleteRule, rc.UPDATE_RULE AS UpdateRule FROM INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS rc JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE kcu ON rc.CONSTRAINT_SCHEMA = kcu.CONSTRAINT_SCHEMA AND rc.TABLE_NAME = kcu.TABLE_NAME AND rc.CONSTRAINT_NAME = kcu.CONSTRAINT_NAME WHERE rc.CONSTRAINT_SCHEMA = '{dbConnection.Database}'{(tableName != null ? $" AND kcu.TABLE_NAME = '{tableName}'" : "")}{(referencedTableName != null ? $" AND kcu.REFERENCED_TABLE_NAME = '{referencedTableName}'" : "")} ORDER BY TableName, Name, `Order`";
                dc.Transaction = dbTransaction;
                traceSource.TraceEvent(TraceEventType.Verbose, 0, dc.CommandText);
                using (var dr = dc.ExecuteReader())
                {
                    return dr.Cast<DbDataRecord>().Select(ddr => new
                    {
                        Name = (string)ddr["Name"],
                        SchemaName = ddr["SchemaName"] != DBNull.Value ? (string)ddr["SchemaName"] : null,
                        TableName = (string)ddr["TableName"],
                        ColumnName = (string)ddr["ColumnName"],
                        Order = !IsMySql ? (int)ddr["Order"] : (int)(long)ddr["Order"],
                        ReferencedSchemaName = ddr["ReferencedSchemaName"] != DBNull.Value ? (string)ddr["ReferencedSchemaName"] : null,
                        ReferencedTableName = (string)ddr["ReferencedTableName"],
                        ReferencedColumnName = (string)ddr["ReferencedColumnName"],
                        DeleteRule = (string)ddr["DeleteRule"],
                        UpdateRule = (string)ddr["UpdateRule"]
                    }).GroupBy(a => new
                    {
                        a.Name,
                        a.TableName,
                        a.ReferencedTableName,
                    }).Select(g => new Constraint
                    {
                        Name = g.Key.Name,
                        SchemaName = IsSqlServer && g.First().SchemaName != "dbo" && IsPostgreSql && g.First().SchemaName != "public" ? g.First().SchemaName : null,
                        TableName = g.First().TableName,
                        ColumnNames = g.OrderBy(a => a.Order).Select(a => a.ColumnName).ToArray(),
                        ReferencedSchemaName = IsSqlServer && g.First().ReferencedSchemaName != "dbo" && IsPostgreSql && g.First().ReferencedSchemaName != "public" ? g.First().ReferencedSchemaName : null,
                        ReferencedTableName = g.First().ReferencedTableName,
                        ReferencedColumnNames = g.OrderBy(a => a.Order).Select(a => a.ReferencedColumnName).ToArray(),
                        DeleteRule = g.First().DeleteRule,
                        UpdateRule = g.First().UpdateRule
                    }).ToArray();
                }
            }
        }

        public void Commit()
        {
            if (dbTransaction != null)
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, "Committing transaction");
                dbTransaction.Commit();
                dbTransaction.Dispose();
                dbTransaction = dbConnection.BeginTransaction(IsolationLevel.ReadCommitted);
            }
        }

        public override void Dispose()
        {
            if (dbTransaction != null)
            {
                dbTransaction.Dispose();
            }
            if (insertAccountDbCommand != null) insertAccountDbCommand.Dispose();
            if (insertAccount2DbCommand != null) insertAccount2DbCommand.Dispose();
            if (insertAddressDbCommand != null) insertAddressDbCommand.Dispose();
            if (insertAddressTypeDbCommand != null) insertAddressTypeDbCommand.Dispose();
            if (insertAdjustmentDbCommand != null) insertAdjustmentDbCommand.Dispose();
            if (insertAgreementDbCommand != null) insertAgreementDbCommand.Dispose();
            if (insertAlertDbCommand != null) insertAlertDbCommand.Dispose();
            if (insertAliasDbCommand != null) insertAliasDbCommand.Dispose();
            if (insertAlternativeTitleTypeDbCommand != null) insertAlternativeTitleTypeDbCommand.Dispose();
            if (insertAuditLoanDbCommand != null) insertAuditLoanDbCommand.Dispose();
            if (insertAuthAttemptDbCommand != null) insertAuthAttemptDbCommand.Dispose();
            if (insertAuthCredentialsHistoryDbCommand != null) insertAuthCredentialsHistoryDbCommand.Dispose();
            if (insertAuthPasswordActionDbCommand != null) insertAuthPasswordActionDbCommand.Dispose();
            if (insertBlockDbCommand != null) insertBlockDbCommand.Dispose();
            if (insertBudgetDbCommand != null) insertBudgetDbCommand.Dispose();
            if (insertCallNumberTypeDbCommand != null) insertCallNumberTypeDbCommand.Dispose();
            if (insertCampusDbCommand != null) insertCampusDbCommand.Dispose();
            if (insertCancellationReasonDbCommand != null) insertCancellationReasonDbCommand.Dispose();
            if (insertCategoryDbCommand != null) insertCategoryDbCommand.Dispose();
            if (insertCirculationRuleDbCommand != null) insertCirculationRuleDbCommand.Dispose();
            if (insertClaimDbCommand != null) insertClaimDbCommand.Dispose();
            if (insertClassificationTypeDbCommand != null) insertClassificationTypeDbCommand.Dispose();
            if (insertCommentDbCommand != null) insertCommentDbCommand.Dispose();
            if (insertContactDbCommand != null) insertContactDbCommand.Dispose();
            if (insertContactCategoryDbCommand != null) insertContactCategoryDbCommand.Dispose();
            if (insertContributorNameTypeDbCommand != null) insertContributorNameTypeDbCommand.Dispose();
            if (insertContributorTypeDbCommand != null) insertContributorTypeDbCommand.Dispose();
            if (insertCostDbCommand != null) insertCostDbCommand.Dispose();
            if (insertDetailDbCommand != null) insertDetailDbCommand.Dispose();
            if (insertElectronicAccessRelationshipDbCommand != null) insertElectronicAccessRelationshipDbCommand.Dispose();
            if (insertEmailDbCommand != null) insertEmailDbCommand.Dispose();
            if (insertEresourceDbCommand != null) insertEresourceDbCommand.Dispose();
            if (insertEventLogDbCommand != null) insertEventLogDbCommand.Dispose();
            if (insertFeeDbCommand != null) insertFeeDbCommand.Dispose();
            if (insertFeeActionDbCommand != null) insertFeeActionDbCommand.Dispose();
            if (insertFiscalYearDbCommand != null) insertFiscalYearDbCommand.Dispose();
            if (insertFixedDueDateScheduleDbCommand != null) insertFixedDueDateScheduleDbCommand.Dispose();
            if (insertFundDbCommand != null) insertFundDbCommand.Dispose();
            if (insertFundDistributionDbCommand != null) insertFundDistributionDbCommand.Dispose();
            if (insertFundDistribution2DbCommand != null) insertFundDistribution2DbCommand.Dispose();
            if (insertGroupDbCommand != null) insertGroupDbCommand.Dispose();
            if (insertHoldingDbCommand != null) insertHoldingDbCommand.Dispose();
            if (insertHoldingNoteTypeDbCommand != null) insertHoldingNoteTypeDbCommand.Dispose();
            if (insertHoldingTypeDbCommand != null) insertHoldingTypeDbCommand.Dispose();
            if (insertIdTypeDbCommand != null) insertIdTypeDbCommand.Dispose();
            if (insertIllPolicyDbCommand != null) insertIllPolicyDbCommand.Dispose();
            if (insertInstanceDbCommand != null) insertInstanceDbCommand.Dispose();
            if (insertInstanceFormatDbCommand != null) insertInstanceFormatDbCommand.Dispose();
            if (insertInstanceRelationshipDbCommand != null) insertInstanceRelationshipDbCommand.Dispose();
            if (insertInstanceRelationshipTypeDbCommand != null) insertInstanceRelationshipTypeDbCommand.Dispose();
            if (insertInstanceSourceMarcDbCommand != null) insertInstanceSourceMarcDbCommand.Dispose();
            if (insertInstanceStatusDbCommand != null) insertInstanceStatusDbCommand.Dispose();
            if (insertInstanceTypeDbCommand != null) insertInstanceTypeDbCommand.Dispose();
            if (insertInstitutionDbCommand != null) insertInstitutionDbCommand.Dispose();
            if (insertInterfaceDbCommand != null) insertInterfaceDbCommand.Dispose();
            if (insertItemDbCommand != null) insertItemDbCommand.Dispose();
            if (insertItemNoteTypeDbCommand != null) insertItemNoteTypeDbCommand.Dispose();
            if (insertLedgerDbCommand != null) insertLedgerDbCommand.Dispose();
            if (insertLibraryDbCommand != null) insertLibraryDbCommand.Dispose();
            if (insertLoanDbCommand != null) insertLoanDbCommand.Dispose();
            if (insertLoanPolicyDbCommand != null) insertLoanPolicyDbCommand.Dispose();
            if (insertLoanTypeDbCommand != null) insertLoanTypeDbCommand.Dispose();
            if (insertLocationDbCommand != null) insertLocationDbCommand.Dispose();
            if (insertLoginDbCommand != null) insertLoginDbCommand.Dispose();
            if (insertMaterialTypeDbCommand != null) insertMaterialTypeDbCommand.Dispose();
            if (insertModeOfIssuanceDbCommand != null) insertModeOfIssuanceDbCommand.Dispose();
            if (insertNoteDbCommand != null) insertNoteDbCommand.Dispose();
            if (insertOrderDbCommand != null) insertOrderDbCommand.Dispose();
            if (insertOrderItemDbCommand != null) insertOrderItemDbCommand.Dispose();
            if (insertOrderItemLocationDbCommand != null) insertOrderItemLocationDbCommand.Dispose();
            if (insertOwnerDbCommand != null) insertOwnerDbCommand.Dispose();
            if (insertPatronNoticePolicyDbCommand != null) insertPatronNoticePolicyDbCommand.Dispose();
            if (insertPaymentDbCommand != null) insertPaymentDbCommand.Dispose();
            if (insertPermissionDbCommand != null) insertPermissionDbCommand.Dispose();
            if (insertPermissionsUserDbCommand != null) insertPermissionsUserDbCommand.Dispose();
            if (insertPhoneNumberDbCommand != null) insertPhoneNumberDbCommand.Dispose();
            if (insertPhysicalDbCommand != null) insertPhysicalDbCommand.Dispose();
            if (insertPieceDbCommand != null) insertPieceDbCommand.Dispose();
            if (insertProxyDbCommand != null) insertProxyDbCommand.Dispose();
            if (insertRefundDbCommand != null) insertRefundDbCommand.Dispose();
            if (insertReportingCodeDbCommand != null) insertReportingCodeDbCommand.Dispose();
            if (insertRequestDbCommand != null) insertRequestDbCommand.Dispose();
            if (insertRequestPolicyDbCommand != null) insertRequestPolicyDbCommand.Dispose();
            if (insertServicePointDbCommand != null) insertServicePointDbCommand.Dispose();
            if (insertServicePointUserDbCommand != null) insertServicePointUserDbCommand.Dispose();
            if (insertSourceDbCommand != null) insertSourceDbCommand.Dispose();
            if (insertStaffSlipDbCommand != null) insertStaffSlipDbCommand.Dispose();
            if (insertStatisticalCodeDbCommand != null) insertStatisticalCodeDbCommand.Dispose();
            if (insertStatisticalCodeTypeDbCommand != null) insertStatisticalCodeTypeDbCommand.Dispose();
            if (insertTagDbCommand != null) insertTagDbCommand.Dispose();
            if (insertTransactionDbCommand != null) insertTransactionDbCommand.Dispose();
            if (insertTransferDbCommand != null) insertTransferDbCommand.Dispose();
            if (insertTransferCriteriaDbCommand != null) insertTransferCriteriaDbCommand.Dispose();
            if (insertUrlDbCommand != null) insertUrlDbCommand.Dispose();
            if (insertUserDbCommand != null) insertUserDbCommand.Dispose();
            if (insertVendorDbCommand != null) insertVendorDbCommand.Dispose();
            if (insertVendorCategoryDbCommand != null) insertVendorCategoryDbCommand.Dispose();
            if (insertVendorDetailDbCommand != null) insertVendorDetailDbCommand.Dispose();
            if (insertVendorTypeDbCommand != null) insertVendorTypeDbCommand.Dispose();
            if (insertWaiveDbCommand != null) insertWaiveDbCommand.Dispose();
            if (updateAccountDbCommand != null) updateAccountDbCommand.Dispose();
            if (updateAccount2DbCommand != null) updateAccount2DbCommand.Dispose();
            if (updateAddressDbCommand != null) updateAddressDbCommand.Dispose();
            if (updateAddressTypeDbCommand != null) updateAddressTypeDbCommand.Dispose();
            if (updateAdjustmentDbCommand != null) updateAdjustmentDbCommand.Dispose();
            if (updateAgreementDbCommand != null) updateAgreementDbCommand.Dispose();
            if (updateAlertDbCommand != null) updateAlertDbCommand.Dispose();
            if (updateAliasDbCommand != null) updateAliasDbCommand.Dispose();
            if (updateAlternativeTitleTypeDbCommand != null) updateAlternativeTitleTypeDbCommand.Dispose();
            if (updateAuditLoanDbCommand != null) updateAuditLoanDbCommand.Dispose();
            if (updateAuthAttemptDbCommand != null) updateAuthAttemptDbCommand.Dispose();
            if (updateAuthCredentialsHistoryDbCommand != null) updateAuthCredentialsHistoryDbCommand.Dispose();
            if (updateAuthPasswordActionDbCommand != null) updateAuthPasswordActionDbCommand.Dispose();
            if (updateBlockDbCommand != null) updateBlockDbCommand.Dispose();
            if (updateBudgetDbCommand != null) updateBudgetDbCommand.Dispose();
            if (updateCallNumberTypeDbCommand != null) updateCallNumberTypeDbCommand.Dispose();
            if (updateCampusDbCommand != null) updateCampusDbCommand.Dispose();
            if (updateCancellationReasonDbCommand != null) updateCancellationReasonDbCommand.Dispose();
            if (updateCategoryDbCommand != null) updateCategoryDbCommand.Dispose();
            if (updateCirculationRuleDbCommand != null) updateCirculationRuleDbCommand.Dispose();
            if (updateClaimDbCommand != null) updateClaimDbCommand.Dispose();
            if (updateClassificationTypeDbCommand != null) updateClassificationTypeDbCommand.Dispose();
            if (updateCommentDbCommand != null) updateCommentDbCommand.Dispose();
            if (updateContactDbCommand != null) updateContactDbCommand.Dispose();
            if (updateContactCategoryDbCommand != null) updateContactCategoryDbCommand.Dispose();
            if (updateContributorNameTypeDbCommand != null) updateContributorNameTypeDbCommand.Dispose();
            if (updateContributorTypeDbCommand != null) updateContributorTypeDbCommand.Dispose();
            if (updateCostDbCommand != null) updateCostDbCommand.Dispose();
            if (updateDetailDbCommand != null) updateDetailDbCommand.Dispose();
            if (updateElectronicAccessRelationshipDbCommand != null) updateElectronicAccessRelationshipDbCommand.Dispose();
            if (updateEmailDbCommand != null) updateEmailDbCommand.Dispose();
            if (updateEresourceDbCommand != null) updateEresourceDbCommand.Dispose();
            if (updateEventLogDbCommand != null) updateEventLogDbCommand.Dispose();
            if (updateFeeDbCommand != null) updateFeeDbCommand.Dispose();
            if (updateFeeActionDbCommand != null) updateFeeActionDbCommand.Dispose();
            if (updateFiscalYearDbCommand != null) updateFiscalYearDbCommand.Dispose();
            if (updateFixedDueDateScheduleDbCommand != null) updateFixedDueDateScheduleDbCommand.Dispose();
            if (updateFundDbCommand != null) updateFundDbCommand.Dispose();
            if (updateFundDistributionDbCommand != null) updateFundDistributionDbCommand.Dispose();
            if (updateFundDistribution2DbCommand != null) updateFundDistribution2DbCommand.Dispose();
            if (updateGroupDbCommand != null) updateGroupDbCommand.Dispose();
            if (updateHoldingDbCommand != null) updateHoldingDbCommand.Dispose();
            if (updateHoldingNoteTypeDbCommand != null) updateHoldingNoteTypeDbCommand.Dispose();
            if (updateHoldingTypeDbCommand != null) updateHoldingTypeDbCommand.Dispose();
            if (updateIdTypeDbCommand != null) updateIdTypeDbCommand.Dispose();
            if (updateIllPolicyDbCommand != null) updateIllPolicyDbCommand.Dispose();
            if (updateInstanceDbCommand != null) updateInstanceDbCommand.Dispose();
            if (updateInstanceFormatDbCommand != null) updateInstanceFormatDbCommand.Dispose();
            if (updateInstanceRelationshipDbCommand != null) updateInstanceRelationshipDbCommand.Dispose();
            if (updateInstanceRelationshipTypeDbCommand != null) updateInstanceRelationshipTypeDbCommand.Dispose();
            if (updateInstanceSourceMarcDbCommand != null) updateInstanceSourceMarcDbCommand.Dispose();
            if (updateInstanceStatusDbCommand != null) updateInstanceStatusDbCommand.Dispose();
            if (updateInstanceTypeDbCommand != null) updateInstanceTypeDbCommand.Dispose();
            if (updateInstitutionDbCommand != null) updateInstitutionDbCommand.Dispose();
            if (updateInterfaceDbCommand != null) updateInterfaceDbCommand.Dispose();
            if (updateItemDbCommand != null) updateItemDbCommand.Dispose();
            if (updateItemNoteTypeDbCommand != null) updateItemNoteTypeDbCommand.Dispose();
            if (updateLedgerDbCommand != null) updateLedgerDbCommand.Dispose();
            if (updateLibraryDbCommand != null) updateLibraryDbCommand.Dispose();
            if (updateLoanDbCommand != null) updateLoanDbCommand.Dispose();
            if (updateLoanPolicyDbCommand != null) updateLoanPolicyDbCommand.Dispose();
            if (updateLoanTypeDbCommand != null) updateLoanTypeDbCommand.Dispose();
            if (updateLocationDbCommand != null) updateLocationDbCommand.Dispose();
            if (updateLoginDbCommand != null) updateLoginDbCommand.Dispose();
            if (updateMaterialTypeDbCommand != null) updateMaterialTypeDbCommand.Dispose();
            if (updateModeOfIssuanceDbCommand != null) updateModeOfIssuanceDbCommand.Dispose();
            if (updateNoteDbCommand != null) updateNoteDbCommand.Dispose();
            if (updateOrderDbCommand != null) updateOrderDbCommand.Dispose();
            if (updateOrderItemDbCommand != null) updateOrderItemDbCommand.Dispose();
            if (updateOrderItemLocationDbCommand != null) updateOrderItemLocationDbCommand.Dispose();
            if (updateOwnerDbCommand != null) updateOwnerDbCommand.Dispose();
            if (updatePatronNoticePolicyDbCommand != null) updatePatronNoticePolicyDbCommand.Dispose();
            if (updatePaymentDbCommand != null) updatePaymentDbCommand.Dispose();
            if (updatePermissionDbCommand != null) updatePermissionDbCommand.Dispose();
            if (updatePermissionsUserDbCommand != null) updatePermissionsUserDbCommand.Dispose();
            if (updatePhoneNumberDbCommand != null) updatePhoneNumberDbCommand.Dispose();
            if (updatePhysicalDbCommand != null) updatePhysicalDbCommand.Dispose();
            if (updatePieceDbCommand != null) updatePieceDbCommand.Dispose();
            if (updateProxyDbCommand != null) updateProxyDbCommand.Dispose();
            if (updateRefundDbCommand != null) updateRefundDbCommand.Dispose();
            if (updateReportingCodeDbCommand != null) updateReportingCodeDbCommand.Dispose();
            if (updateRequestDbCommand != null) updateRequestDbCommand.Dispose();
            if (updateRequestPolicyDbCommand != null) updateRequestPolicyDbCommand.Dispose();
            if (updateServicePointDbCommand != null) updateServicePointDbCommand.Dispose();
            if (updateServicePointUserDbCommand != null) updateServicePointUserDbCommand.Dispose();
            if (updateSourceDbCommand != null) updateSourceDbCommand.Dispose();
            if (updateStaffSlipDbCommand != null) updateStaffSlipDbCommand.Dispose();
            if (updateStatisticalCodeDbCommand != null) updateStatisticalCodeDbCommand.Dispose();
            if (updateStatisticalCodeTypeDbCommand != null) updateStatisticalCodeTypeDbCommand.Dispose();
            if (updateTagDbCommand != null) updateTagDbCommand.Dispose();
            if (updateTransactionDbCommand != null) updateTransactionDbCommand.Dispose();
            if (updateTransferDbCommand != null) updateTransferDbCommand.Dispose();
            if (updateTransferCriteriaDbCommand != null) updateTransferCriteriaDbCommand.Dispose();
            if (updateUrlDbCommand != null) updateUrlDbCommand.Dispose();
            if (updateUserDbCommand != null) updateUserDbCommand.Dispose();
            if (updateVendorDbCommand != null) updateVendorDbCommand.Dispose();
            if (updateVendorCategoryDbCommand != null) updateVendorCategoryDbCommand.Dispose();
            if (updateVendorDetailDbCommand != null) updateVendorDetailDbCommand.Dispose();
            if (updateVendorTypeDbCommand != null) updateVendorTypeDbCommand.Dispose();
            if (updateWaiveDbCommand != null) updateWaiveDbCommand.Dispose();
            if (deleteAccountDbCommand != null) deleteAccountDbCommand.Dispose();
            if (deleteAccount2DbCommand != null) deleteAccount2DbCommand.Dispose();
            if (deleteAddressDbCommand != null) deleteAddressDbCommand.Dispose();
            if (deleteAddressTypeDbCommand != null) deleteAddressTypeDbCommand.Dispose();
            if (deleteAdjustmentDbCommand != null) deleteAdjustmentDbCommand.Dispose();
            if (deleteAgreementDbCommand != null) deleteAgreementDbCommand.Dispose();
            if (deleteAlertDbCommand != null) deleteAlertDbCommand.Dispose();
            if (deleteAliasDbCommand != null) deleteAliasDbCommand.Dispose();
            if (deleteAlternativeTitleTypeDbCommand != null) deleteAlternativeTitleTypeDbCommand.Dispose();
            if (deleteAuditLoanDbCommand != null) deleteAuditLoanDbCommand.Dispose();
            if (deleteAuthAttemptDbCommand != null) deleteAuthAttemptDbCommand.Dispose();
            if (deleteAuthCredentialsHistoryDbCommand != null) deleteAuthCredentialsHistoryDbCommand.Dispose();
            if (deleteAuthPasswordActionDbCommand != null) deleteAuthPasswordActionDbCommand.Dispose();
            if (deleteBlockDbCommand != null) deleteBlockDbCommand.Dispose();
            if (deleteBudgetDbCommand != null) deleteBudgetDbCommand.Dispose();
            if (deleteCallNumberTypeDbCommand != null) deleteCallNumberTypeDbCommand.Dispose();
            if (deleteCampusDbCommand != null) deleteCampusDbCommand.Dispose();
            if (deleteCancellationReasonDbCommand != null) deleteCancellationReasonDbCommand.Dispose();
            if (deleteCategoryDbCommand != null) deleteCategoryDbCommand.Dispose();
            if (deleteCirculationRuleDbCommand != null) deleteCirculationRuleDbCommand.Dispose();
            if (deleteClaimDbCommand != null) deleteClaimDbCommand.Dispose();
            if (deleteClassificationTypeDbCommand != null) deleteClassificationTypeDbCommand.Dispose();
            if (deleteCommentDbCommand != null) deleteCommentDbCommand.Dispose();
            if (deleteContactDbCommand != null) deleteContactDbCommand.Dispose();
            if (deleteContactCategoryDbCommand != null) deleteContactCategoryDbCommand.Dispose();
            if (deleteContributorNameTypeDbCommand != null) deleteContributorNameTypeDbCommand.Dispose();
            if (deleteContributorTypeDbCommand != null) deleteContributorTypeDbCommand.Dispose();
            if (deleteCostDbCommand != null) deleteCostDbCommand.Dispose();
            if (deleteDetailDbCommand != null) deleteDetailDbCommand.Dispose();
            if (deleteElectronicAccessRelationshipDbCommand != null) deleteElectronicAccessRelationshipDbCommand.Dispose();
            if (deleteEmailDbCommand != null) deleteEmailDbCommand.Dispose();
            if (deleteEresourceDbCommand != null) deleteEresourceDbCommand.Dispose();
            if (deleteEventLogDbCommand != null) deleteEventLogDbCommand.Dispose();
            if (deleteFeeDbCommand != null) deleteFeeDbCommand.Dispose();
            if (deleteFeeActionDbCommand != null) deleteFeeActionDbCommand.Dispose();
            if (deleteFiscalYearDbCommand != null) deleteFiscalYearDbCommand.Dispose();
            if (deleteFixedDueDateScheduleDbCommand != null) deleteFixedDueDateScheduleDbCommand.Dispose();
            if (deleteFundDbCommand != null) deleteFundDbCommand.Dispose();
            if (deleteFundDistributionDbCommand != null) deleteFundDistributionDbCommand.Dispose();
            if (deleteFundDistribution2DbCommand != null) deleteFundDistribution2DbCommand.Dispose();
            if (deleteGroupDbCommand != null) deleteGroupDbCommand.Dispose();
            if (deleteHoldingDbCommand != null) deleteHoldingDbCommand.Dispose();
            if (deleteHoldingNoteTypeDbCommand != null) deleteHoldingNoteTypeDbCommand.Dispose();
            if (deleteHoldingTypeDbCommand != null) deleteHoldingTypeDbCommand.Dispose();
            if (deleteIdTypeDbCommand != null) deleteIdTypeDbCommand.Dispose();
            if (deleteIllPolicyDbCommand != null) deleteIllPolicyDbCommand.Dispose();
            if (deleteInstanceDbCommand != null) deleteInstanceDbCommand.Dispose();
            if (deleteInstanceFormatDbCommand != null) deleteInstanceFormatDbCommand.Dispose();
            if (deleteInstanceRelationshipDbCommand != null) deleteInstanceRelationshipDbCommand.Dispose();
            if (deleteInstanceRelationshipTypeDbCommand != null) deleteInstanceRelationshipTypeDbCommand.Dispose();
            if (deleteInstanceSourceMarcDbCommand != null) deleteInstanceSourceMarcDbCommand.Dispose();
            if (deleteInstanceStatusDbCommand != null) deleteInstanceStatusDbCommand.Dispose();
            if (deleteInstanceTypeDbCommand != null) deleteInstanceTypeDbCommand.Dispose();
            if (deleteInstitutionDbCommand != null) deleteInstitutionDbCommand.Dispose();
            if (deleteInterfaceDbCommand != null) deleteInterfaceDbCommand.Dispose();
            if (deleteItemDbCommand != null) deleteItemDbCommand.Dispose();
            if (deleteItemNoteTypeDbCommand != null) deleteItemNoteTypeDbCommand.Dispose();
            if (deleteLedgerDbCommand != null) deleteLedgerDbCommand.Dispose();
            if (deleteLibraryDbCommand != null) deleteLibraryDbCommand.Dispose();
            if (deleteLoanDbCommand != null) deleteLoanDbCommand.Dispose();
            if (deleteLoanPolicyDbCommand != null) deleteLoanPolicyDbCommand.Dispose();
            if (deleteLoanTypeDbCommand != null) deleteLoanTypeDbCommand.Dispose();
            if (deleteLocationDbCommand != null) deleteLocationDbCommand.Dispose();
            if (deleteLoginDbCommand != null) deleteLoginDbCommand.Dispose();
            if (deleteMaterialTypeDbCommand != null) deleteMaterialTypeDbCommand.Dispose();
            if (deleteModeOfIssuanceDbCommand != null) deleteModeOfIssuanceDbCommand.Dispose();
            if (deleteNoteDbCommand != null) deleteNoteDbCommand.Dispose();
            if (deleteOrderDbCommand != null) deleteOrderDbCommand.Dispose();
            if (deleteOrderItemDbCommand != null) deleteOrderItemDbCommand.Dispose();
            if (deleteOrderItemLocationDbCommand != null) deleteOrderItemLocationDbCommand.Dispose();
            if (deleteOwnerDbCommand != null) deleteOwnerDbCommand.Dispose();
            if (deletePatronNoticePolicyDbCommand != null) deletePatronNoticePolicyDbCommand.Dispose();
            if (deletePaymentDbCommand != null) deletePaymentDbCommand.Dispose();
            if (deletePermissionDbCommand != null) deletePermissionDbCommand.Dispose();
            if (deletePermissionsUserDbCommand != null) deletePermissionsUserDbCommand.Dispose();
            if (deletePhoneNumberDbCommand != null) deletePhoneNumberDbCommand.Dispose();
            if (deletePhysicalDbCommand != null) deletePhysicalDbCommand.Dispose();
            if (deletePieceDbCommand != null) deletePieceDbCommand.Dispose();
            if (deleteProxyDbCommand != null) deleteProxyDbCommand.Dispose();
            if (deleteRefundDbCommand != null) deleteRefundDbCommand.Dispose();
            if (deleteReportingCodeDbCommand != null) deleteReportingCodeDbCommand.Dispose();
            if (deleteRequestDbCommand != null) deleteRequestDbCommand.Dispose();
            if (deleteRequestPolicyDbCommand != null) deleteRequestPolicyDbCommand.Dispose();
            if (deleteServicePointDbCommand != null) deleteServicePointDbCommand.Dispose();
            if (deleteServicePointUserDbCommand != null) deleteServicePointUserDbCommand.Dispose();
            if (deleteSourceDbCommand != null) deleteSourceDbCommand.Dispose();
            if (deleteStaffSlipDbCommand != null) deleteStaffSlipDbCommand.Dispose();
            if (deleteStatisticalCodeDbCommand != null) deleteStatisticalCodeDbCommand.Dispose();
            if (deleteStatisticalCodeTypeDbCommand != null) deleteStatisticalCodeTypeDbCommand.Dispose();
            if (deleteTagDbCommand != null) deleteTagDbCommand.Dispose();
            if (deleteTransactionDbCommand != null) deleteTransactionDbCommand.Dispose();
            if (deleteTransferDbCommand != null) deleteTransferDbCommand.Dispose();
            if (deleteTransferCriteriaDbCommand != null) deleteTransferCriteriaDbCommand.Dispose();
            if (deleteUrlDbCommand != null) deleteUrlDbCommand.Dispose();
            if (deleteUserDbCommand != null) deleteUserDbCommand.Dispose();
            if (deleteVendorDbCommand != null) deleteVendorDbCommand.Dispose();
            if (deleteVendorCategoryDbCommand != null) deleteVendorCategoryDbCommand.Dispose();
            if (deleteVendorDetailDbCommand != null) deleteVendorDetailDbCommand.Dispose();
            if (deleteVendorTypeDbCommand != null) deleteVendorTypeDbCommand.Dispose();
            if (deleteWaiveDbCommand != null) deleteWaiveDbCommand.Dispose();
            if (dbConnection != null)
            {
                dbConnection.Dispose();
            }
            base.Dispose();
        }

        public static string Trim(string value)
        {
            if (value != null)
            {
                value = value.Trim();
                if (value.Length == 0) value = null;
            }
            return value;
        }
    }

    public class DbProviderFactories
    {
        internal static DbProviderFactory GetFactory(string providerName)
        {
            if (providerName == "MySql.Data.MySqlClient" || providerName == "MySql.Data.MySqlClient2")
                throw new NotSupportedException();
            else if (providerName == "Npgsql")
                return NpgsqlFactory.Instance;
            else if (providerName == "System.Data.SqlClient")
                throw new NotSupportedException();
            throw new NotImplementedException();
        }
    }
}
