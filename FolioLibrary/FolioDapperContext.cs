using Dapper;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;

namespace FolioLibrary
{
    public class FolioDapperContext : IDisposable
    {
        private string connectionString;
        public int? CommandTimeout { get; set; } = 30;
        private DbConnection dbConnection;
        private DbTransaction dbTransaction;
        private string providerName;
        public readonly static TraceSource traceSource = new TraceSource("FolioLibrary", SourceLevels.Information);

        public bool IsMySql => providerName == "MySql.Data.MySqlClient";
        public bool IsPostgreSql => providerName == "Npgsql";
        public bool IsSqlServer => providerName == "System.Data.SqlClient";

        public FolioDapperContext(string nameOrConnectionString = "FolioContext", string providerName = "Npgsql")
        {
            this.providerName = ConfigurationManager.ConnectionStrings[nameOrConnectionString]?.ProviderName ?? providerName ?? "Npgsql";
            connectionString = ConfigurationManager.ConnectionStrings[nameOrConnectionString]?.ConnectionString ?? nameOrConnectionString;
        }

        private DbConnection Connection
        {
            get
            {
                if (dbConnection == null)
                {
                    dbConnection = DbProviderFactories.GetFactory(IsMySql ? "MySql.Data.MySqlClient2" : providerName).CreateConnection();
                    dbConnection.ConnectionString = connectionString;
                    dbConnection.Open();
                    if (IsMySql) dbConnection.Execute("SET SQL_MODE = 'ANSI'");
                }
                return dbConnection;
            }
        }

        private DbTransaction Transaction
        {
            get
            {
                if (dbTransaction == null) dbTransaction = Connection.BeginTransaction(IsolationLevel.ReadCommitted);
                return dbTransaction;
            }
        }

        public AcquisitionsUnit FindAcquisitionsUnit(Guid? id) => Query<AcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit WHERE id = @id", new { id }).SingleOrDefault();
        public AddressType FindAddressType(Guid? id) => Query<AddressType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype WHERE id = @id", new { id }).SingleOrDefault();
        public Alert FindAlert(Guid? id) => Query<Alert>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert WHERE id = @id", new { id }).SingleOrDefault();
        public AlternativeTitleType FindAlternativeTitleType(Guid? id) => Query<AlternativeTitleType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type WHERE id = @id", new { id }).SingleOrDefault();
        public AuditLoan FindAuditLoan(Guid? id) => Query<AuditLoan>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan WHERE id = @id", new { id }).SingleOrDefault();
        public AuthAttempt FindAuthAttempt(Guid? id) => Query<AuthAttempt>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts WHERE id = @id", new { id }).SingleOrDefault();
        public AuthCredentialsHistory FindAuthCredentialsHistory(Guid? id) => Query<AuthCredentialsHistory>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history WHERE id = @id", new { id }).SingleOrDefault();
        public AuthPasswordAction FindAuthPasswordAction(Guid? id) => Query<AuthPasswordAction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action WHERE id = @id", new { id }).SingleOrDefault();
        public BatchGroup FindBatchGroup(Guid? id) => Query<BatchGroup>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_groups WHERE id = @id", new { id }).SingleOrDefault();
        public BatchVoucher FindBatchVoucher(Guid? id) => Query<BatchVoucher>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_vouchers WHERE id = @id", new { id }).SingleOrDefault();
        public BatchVoucherExport FindBatchVoucherExport(Guid? id) => Query<BatchVoucherExport>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", batchgroupid AS \"Batchgroupid\", batchvoucherid AS \"Batchvoucherid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_exports WHERE id = @id", new { id }).SingleOrDefault();
        public BatchVoucherExportConfig FindBatchVoucherExportConfig(Guid? id) => Query<BatchVoucherExportConfig>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", batchgroupid AS \"Batchgroupid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_export_configs WHERE id = @id", new { id }).SingleOrDefault();
        public Block FindBlock(Guid? id) => Query<Block>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks WHERE id = @id", new { id }).SingleOrDefault();
        public BlockCondition FindBlockCondition(Guid? id) => Query<BlockCondition>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_conditions WHERE id = @id", new { id }).SingleOrDefault();
        public BlockLimit FindBlockLimit(Guid? id) => Query<BlockLimit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", conditionid AS \"Conditionid\" FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_limits WHERE id = @id", new { id }).SingleOrDefault();
        public Budget FindBudget(Guid? id) => Query<Budget>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fundid AS \"FundId\", fiscalyearid AS \"FiscalYearId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget WHERE id = @id", new { id }).SingleOrDefault();
        public CallNumberType FindCallNumberType(Guid? id) => Query<CallNumberType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type WHERE id = @id", new { id }).SingleOrDefault();
        public Campus FindCampus(Guid? id) => Query<Campus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus WHERE id = @id", new { id }).SingleOrDefault();
        public CancellationReason FindCancellationReason(Guid? id) => Query<CancellationReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason WHERE id = @id", new { id }).SingleOrDefault();
        public Category FindCategory(Guid? id) => Query<Category>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories WHERE id = @id", new { id }).SingleOrDefault();
        public CheckIn FindCheckIn(Guid? id) => Query<CheckIn>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}check_in WHERE id = @id", new { id }).SingleOrDefault();
        public CirculationRule FindCirculationRule(Guid? id) => Query<CirculationRule>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules WHERE id = @id", new { id }).SingleOrDefault();
        public ClassificationType FindClassificationType(Guid? id) => Query<ClassificationType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type WHERE id = @id", new { id }).SingleOrDefault();
        public CloseReason FindCloseReason(Guid? id) => Query<CloseReason>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reasons_for_closure WHERE id = @id", new { id }).SingleOrDefault();
        public Comment FindComment(Guid? id) => Query<Comment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments WHERE id = @id", new { id }).SingleOrDefault();
        public Configuration FindConfiguration(Guid? id) => Query<Configuration>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data WHERE id = @id", new { id }).SingleOrDefault();
        public Contact FindContact(Guid? id) => Query<Contact>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts WHERE id = @id", new { id }).SingleOrDefault();
        public ContributorNameType FindContributorNameType(Guid? id) => Query<ContributorNameType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type WHERE id = @id", new { id }).SingleOrDefault();
        public ContributorType FindContributorType(Guid? id) => Query<ContributorType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type WHERE id = @id", new { id }).SingleOrDefault();
        public CustomField FindCustomField(Guid? id) => Query<CustomField>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_users{(IsMySql ? "_" : ".")}custom_fields WHERE id = @id", new { id }).SingleOrDefault();
        public Document FindDocument(Guid? id) => Query<Document>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\", document_data AS \"DocumentData\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents WHERE id = @id", new { id }).SingleOrDefault();
        public ElectronicAccessRelationship FindElectronicAccessRelationship(Guid? id) => Query<ElectronicAccessRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship WHERE id = @id", new { id }).SingleOrDefault();
        public ErrorRecord FindErrorRecord(Guid? id) => Query<ErrorRecord>($"SELECT id AS \"Id\", content AS \"Content\", description AS \"Description\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records_lb WHERE id = @id", new { id }).SingleOrDefault();
        public EventLog FindEventLog(Guid? id) => Query<EventLog>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs WHERE id = @id", new { id }).SingleOrDefault();
        public ExportConfigCredential FindExportConfigCredential(Guid? id) => Query<ExportConfigCredential>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", exportconfigid AS \"Exportconfigid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}export_config_credentials WHERE id = @id", new { id }).SingleOrDefault();
        public Fee FindFee(Guid? id) => Query<Fee>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts WHERE id = @id", new { id }).SingleOrDefault();
        public FeeType FindFeeType(Guid? id) => Query<FeeType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ownerid AS \"Ownerid\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines WHERE id = @id", new { id }).SingleOrDefault();
        public FinanceGroup FindFinanceGroup(Guid? id) => Query<FinanceGroup>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups WHERE id = @id", new { id }).SingleOrDefault();
        public FiscalYear FindFiscalYear(Guid? id) => Query<FiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year WHERE id = @id", new { id }).SingleOrDefault();
        public FixedDueDateSchedule FindFixedDueDateSchedule(Guid? id) => Query<FixedDueDateSchedule>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule WHERE id = @id", new { id }).SingleOrDefault();
        public Fund FindFund(Guid? id) => Query<Fund>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ledgerid AS \"LedgerId\", fundtypeid AS \"Fundtypeid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund WHERE id = @id", new { id }).SingleOrDefault();
        public FundType FindFundType(Guid? id) => Query<FundType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type WHERE id = @id", new { id }).SingleOrDefault();
        public Group FindGroup(Guid? id) => Query<Group>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}groups WHERE id = @id", new { id }).SingleOrDefault();
        public GroupFundFiscalYear FindGroupFundFiscalYear(Guid? id) => Query<GroupFundFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", budgetid AS \"Budgetid\", groupid AS \"Groupid\", fundid AS \"Fundid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year WHERE id = @id", new { id }).SingleOrDefault();
        public Holding FindHolding(Guid? id) => Query<Holding>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instanceid AS \"Instanceid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", holdingstypeid AS \"Holdingstypeid\", callnumbertypeid AS \"Callnumbertypeid\", illpolicyid AS \"Illpolicyid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record WHERE id = @id", new { id }).SingleOrDefault();
        public HoldingNoteType FindHoldingNoteType(Guid? id) => Query<HoldingNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type WHERE id = @id", new { id }).SingleOrDefault();
        public HoldingType FindHoldingType(Guid? id) => Query<HoldingType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type WHERE id = @id", new { id }).SingleOrDefault();
        public HridSetting FindHridSetting(Guid? id) => Query<HridSetting>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings WHERE id = @id", new { id }).SingleOrDefault();
        public IdType FindIdType(Guid? id) => Query<IdType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type WHERE id = @id", new { id }).SingleOrDefault();
        public IllPolicy FindIllPolicy(Guid? id) => Query<IllPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy WHERE id = @id", new { id }).SingleOrDefault();
        public Instance FindInstance(Guid? id) => Query<Instance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instancestatusid AS \"Instancestatusid\", modeofissuanceid AS \"Modeofissuanceid\", instancetypeid AS \"Instancetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceFormat FindInstanceFormat(Guid? id) => Query<InstanceFormat>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceNoteType FindInstanceNoteType(Guid? id) => Query<InstanceNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceRelationship FindInstanceRelationship(Guid? id) => Query<InstanceRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", superinstanceid AS \"Superinstanceid\", subinstanceid AS \"Subinstanceid\", instancerelationshiptypeid AS \"Instancerelationshiptypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceRelationshipType FindInstanceRelationshipType(Guid? id) => Query<InstanceRelationshipType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceSourceMarc FindInstanceSourceMarc(Guid? id) => Query<InstanceSourceMarc>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceStatus FindInstanceStatus(Guid? id) => Query<InstanceStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceType FindInstanceType(Guid? id) => Query<InstanceType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type WHERE id = @id", new { id }).SingleOrDefault();
        public Institution FindInstitution(Guid? id) => Query<Institution>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution WHERE id = @id", new { id }).SingleOrDefault();
        public Interface FindInterface(Guid? id) => Query<Interface>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces WHERE id = @id", new { id }).SingleOrDefault();
        public InterfaceCredential FindInterfaceCredential(Guid? id) => Query<InterfaceCredential>($"SELECT id AS \"Id\", jsonb AS \"Content\", interfaceid AS \"Interfaceid\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials WHERE id = @id", new { id }).SingleOrDefault();
        public Invoice FindInvoice(Guid? id) => Query<Invoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", batchgroupid AS \"Batchgroupid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices WHERE id = @id", new { id }).SingleOrDefault();
        public InvoiceItem FindInvoiceItem(Guid? id) => Query<InvoiceItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines WHERE id = @id", new { id }).SingleOrDefault();
        public InvoiceTransactionSummary FindInvoiceTransactionSummary(Guid? id) => Query<InvoiceTransactionSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}invoice_transaction_summaries WHERE id = @id", new { id }).SingleOrDefault();
        public Item FindItem(Guid? id) => Query<Item>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", holdingsrecordid AS \"Holdingsrecordid\", permanentloantypeid AS \"Permanentloantypeid\", temporaryloantypeid AS \"Temporaryloantypeid\", materialtypeid AS \"Materialtypeid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", effectivelocationid AS \"Effectivelocationid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item WHERE id = @id", new { id }).SingleOrDefault();
        public ItemDamagedStatus FindItemDamagedStatus(Guid? id) => Query<ItemDamagedStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status WHERE id = @id", new { id }).SingleOrDefault();
        public ItemNoteType FindItemNoteType(Guid? id) => Query<ItemNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type WHERE id = @id", new { id }).SingleOrDefault();
        public JobExecution FindJobExecution(Guid? id) => Query<JobExecution>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions WHERE id = @id", new { id }).SingleOrDefault();
        public JobExecutionProgress FindJobExecutionProgress(Guid? id) => Query<JobExecutionProgress>($"SELECT id AS \"Id\", jsonb AS \"Content\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_progress WHERE id = @id", new { id }).SingleOrDefault();
        public JobExecutionSourceChunk FindJobExecutionSourceChunk(Guid? id) => Query<JobExecutionSourceChunk>($"SELECT id AS \"Id\", jsonb AS \"Content\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks WHERE id = @id", new { id }).SingleOrDefault();
        public JournalRecord FindJournalRecord(Guid? id) => Query<JournalRecord>($"SELECT id AS \"Id\", job_execution_id AS \"JobExecutionId\", source_id AS \"SourceId\", entity_type AS \"EntityType\", entity_id AS \"EntityId\", entity_hrid AS \"EntityHrid\", action_type AS \"ActionType\", action_status AS \"ActionStatus\", action_date AS \"ActionDate\", source_record_order AS \"SourceRecordOrder\", error AS \"Error\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records WHERE id = @id", new { id }).SingleOrDefault();
        public Ledger FindLedger(Guid? id) => Query<Ledger>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearoneid AS \"Fiscalyearoneid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger WHERE id = @id", new { id }).SingleOrDefault();
        public LedgerFiscalYear FindLedgerFiscalYear(Guid? id) => Query<LedgerFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", ledgerid AS \"Ledgerid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy WHERE id = @id", new { id }).SingleOrDefault();
        public Library FindLibrary(Guid? id) => Query<Library>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", campusid AS \"Campusid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary WHERE id = @id", new { id }).SingleOrDefault();
        public Loan FindLoan(Guid? id) => Query<Loan>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan WHERE id = @id", new { id }).SingleOrDefault();
        public LoanPolicy FindLoanPolicy(Guid? id) => Query<LoanPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", loanspolicy_fixedduedatescheduleid AS \"LoanspolicyFixedduedatescheduleid\", renewalspolicy_alternatefixedduedatescheduleid AS \"RenewalspolicyAlternatefixedduedatescheduleid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy WHERE id = @id", new { id }).SingleOrDefault();
        public LoanType FindLoanType(Guid? id) => Query<LoanType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type WHERE id = @id", new { id }).SingleOrDefault();
        public Location FindLocation(Guid? id) => Query<Location>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\", campusid AS \"Campusid\", libraryid AS \"Libraryid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location WHERE id = @id", new { id }).SingleOrDefault();
        public Login FindLogin(Guid? id) => Query<Login>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials WHERE id = @id", new { id }).SingleOrDefault();
        public LostItemFeePolicy FindLostItemFeePolicy(Guid? id) => Query<LostItemFeePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy WHERE id = @id", new { id }).SingleOrDefault();
        public MappingRule FindMappingRule(Guid? id) => Query<MappingRule>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules WHERE id = @id", new { id }).SingleOrDefault();
        public MarcRecord FindMarcRecord(Guid? id) => Query<MarcRecord>($"SELECT id AS \"Id\", content AS \"Content\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records_lb WHERE id = @id", new { id }).SingleOrDefault();
        public MaterialType FindMaterialType(Guid? id) => Query<MaterialType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type WHERE id = @id", new { id }).SingleOrDefault();
        public ModeOfIssuance FindModeOfIssuance(Guid? id) => Query<ModeOfIssuance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance WHERE id = @id", new { id }).SingleOrDefault();
        public NatureOfContentTerm FindNatureOfContentTerm(Guid? id) => Query<NatureOfContentTerm>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term WHERE id = @id", new { id }).SingleOrDefault();
        public Note FindNote(Guid? id) => Query<Note>($"SELECT id AS \"Id\", jsonb AS \"Content\", temporary_type_id AS \"TemporaryTypeId\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data WHERE id = @id", new { id }).SingleOrDefault();
        public NoteType FindNoteType(Guid? id) => Query<NoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type WHERE id = @id", new { id }).SingleOrDefault();
        public Order FindOrder(Guid? id) => Query<Order>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order WHERE id = @id", new { id }).SingleOrDefault();
        public OrderInvoice FindOrderInvoice(Guid? id) => Query<OrderInvoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship WHERE id = @id", new { id }).SingleOrDefault();
        public OrderItem FindOrderItem(Guid? id) => Query<OrderItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line WHERE id = @id", new { id }).SingleOrDefault();
        public OrderTemplate FindOrderTemplate(Guid? id) => Query<OrderTemplate>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates WHERE id = @id", new { id }).SingleOrDefault();
        public OrderTransactionSummary FindOrderTransactionSummary(Guid? id) => Query<OrderTransactionSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries WHERE id = @id", new { id }).SingleOrDefault();
        public Organization FindOrganization(Guid? id) => Query<Organization>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations WHERE id = @id", new { id }).SingleOrDefault();
        public OverdueFinePolicy FindOverdueFinePolicy(Guid? id) => Query<OverdueFinePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy WHERE id = @id", new { id }).SingleOrDefault();
        public Owner FindOwner(Guid? id) => Query<Owner>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners WHERE id = @id", new { id }).SingleOrDefault();
        public PatronActionSession FindPatronActionSession(Guid? id) => Query<PatronActionSession>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session WHERE id = @id", new { id }).SingleOrDefault();
        public PatronNoticePolicy FindPatronNoticePolicy(Guid? id) => Query<PatronNoticePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy WHERE id = @id", new { id }).SingleOrDefault();
        public Payment FindPayment(Guid? id) => Query<Payment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions WHERE id = @id", new { id }).SingleOrDefault();
        public PaymentMethod FindPaymentMethod(Guid? id) => Query<PaymentMethod>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments WHERE id = @id", new { id }).SingleOrDefault();
        public Permission FindPermission(Guid? id) => Query<Permission>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions WHERE id = @id", new { id }).SingleOrDefault();
        public PermissionsUser FindPermissionsUser(Guid? id) => Query<PermissionsUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users WHERE id = @id", new { id }).SingleOrDefault();
        public Piece FindPiece(Guid? id) => Query<Piece>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", polineid AS \"Polineid\", titleid AS \"Titleid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces WHERE id = @id", new { id }).SingleOrDefault();
        public PrecedingSucceedingTitle FindPrecedingSucceedingTitle(Guid? id) => Query<PrecedingSucceedingTitle>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", precedinginstanceid AS \"Precedinginstanceid\", succeedinginstanceid AS \"Succeedinginstanceid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}preceding_succeeding_title WHERE id = @id", new { id }).SingleOrDefault();
        public Prefix FindPrefix(Guid? id) => Query<Prefix>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}prefixes WHERE id = @id", new { id }).SingleOrDefault();
        public Proxy FindProxy(Guid? id) => Query<Proxy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor WHERE id = @id", new { id }).SingleOrDefault();
        public RawRecord FindRawRecord(Guid? id) => Query<RawRecord>($"SELECT id AS \"Id\", content AS \"Content\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records_lb WHERE id = @id", new { id }).SingleOrDefault();
        public Record FindRecord(Guid? id) => Query<Record>($"SELECT id AS \"Id\", snapshot_id AS \"SnapshotId\", matched_id AS \"MatchedId\", generation AS \"Generation\", record_type AS \"RecordType\", instance_id AS \"InstanceId\", state AS \"State\", leader_record_status AS \"LeaderRecordStatus\", \"order\" AS \"Order\", suppress_discovery AS \"SuppressDiscovery\", created_by_user_id AS \"CreationUserId\", created_date AS \"CreationTime\", updated_by_user_id AS \"LastWriteUserId\", updated_date AS \"LastWriteTime\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records_lb WHERE id = @id", new { id }).SingleOrDefault();
        public RefundReason FindRefundReason(Guid? id) => Query<RefundReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds WHERE id = @id", new { id }).SingleOrDefault();
        public ReportingCode FindReportingCode(Guid? id) => Query<ReportingCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code WHERE id = @id", new { id }).SingleOrDefault();
        public Request FindRequest(Guid? id) => Query<Request>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", cancellationreasonid AS \"Cancellationreasonid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request WHERE id = @id", new { id }).SingleOrDefault();
        public RequestPolicy FindRequestPolicy(Guid? id) => Query<RequestPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy WHERE id = @id", new { id }).SingleOrDefault();
        public ScheduledNotice FindScheduledNotice(Guid? id) => Query<ScheduledNotice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice WHERE id = @id", new { id }).SingleOrDefault();
        public ServicePoint FindServicePoint(Guid? id) => Query<ServicePoint>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point WHERE id = @id", new { id }).SingleOrDefault();
        public ServicePointUser FindServicePointUser(Guid? id) => Query<ServicePointUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", defaultservicepointid AS \"Defaultservicepointid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user WHERE id = @id", new { id }).SingleOrDefault();
        public Snapshot FindSnapshot(Guid? id) => Query<Snapshot>($"SELECT id AS \"Id\", status AS \"Status\", processing_started_date AS \"ProcessingStartedDate\", created_by_user_id AS \"CreationUserId\", created_date AS \"CreationTime\", updated_by_user_id AS \"LastWriteUserId\", updated_date AS \"LastWriteTime\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots_lb WHERE id = @id", new { id }).SingleOrDefault();
        public StaffSlip FindStaffSlip(Guid? id) => Query<StaffSlip>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips WHERE id = @id", new { id }).SingleOrDefault();
        public StatisticalCode FindStatisticalCode(Guid? id) => Query<StatisticalCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", statisticalcodetypeid AS \"Statisticalcodetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code WHERE id = @id", new { id }).SingleOrDefault();
        public StatisticalCodeType FindStatisticalCodeType(Guid? id) => Query<StatisticalCodeType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type WHERE id = @id", new { id }).SingleOrDefault();
        public Suffix FindSuffix(Guid? id) => Query<Suffix>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}suffixes WHERE id = @id", new { id }).SingleOrDefault();
        public Tag FindTag(Guid? id) => Query<Tag>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags WHERE id = @id", new { id }).SingleOrDefault();
        public Template FindTemplate(Guid? id) => Query<Template>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template WHERE id = @id", new { id }).SingleOrDefault();
        public TemporaryInvoiceTransaction FindTemporaryInvoiceTransaction(Guid? id) => Query<TemporaryInvoiceTransaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", sourceinvoiceid AS \"Sourceinvoiceid\", paymentencumbranceid AS \"Paymentencumbranceid\", fromfundid AS \"Fromfundid\", tofundid AS \"Tofundid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_invoice_transactions WHERE id = @id", new { id }).SingleOrDefault();
        public TemporaryOrderTransaction FindTemporaryOrderTransaction(Guid? id) => Query<TemporaryOrderTransaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", encumbrance_sourcepurchaseorderid AS \"EncumbranceSourcepurchaseorderid\", fiscalyearid AS \"Fiscalyearid\", fromfundid AS \"Fromfundid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_order_transactions WHERE id = @id", new { id }).SingleOrDefault();
        public Title FindTitle(Guid? id) => Query<Title>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", polineid AS \"Polineid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}titles WHERE id = @id", new { id }).SingleOrDefault();
        public Transaction FindTransaction(Guid? id) => Query<Transaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearid AS \"Fiscalyearid\", fromfundid AS \"Fromfundid\", sourcefiscalyearid AS \"Sourcefiscalyearid\", tofundid AS \"Tofundid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction WHERE id = @id", new { id }).SingleOrDefault();
        public TransferAccount FindTransferAccount(Guid? id) => Query<TransferAccount>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers WHERE id = @id", new { id }).SingleOrDefault();
        public TransferCriteria FindTransferCriteria(Guid? id) => Query<TransferCriteria>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria WHERE id = @id", new { id }).SingleOrDefault();
        public User FindUser(Guid? id) => Query<User>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", patrongroup AS \"Patrongroup\" FROM diku_mod_users{(IsMySql ? "_" : ".")}users WHERE id = @id", new { id }).SingleOrDefault();
        public UserAcquisitionsUnit FindUserAcquisitionsUnit(Guid? id) => Query<UserAcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", acquisitionsunitid AS \"Acquisitionsunitid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership WHERE id = @id", new { id }).SingleOrDefault();
        public UserRequestPreference FindUserRequestPreference(Guid? id) => Query<UserRequestPreference>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference WHERE id = @id", new { id }).SingleOrDefault();
        public UserSummary FindUserSummary(Guid? id) => Query<UserSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}user_summary WHERE id = @id", new { id }).SingleOrDefault();
        public Voucher FindVoucher(Guid? id) => Query<Voucher>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\", batchgroupid AS \"Batchgroupid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers WHERE id = @id", new { id }).SingleOrDefault();
        public VoucherItem FindVoucherItem(Guid? id) => Query<VoucherItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", voucherid AS \"Voucherid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines WHERE id = @id", new { id }).SingleOrDefault();
        public WaiveReason FindWaiveReason(Guid? id) => Query<WaiveReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives WHERE id = @id", new { id }).SingleOrDefault();

        public IEnumerable<AcquisitionsUnit> AcquisitionsUnits(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AddressType> AddressTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AddressType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Alert> Alerts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Alert>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AlternativeTitleType> AlternativeTitleTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AlternativeTitleType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuditLoan> AuditLoans(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuditLoan>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuthAttempt> AuthAttempts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuthAttempt>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuthCredentialsHistory> AuthCredentialsHistories(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuthCredentialsHistory>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuthPasswordAction> AuthPasswordActions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuthPasswordAction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<BatchGroup> BatchGroups(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<BatchGroup>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_groups{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<BatchVoucher> BatchVouchers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<BatchVoucher>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_vouchers{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<BatchVoucherExport> BatchVoucherExports(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<BatchVoucherExport>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", batchgroupid AS \"Batchgroupid\", batchvoucherid AS \"Batchvoucherid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_exports{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<BatchVoucherExportConfig> BatchVoucherExportConfigs(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<BatchVoucherExportConfig>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", batchgroupid AS \"Batchgroupid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_export_configs{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Block> Blocks(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Block>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<BlockCondition> BlockConditions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<BlockCondition>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_conditions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<BlockLimit> BlockLimits(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<BlockLimit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", conditionid AS \"Conditionid\" FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_limits{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Budget> Budgets(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Budget>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fundid AS \"FundId\", fiscalyearid AS \"FiscalYearId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CallNumberType> CallNumberTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CallNumberType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Campus> Campuses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Campus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CancellationReason> CancellationReasons(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CancellationReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Category> Categories(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Category>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CheckIn> CheckIns(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CheckIn>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}check_in{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CirculationRule> CirculationRules(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CirculationRule>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ClassificationType> ClassificationTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ClassificationType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CloseReason> CloseReasons(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CloseReason>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reasons_for_closure{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Comment> Comments(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Comment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Configuration> Configurations(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Configuration>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Contact> Contacts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Contact>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ContributorNameType> ContributorNameTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ContributorNameType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ContributorType> ContributorTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ContributorType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CustomField> CustomFields(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CustomField>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_users{(IsMySql ? "_" : ".")}custom_fields{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Document> Documents(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Document>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\", document_data AS \"DocumentData\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ElectronicAccessRelationship> ElectronicAccessRelationships(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ElectronicAccessRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ErrorRecord> ErrorRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ErrorRecord>($"SELECT id AS \"Id\", content AS \"Content\", description AS \"Description\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records_lb{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<EventLog> EventLogs(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<EventLog>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ExportConfigCredential> ExportConfigCredentials(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ExportConfigCredential>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", exportconfigid AS \"Exportconfigid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}export_config_credentials{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Fee> Fees(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Fee>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FeeType> FeeTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FeeType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ownerid AS \"Ownerid\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FinanceGroup> FinanceGroups(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FinanceGroup>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FiscalYear> FiscalYears(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FixedDueDateSchedule> FixedDueDateSchedules(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FixedDueDateSchedule>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Fund> Funds(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Fund>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ledgerid AS \"LedgerId\", fundtypeid AS \"Fundtypeid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FundType> FundTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FundType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Group> Groups(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Group>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<GroupFundFiscalYear> GroupFundFiscalYears(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<GroupFundFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", budgetid AS \"Budgetid\", groupid AS \"Groupid\", fundid AS \"Fundid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Holding> Holdings(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Holding>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instanceid AS \"Instanceid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", holdingstypeid AS \"Holdingstypeid\", callnumbertypeid AS \"Callnumbertypeid\", illpolicyid AS \"Illpolicyid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<HoldingNoteType> HoldingNoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<HoldingNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<HoldingType> HoldingTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<HoldingType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<HridSetting> HridSettings(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<HridSetting>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<IdType> IdTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<IdType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<IllPolicy> IllPolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<IllPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Instance> Instances(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Instance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instancestatusid AS \"Instancestatusid\", modeofissuanceid AS \"Modeofissuanceid\", instancetypeid AS \"Instancetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceFormat> InstanceFormats(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceFormat>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceNoteType> InstanceNoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceRelationship> InstanceRelationships(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", superinstanceid AS \"Superinstanceid\", subinstanceid AS \"Subinstanceid\", instancerelationshiptypeid AS \"Instancerelationshiptypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceRelationshipType> InstanceRelationshipTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceRelationshipType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceSourceMarc> InstanceSourceMarcs(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceSourceMarc>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceStatus> InstanceStatuses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceType> InstanceTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Institution> Institutions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Institution>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Interface> Interfaces(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Interface>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InterfaceCredential> InterfaceCredentials(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InterfaceCredential>($"SELECT id AS \"Id\", jsonb AS \"Content\", interfaceid AS \"Interfaceid\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Invoice> Invoices(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Invoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", batchgroupid AS \"Batchgroupid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InvoiceItem> InvoiceItems(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InvoiceItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InvoiceTransactionSummary> InvoiceTransactionSummaries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InvoiceTransactionSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}invoice_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Item> Items(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Item>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", holdingsrecordid AS \"Holdingsrecordid\", permanentloantypeid AS \"Permanentloantypeid\", temporaryloantypeid AS \"Temporaryloantypeid\", materialtypeid AS \"Materialtypeid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", effectivelocationid AS \"Effectivelocationid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ItemDamagedStatus> ItemDamagedStatuses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ItemDamagedStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ItemNoteType> ItemNoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ItemNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JobExecution> JobExecutions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JobExecution>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JobExecutionProgress> JobExecutionProgresses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JobExecutionProgress>($"SELECT id AS \"Id\", jsonb AS \"Content\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_progress{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JobExecutionSourceChunk> JobExecutionSourceChunks(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JobExecutionSourceChunk>($"SELECT id AS \"Id\", jsonb AS \"Content\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JournalRecord> JournalRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JournalRecord>($"SELECT id AS \"Id\", job_execution_id AS \"JobExecutionId\", source_id AS \"SourceId\", entity_type AS \"EntityType\", entity_id AS \"EntityId\", entity_hrid AS \"EntityHrid\", action_type AS \"ActionType\", action_status AS \"ActionStatus\", action_date AS \"ActionDate\", source_record_order AS \"SourceRecordOrder\", error AS \"Error\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Ledger> Ledgers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Ledger>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearoneid AS \"Fiscalyearoneid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LedgerFiscalYear> LedgerFiscalYears(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LedgerFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", ledgerid AS \"Ledgerid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Library> Libraries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Library>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", campusid AS \"Campusid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Loan> Loans(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Loan>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LoanPolicy> LoanPolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LoanPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", loanspolicy_fixedduedatescheduleid AS \"LoanspolicyFixedduedatescheduleid\", renewalspolicy_alternatefixedduedatescheduleid AS \"RenewalspolicyAlternatefixedduedatescheduleid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LoanType> LoanTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LoanType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Location> Locations(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Location>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\", campusid AS \"Campusid\", libraryid AS \"Libraryid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Login> Logins(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Login>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LostItemFeePolicy> LostItemFeePolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LostItemFeePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<MappingRule> MappingRules(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<MappingRule>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<MarcRecord> MarcRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<MarcRecord>($"SELECT id AS \"Id\", content AS \"Content\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records_lb{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<MaterialType> MaterialTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<MaterialType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ModeOfIssuance> ModeOfIssuances(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ModeOfIssuance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<NatureOfContentTerm> NatureOfContentTerms(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<NatureOfContentTerm>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Note> Notes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Note>($"SELECT id AS \"Id\", jsonb AS \"Content\", temporary_type_id AS \"TemporaryTypeId\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<NoteType> NoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<NoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Order> Orders(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Order>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderInvoice> OrderInvoices(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderInvoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderItem> OrderItems(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderTemplate> OrderTemplates(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderTemplate>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderTransactionSummary> OrderTransactionSummaries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderTransactionSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Organization> Organizations(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Organization>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OverdueFinePolicy> OverdueFinePolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OverdueFinePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Owner> Owners(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Owner>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PatronActionSession> PatronActionSessions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PatronActionSession>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PatronNoticePolicy> PatronNoticePolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PatronNoticePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Payment> Payments(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Payment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PaymentMethod> PaymentMethods(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PaymentMethod>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Permission> Permissions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Permission>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PermissionsUser> PermissionsUsers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PermissionsUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Piece> Pieces(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Piece>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", polineid AS \"Polineid\", titleid AS \"Titleid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PrecedingSucceedingTitle> PrecedingSucceedingTitles(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PrecedingSucceedingTitle>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", precedinginstanceid AS \"Precedinginstanceid\", succeedinginstanceid AS \"Succeedinginstanceid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}preceding_succeeding_title{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Prefix> Prefixes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Prefix>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}prefixes{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Proxy> Proxies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Proxy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<RawRecord> RawRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<RawRecord>($"SELECT id AS \"Id\", content AS \"Content\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records_lb{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Record> Records(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Record>($"SELECT id AS \"Id\", snapshot_id AS \"SnapshotId\", matched_id AS \"MatchedId\", generation AS \"Generation\", record_type AS \"RecordType\", instance_id AS \"InstanceId\", state AS \"State\", leader_record_status AS \"LeaderRecordStatus\", \"order\" AS \"Order\", suppress_discovery AS \"SuppressDiscovery\", created_by_user_id AS \"CreationUserId\", created_date AS \"CreationTime\", updated_by_user_id AS \"LastWriteUserId\", updated_date AS \"LastWriteTime\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records_lb{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<RefundReason> RefundReasons(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<RefundReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ReportingCode> ReportingCodes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ReportingCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Request> Requests(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Request>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", cancellationreasonid AS \"Cancellationreasonid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<RequestPolicy> RequestPolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<RequestPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ScheduledNotice> ScheduledNotices(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ScheduledNotice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ServicePoint> ServicePoints(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ServicePoint>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ServicePointUser> ServicePointUsers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ServicePointUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", defaultservicepointid AS \"Defaultservicepointid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Snapshot> Snapshots(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Snapshot>($"SELECT id AS \"Id\", status AS \"Status\", processing_started_date AS \"ProcessingStartedDate\", created_by_user_id AS \"CreationUserId\", created_date AS \"CreationTime\", updated_by_user_id AS \"LastWriteUserId\", updated_date AS \"LastWriteTime\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots_lb{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<StaffSlip> StaffSlips(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<StaffSlip>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<StatisticalCode> StatisticalCodes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<StatisticalCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", statisticalcodetypeid AS \"Statisticalcodetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<StatisticalCodeType> StatisticalCodeTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<StatisticalCodeType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Suffix> Suffixes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Suffix>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}suffixes{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Tag> Tags(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Tag>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Template> Templates(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Template>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<TemporaryInvoiceTransaction> TemporaryInvoiceTransactions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<TemporaryInvoiceTransaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", sourceinvoiceid AS \"Sourceinvoiceid\", paymentencumbranceid AS \"Paymentencumbranceid\", fromfundid AS \"Fromfundid\", tofundid AS \"Tofundid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_invoice_transactions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<TemporaryOrderTransaction> TemporaryOrderTransactions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<TemporaryOrderTransaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", encumbrance_sourcepurchaseorderid AS \"EncumbranceSourcepurchaseorderid\", fiscalyearid AS \"Fiscalyearid\", fromfundid AS \"Fromfundid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_order_transactions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Title> Titles(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Title>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", polineid AS \"Polineid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}titles{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Transaction> Transactions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Transaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearid AS \"Fiscalyearid\", fromfundid AS \"Fromfundid\", sourcefiscalyearid AS \"Sourcefiscalyearid\", tofundid AS \"Tofundid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<TransferAccount> TransferAccounts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<TransferAccount>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<TransferCriteria> TransferCriterias(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<TransferCriteria>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<User> Users(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<User>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", patrongroup AS \"Patrongroup\" FROM diku_mod_users{(IsMySql ? "_" : ".")}users{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<UserAcquisitionsUnit> UserAcquisitionsUnits(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<UserAcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", acquisitionsunitid AS \"Acquisitionsunitid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<UserRequestPreference> UserRequestPreferences(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<UserRequestPreference>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<UserSummary> UserSummaries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<UserSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}user_summary{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Voucher> Vouchers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Voucher>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\", batchgroupid AS \"Batchgroupid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<VoucherItem> VoucherItems(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<VoucherItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", voucherid AS \"Voucherid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<WaiveReason> WaiveReasons(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<WaiveReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);

        public int CountAcquisitionsUnits(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAddressTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAlerts(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAlternativeTitleTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAuditLoans(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAuthAttempts(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAuthCredentialsHistories(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountAuthPasswordActions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBatchGroups(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBatchVouchers(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_vouchers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBatchVoucherExports(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_exports{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBatchVoucherExportConfigs(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_export_configs{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBlocks(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBlockConditions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_conditions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBlockLimits(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_limits{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountBudgets(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCallNumberTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCampuses(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCancellationReasons(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCategories(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCheckIns(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}check_in{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCirculationRules(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountClassificationTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCloseReasons(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reasons_for_closure{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountComments(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountConfigurations(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountContacts(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountContributorNameTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountContributorTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountCustomFields(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}custom_fields{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountDocuments(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountElectronicAccessRelationships(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountErrorRecords(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountEventLogs(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountExportConfigCredentials(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}export_config_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFees(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFeeTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFinanceGroups(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFiscalYears(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFixedDueDateSchedules(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFunds(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountFundTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountGroups(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountGroupFundFiscalYears(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountHoldings(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountHoldingNoteTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountHoldingTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountHridSettings(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountIdTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountIllPolicies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstances(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceFormats(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceNoteTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceRelationships(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceRelationshipTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceSourceMarcs(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceStatuses(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstanceTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInstitutions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInterfaces(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInterfaceCredentials(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInvoices(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInvoiceItems(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountInvoiceTransactionSummaries(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}invoice_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountItems(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountItemDamagedStatuses(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountItemNoteTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountJobExecutions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountJobExecutionProgresses(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_progress{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountJobExecutionSourceChunks(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountJournalRecords(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLedgers(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLedgerFiscalYears(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLibraries(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLoans(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLoanPolicies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLoanTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLocations(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLogins(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountLostItemFeePolicies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountMappingRules(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountMarcRecords(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountMaterialTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountModeOfIssuances(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountNatureOfContentTerms(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountNotes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountNoteTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOrders(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOrderInvoices(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOrderItems(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOrderTemplates(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOrderTransactionSummaries(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOrganizations(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOverdueFinePolicies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountOwners(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPatronActionSessions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPatronNoticePolicies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPayments(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPaymentMethods(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPermissions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPermissionsUsers(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPieces(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPrecedingSucceedingTitles(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}preceding_succeeding_title{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountPrefixes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}prefixes{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountProxies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountRawRecords(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountRecords(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountRefundReasons(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountReportingCodes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountRequests(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountRequestPolicies(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountScheduledNotices(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountServicePoints(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountServicePointUsers(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountSnapshots(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountStaffSlips(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountStatisticalCodes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountStatisticalCodeTypes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountSuffixes(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}suffixes{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTags(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTemplates(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTemporaryInvoiceTransactions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_invoice_transactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTemporaryOrderTransactions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_order_transactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTitles(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}titles{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTransactions(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTransferAccounts(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountTransferCriterias(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountUsers(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}users{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountUserAcquisitionsUnits(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountUserRequestPreferences(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountUserSummaries(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}user_summary{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountVouchers(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountVoucherItems(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);
        public int CountWaiveReasons(string where = null, object param = null, int? take = null) => Count($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: take);

        public bool AnyAcquisitionsUnits(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAddressTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAlerts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAlternativeTitleTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuditLoans(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuthAttempts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuthCredentialsHistories(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuthPasswordActions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBatchGroups(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBatchVouchers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_vouchers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBatchVoucherExports(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_exports{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBatchVoucherExportConfigs(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_export_configs{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBlocks(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBlockConditions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_conditions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBlockLimits(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_limits{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBudgets(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCallNumberTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCampuses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCancellationReasons(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCategories(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCheckIns(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}check_in{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCirculationRules(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyClassificationTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCloseReasons(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reasons_for_closure{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyComments(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyConfigurations(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyContacts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyContributorNameTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyContributorTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCustomFields(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}custom_fields{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyDocuments(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyElectronicAccessRelationships(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyErrorRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyEventLogs(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyExportConfigCredentials(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}export_config_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFees(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFeeTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFinanceGroups(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFiscalYears(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFixedDueDateSchedules(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFunds(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFundTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyGroups(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyGroupFundFiscalYears(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHoldings(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHoldingNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHoldingTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHridSettings(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyIdTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyIllPolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstances(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceFormats(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceRelationships(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceRelationshipTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceSourceMarcs(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceStatuses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstitutions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInterfaces(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInterfaceCredentials(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInvoices(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInvoiceItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInvoiceTransactionSummaries(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}invoice_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyItemDamagedStatuses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyItemNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyJobExecutions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyJobExecutionProgresses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_progress{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyJobExecutionSourceChunks(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyJournalRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLedgers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLedgerFiscalYears(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLibraries(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLoans(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLoanPolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLoanTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLocations(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLogins(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLostItemFeePolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyMappingRules(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyMarcRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyMaterialTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyModeOfIssuances(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyNatureOfContentTerms(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyNotes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrders(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderInvoices(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderTemplates(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderTransactionSummaries(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrganizations(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOverdueFinePolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOwners(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPatronActionSessions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPatronNoticePolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPayments(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPaymentMethods(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPermissions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPermissionsUsers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPieces(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPrecedingSucceedingTitles(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}preceding_succeeding_title{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPrefixes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}prefixes{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyProxies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRawRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRefundReasons(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyReportingCodes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRequests(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRequestPolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyScheduledNotices(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyServicePoints(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyServicePointUsers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnySnapshots(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots_lb{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyStaffSlips(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyStatisticalCodes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyStatisticalCodeTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnySuffixes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}suffixes{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTags(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTemplates(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTemporaryInvoiceTransactions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_invoice_transactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTemporaryOrderTransactions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_order_transactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTitles(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}titles{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTransactions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTransferAccounts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTransferCriterias(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUsers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}users{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUserAcquisitionsUnits(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUserRequestPreferences(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUserSummaries(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}user_summary{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyVouchers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyVoucherItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyWaiveReasons(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();

        public void Insert(AcquisitionsUnit acquisitionsUnit) => Execute("INSERT INTO diku_mod_orders_storage.acquisitions_unit (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", acquisitionsUnit);
        public void Insert(AddressType addressType) => Execute("INSERT INTO diku_mod_users.addresstype (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", addressType);
        public void Insert(Alert alert) => Execute("INSERT INTO diku_mod_orders_storage.alert (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", alert);
        public void Insert(AlternativeTitleType alternativeTitleType) => Execute("INSERT INTO diku_mod_inventory_storage.alternative_title_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", alternativeTitleType);
        public void Insert(AuditLoan auditLoan) => Execute("INSERT INTO diku_mod_circulation_storage.audit_loan (id, jsonb) VALUES (@Id, @Content::jsonb)", auditLoan);
        public void Insert(AuthAttempt authAttempt) => Execute("INSERT INTO diku_mod_login.auth_attempts (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", authAttempt);
        public void Insert(AuthCredentialsHistory authCredentialsHistory) => Execute("INSERT INTO diku_mod_login.auth_credentials_history (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", authCredentialsHistory);
        public void Insert(AuthPasswordAction authPasswordAction) => Execute("INSERT INTO diku_mod_login.auth_password_action (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", authPasswordAction);
        public void Insert(BatchGroup batchGroup) => Execute("INSERT INTO diku_mod_invoice_storage.batch_groups (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", batchGroup);
        public void Insert(BatchVoucher batchVoucher) => Execute("INSERT INTO diku_mod_invoice_storage.batch_vouchers (id, jsonb) VALUES (@Id, @Content::jsonb)", batchVoucher);
        public void Insert(BatchVoucherExport batchVoucherExport) => Execute("INSERT INTO diku_mod_invoice_storage.batch_voucher_exports (id, jsonb, creation_date, created_by, batchgroupid, batchvoucherid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Batchgroupid, @Batchvoucherid)", batchVoucherExport);
        public void Insert(BatchVoucherExportConfig batchVoucherExportConfig) => Execute("INSERT INTO diku_mod_invoice_storage.batch_voucher_export_configs (id, jsonb, creation_date, created_by, batchgroupid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Batchgroupid)", batchVoucherExportConfig);
        public void Insert(Block block) => Execute("INSERT INTO diku_mod_feesfines.manualblocks (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", block);
        public void Insert(BlockCondition blockCondition) => Execute("INSERT INTO diku_mod_patron_blocks.patron_block_conditions (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", blockCondition);
        public void Insert(BlockLimit blockLimit) => Execute("INSERT INTO diku_mod_patron_blocks.patron_block_limits (id, jsonb, creation_date, created_by, conditionid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Conditionid)", blockLimit);
        public void Insert(Budget budget) => Execute("INSERT INTO diku_mod_finance_storage.budget (id, jsonb, creation_date, created_by, fundid, fiscalyearid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @FundId, @FiscalYearId)", budget);
        public void Insert(CallNumberType callNumberType) => Execute("INSERT INTO diku_mod_inventory_storage.call_number_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", callNumberType);
        public void Insert(Campus campus) => Execute("INSERT INTO diku_mod_inventory_storage.loccampus (id, jsonb, creation_date, created_by, institutionid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Institutionid)", campus);
        public void Insert(CancellationReason cancellationReason) => Execute("INSERT INTO diku_mod_circulation_storage.cancellation_reason (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", cancellationReason);
        public void Insert(Category category) => Execute("INSERT INTO diku_mod_organizations_storage.categories (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", category);
        public void Insert(CheckIn checkIn) => Execute("INSERT INTO diku_mod_circulation_storage.check_in (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", checkIn);
        public void Insert(CirculationRule circulationRule) => Execute("INSERT INTO diku_mod_circulation_storage.circulation_rules (id, jsonb, lock) VALUES (@Id, @Content::jsonb, @Lock)", circulationRule);
        public void Insert(ClassificationType classificationType) => Execute("INSERT INTO diku_mod_inventory_storage.classification_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", classificationType);
        public void Insert(CloseReason closeReason) => Execute("INSERT INTO diku_mod_orders_storage.reasons_for_closure (id, jsonb) VALUES (@Id, @Content::jsonb)", closeReason);
        public void Insert(Comment comment) => Execute("INSERT INTO diku_mod_feesfines.comments (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", comment);
        public void Insert(Configuration configuration) => Execute("INSERT INTO diku_mod_configuration.config_data (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", configuration);
        public void Insert(Contact contact) => Execute("INSERT INTO diku_mod_organizations_storage.contacts (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", contact);
        public void Insert(ContributorNameType contributorNameType) => Execute("INSERT INTO diku_mod_inventory_storage.contributor_name_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", contributorNameType);
        public void Insert(ContributorType contributorType) => Execute("INSERT INTO diku_mod_inventory_storage.contributor_type (id, jsonb) VALUES (@Id, @Content::jsonb)", contributorType);
        public void Insert(CustomField customField) => Execute("INSERT INTO diku_mod_users.custom_fields (id, jsonb) VALUES (@Id, @Content::jsonb)", customField);
        public void Insert(Document document) => Execute("INSERT INTO diku_mod_invoice_storage.documents (id, jsonb, creation_date, created_by, invoiceid, document_data) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Invoiceid, @DocumentData)", document);
        public void Insert(ElectronicAccessRelationship electronicAccessRelationship) => Execute("INSERT INTO diku_mod_inventory_storage.electronic_access_relationship (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", electronicAccessRelationship);
        public void Insert(ErrorRecord errorRecord) => Execute("INSERT INTO diku_mod_source_record_storage.error_records_lb (id, content, description) VALUES (@Id, @Content, @Description)", errorRecord);
        public void Insert(EventLog eventLog) => Execute("INSERT INTO diku_mod_login.event_logs (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", eventLog);
        public void Insert(ExportConfigCredential exportConfigCredential) => Execute("INSERT INTO diku_mod_invoice_storage.export_config_credentials (id, jsonb, creation_date, created_by, exportconfigid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Exportconfigid)", exportConfigCredential);
        public void Insert(Fee fee) => Execute("INSERT INTO diku_mod_feesfines.accounts (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", fee);
        public void Insert(FeeType feeType) => Execute("INSERT INTO diku_mod_feesfines.feefines (id, jsonb, creation_date, created_by, ownerid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Ownerid)", feeType);
        public void Insert(FinanceGroup financeGroup) => Execute("INSERT INTO diku_mod_finance_storage.groups (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", financeGroup);
        public void Insert(FiscalYear fiscalYear) => Execute("INSERT INTO diku_mod_finance_storage.fiscal_year (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", fiscalYear);
        public void Insert(FixedDueDateSchedule fixedDueDateSchedule) => Execute("INSERT INTO diku_mod_circulation_storage.fixed_due_date_schedule (id, jsonb) VALUES (@Id, @Content::jsonb)", fixedDueDateSchedule);
        public void Insert(Fund fund) => Execute("INSERT INTO diku_mod_finance_storage.fund (id, jsonb, creation_date, created_by, ledgerid, fundtypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @LedgerId, @Fundtypeid)", fund);
        public void Insert(FundType fundType) => Execute("INSERT INTO diku_mod_finance_storage.fund_type (id, jsonb) VALUES (@Id, @Content::jsonb)", fundType);
        public void Insert(Group group) => Execute("INSERT INTO diku_mod_users.groups (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", group);
        public void Insert(GroupFundFiscalYear groupFundFiscalYear) => Execute("INSERT INTO diku_mod_finance_storage.group_fund_fiscal_year (id, jsonb, budgetid, groupid, fundid, fiscalyearid) VALUES (@Id, @Content::jsonb, @Budgetid, @Groupid, @Fundid, @Fiscalyearid)", groupFundFiscalYear);
        public void Insert(Holding holding) => Execute("INSERT INTO diku_mod_inventory_storage.holdings_record (id, jsonb, creation_date, created_by, instanceid, permanentlocationid, temporarylocationid, holdingstypeid, callnumbertypeid, illpolicyid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Instanceid, @Permanentlocationid, @Temporarylocationid, @Holdingstypeid, @Callnumbertypeid, @Illpolicyid)", holding);
        public void Insert(HoldingNoteType holdingNoteType) => Execute("INSERT INTO diku_mod_inventory_storage.holdings_note_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", holdingNoteType);
        public void Insert(HoldingType holdingType) => Execute("INSERT INTO diku_mod_inventory_storage.holdings_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", holdingType);
        public void Insert(HridSetting hridSetting) => Execute("INSERT INTO diku_mod_inventory_storage.hrid_settings (id, jsonb, lock) VALUES (@Id, @Content::jsonb, @Lock)", hridSetting);
        public void Insert(IdType idType) => Execute("INSERT INTO diku_mod_inventory_storage.identifier_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", idType);
        public void Insert(IllPolicy illPolicy) => Execute("INSERT INTO diku_mod_inventory_storage.ill_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", illPolicy);
        public void Insert(Instance instance) => Execute("INSERT INTO diku_mod_inventory_storage.instance (id, jsonb, creation_date, created_by, instancestatusid, modeofissuanceid, instancetypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Instancestatusid, @Modeofissuanceid, @Instancetypeid)", instance);
        public void Insert(InstanceFormat instanceFormat) => Execute("INSERT INTO diku_mod_inventory_storage.instance_format (id, jsonb) VALUES (@Id, @Content::jsonb)", instanceFormat);
        public void Insert(InstanceNoteType instanceNoteType) => Execute("INSERT INTO diku_mod_inventory_storage.instance_note_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceNoteType);
        public void Insert(InstanceRelationship instanceRelationship) => Execute("INSERT INTO diku_mod_inventory_storage.instance_relationship (id, jsonb, creation_date, created_by, superinstanceid, subinstanceid, instancerelationshiptypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Superinstanceid, @Subinstanceid, @Instancerelationshiptypeid)", instanceRelationship);
        public void Insert(InstanceRelationshipType instanceRelationshipType) => Execute("INSERT INTO diku_mod_inventory_storage.instance_relationship_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceRelationshipType);
        public void Insert(InstanceSourceMarc instanceSourceMarc) => Execute("INSERT INTO diku_mod_inventory_storage.instance_source_marc (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceSourceMarc);
        public void Insert(InstanceStatus instanceStatus) => Execute("INSERT INTO diku_mod_inventory_storage.instance_status (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceStatus);
        public void Insert(InstanceType instanceType) => Execute("INSERT INTO diku_mod_inventory_storage.instance_type (id, jsonb) VALUES (@Id, @Content::jsonb)", instanceType);
        public void Insert(Institution institution) => Execute("INSERT INTO diku_mod_inventory_storage.locinstitution (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", institution);
        public void Insert(Interface @interface) => Execute("INSERT INTO diku_mod_organizations_storage.interfaces (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", @interface);
        public void Insert(InterfaceCredential interfaceCredential) => Execute("INSERT INTO diku_mod_organizations_storage.interface_credentials (id, jsonb, interfaceid) VALUES (@Id, @Content::jsonb, @Interfaceid)", interfaceCredential);
        public void Insert(Invoice invoice) => Execute("INSERT INTO diku_mod_invoice_storage.invoices (id, jsonb, creation_date, created_by, batchgroupid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Batchgroupid)", invoice);
        public void Insert(InvoiceItem invoiceItem) => Execute("INSERT INTO diku_mod_invoice_storage.invoice_lines (id, jsonb, creation_date, created_by, invoiceid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Invoiceid)", invoiceItem);
        public void Insert(InvoiceTransactionSummary invoiceTransactionSummary) => Execute("INSERT INTO diku_mod_finance_storage.invoice_transaction_summaries (id, jsonb) VALUES (@Id, @Content::jsonb)", invoiceTransactionSummary);
        public void Insert(Item item) => Execute("INSERT INTO diku_mod_inventory_storage.item (id, jsonb, creation_date, created_by, holdingsrecordid, permanentloantypeid, temporaryloantypeid, materialtypeid, permanentlocationid, temporarylocationid, effectivelocationid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Holdingsrecordid, @Permanentloantypeid, @Temporaryloantypeid, @Materialtypeid, @Permanentlocationid, @Temporarylocationid, @Effectivelocationid)", item);
        public void Insert(ItemDamagedStatus itemDamagedStatus) => Execute("INSERT INTO diku_mod_inventory_storage.item_damaged_status (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", itemDamagedStatus);
        public void Insert(ItemNoteType itemNoteType) => Execute("INSERT INTO diku_mod_inventory_storage.item_note_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", itemNoteType);
        public void Insert(JobExecution jobExecution) => Execute("INSERT INTO diku_mod_source_record_manager.job_executions (id, jsonb) VALUES (@Id, @Content::jsonb)", jobExecution);
        public void Insert(JobExecutionProgress jobExecutionProgress) => Execute("INSERT INTO diku_mod_source_record_manager.job_execution_progress (id, jsonb, jobexecutionid) VALUES (@Id, @Content::jsonb, @Jobexecutionid)", jobExecutionProgress);
        public void Insert(JobExecutionSourceChunk jobExecutionSourceChunk) => Execute("INSERT INTO diku_mod_source_record_manager.job_execution_source_chunks (id, jsonb, jobexecutionid) VALUES (@Id, @Content::jsonb, @Jobexecutionid)", jobExecutionSourceChunk);
        public void Insert(JournalRecord journalRecord) => Execute("INSERT INTO diku_mod_source_record_manager.journal_records (id, job_execution_id, source_id, entity_type, entity_id, entity_hrid, action_type, action_status, action_date, source_record_order, error) VALUES (@Id, @JobExecutionId, @SourceId, @EntityType, @EntityId, @EntityHrid, @ActionType, @ActionStatus, @ActionDate, @SourceRecordOrder, @Error)", journalRecord);
        public void Insert(Ledger ledger) => Execute("INSERT INTO diku_mod_finance_storage.ledger (id, jsonb, creation_date, created_by, fiscalyearoneid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Fiscalyearoneid)", ledger);
        public void Insert(LedgerFiscalYear ledgerFiscalYear) => Execute("INSERT INTO diku_mod_finance_storage.ledgerfy (id, jsonb, ledgerid, fiscalyearid) VALUES (@Id, @Content::jsonb, @Ledgerid, @Fiscalyearid)", ledgerFiscalYear);
        public void Insert(Library library) => Execute("INSERT INTO diku_mod_inventory_storage.loclibrary (id, jsonb, creation_date, created_by, campusid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Campusid)", library);
        public void Insert(Loan loan) => Execute("INSERT INTO diku_mod_circulation_storage.loan (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", loan);
        public void Insert(LoanPolicy loanPolicy) => Execute("INSERT INTO diku_mod_circulation_storage.loan_policy (id, jsonb, creation_date, created_by, loanspolicy_fixedduedatescheduleid, renewalspolicy_alternatefixedduedatescheduleid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @LoanspolicyFixedduedatescheduleid, @RenewalspolicyAlternatefixedduedatescheduleid)", loanPolicy);
        public void Insert(LoanType loanType) => Execute("INSERT INTO diku_mod_inventory_storage.loan_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", loanType);
        public void Insert(Location location) => Execute("INSERT INTO diku_mod_inventory_storage.location (id, jsonb, creation_date, created_by, institutionid, campusid, libraryid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Institutionid, @Campusid, @Libraryid)", location);
        public void Insert(Login login) => Execute("INSERT INTO diku_mod_login.auth_credentials (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", login);
        public void Insert(LostItemFeePolicy lostItemFeePolicy) => Execute("INSERT INTO diku_mod_feesfines.lost_item_fee_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", lostItemFeePolicy);
        public void Insert(MappingRule mappingRule) => Execute("INSERT INTO diku_mod_source_record_manager.mapping_rules (id, jsonb) VALUES (@Id, @Content::jsonb)", mappingRule);
        public void Insert(MarcRecord marcRecord) => Execute("INSERT INTO diku_mod_source_record_storage.marc_records_lb (id, content) VALUES (@Id, @Content::jsonb)", marcRecord);
        public void Insert(MaterialType materialType) => Execute("INSERT INTO diku_mod_inventory_storage.material_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", materialType);
        public void Insert(ModeOfIssuance modeOfIssuance) => Execute("INSERT INTO diku_mod_inventory_storage.mode_of_issuance (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", modeOfIssuance);
        public void Insert(NatureOfContentTerm natureOfContentTerm) => Execute("INSERT INTO diku_mod_inventory_storage.nature_of_content_term (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", natureOfContentTerm);
        public void Insert(Note note) => Execute("INSERT INTO diku_mod_notes.note_data (id, jsonb, temporary_type_id) VALUES (@Id, @Content::jsonb, @TemporaryTypeId)", note);
        public void Insert(NoteType noteType) => Execute("INSERT INTO diku_mod_notes.note_type (id, jsonb) VALUES (@Id, @Content::jsonb)", noteType);
        public void Insert(Order order) => Execute("INSERT INTO diku_mod_orders_storage.purchase_order (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", order);
        public void Insert(OrderInvoice orderInvoice) => Execute("INSERT INTO diku_mod_orders_storage.order_invoice_relationship (id, jsonb, purchaseorderid) VALUES (@Id, @Content::jsonb, @Purchaseorderid)", orderInvoice);
        public void Insert(OrderItem orderItem) => Execute("INSERT INTO diku_mod_orders_storage.po_line (id, jsonb, creation_date, created_by, purchaseorderid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Purchaseorderid)", orderItem);
        public void Insert(OrderTemplate orderTemplate) => Execute("INSERT INTO diku_mod_orders_storage.order_templates (id, jsonb) VALUES (@Id, @Content::jsonb)", orderTemplate);
        public void Insert(OrderTransactionSummary orderTransactionSummary) => Execute("INSERT INTO diku_mod_finance_storage.order_transaction_summaries (id, jsonb) VALUES (@Id, @Content::jsonb)", orderTransactionSummary);
        public void Insert(Organization organization) => Execute("INSERT INTO diku_mod_organizations_storage.organizations (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", organization);
        public void Insert(OverdueFinePolicy overdueFinePolicy) => Execute("INSERT INTO diku_mod_feesfines.overdue_fine_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", overdueFinePolicy);
        public void Insert(Owner owner) => Execute("INSERT INTO diku_mod_feesfines.owners (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", owner);
        public void Insert(PatronActionSession patronActionSession) => Execute("INSERT INTO diku_mod_circulation_storage.patron_action_session (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", patronActionSession);
        public void Insert(PatronNoticePolicy patronNoticePolicy) => Execute("INSERT INTO diku_mod_circulation_storage.patron_notice_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", patronNoticePolicy);
        public void Insert(Payment payment) => Execute("INSERT INTO diku_mod_feesfines.feefineactions (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", payment);
        public void Insert(PaymentMethod paymentMethod) => Execute("INSERT INTO diku_mod_feesfines.payments (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", paymentMethod);
        public void Insert(Permission permission) => Execute("INSERT INTO diku_mod_permissions.permissions (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", permission);
        public void Insert(PermissionsUser permissionsUser) => Execute("INSERT INTO diku_mod_permissions.permissions_users (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", permissionsUser);
        public void Insert(Piece piece) => Execute("INSERT INTO diku_mod_orders_storage.pieces (id, jsonb, creation_date, created_by, polineid, titleid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Polineid, @Titleid)", piece);
        public void Insert(PrecedingSucceedingTitle precedingSucceedingTitle) => Execute("INSERT INTO diku_mod_inventory_storage.preceding_succeeding_title (id, jsonb, creation_date, created_by, precedinginstanceid, succeedinginstanceid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Precedinginstanceid, @Succeedinginstanceid)", precedingSucceedingTitle);
        public void Insert(Prefix prefix) => Execute("INSERT INTO diku_mod_orders_storage.prefixes (id, jsonb) VALUES (@Id, @Content::jsonb)", prefix);
        public void Insert(Proxy proxy) => Execute("INSERT INTO diku_mod_users.proxyfor (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", proxy);
        public void Insert(RawRecord rawRecord) => Execute("INSERT INTO diku_mod_source_record_storage.raw_records_lb (id, content) VALUES (@Id, @Content)", rawRecord);
        public void Insert(Record record) => Execute("INSERT INTO diku_mod_source_record_storage.records_lb (id, snapshot_id, matched_id, generation, record_type, instance_id, state, leader_record_status, order, suppress_discovery, created_by_user_id, created_date, updated_by_user_id, updated_date) VALUES (@Id, @SnapshotId, @MatchedId, @Generation, @RecordType, @InstanceId, @State, @LeaderRecordStatus, @Order, @SuppressDiscovery, @CreationUserId, @CreationTime, @LastWriteUserId, @LastWriteTime)", record);
        public void Insert(RefundReason refundReason) => Execute("INSERT INTO diku_mod_feesfines.refunds (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", refundReason);
        public void Insert(ReportingCode reportingCode) => Execute("INSERT INTO diku_mod_orders_storage.reporting_code (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", reportingCode);
        public void Insert(Request request) => Execute("INSERT INTO diku_mod_circulation_storage.request (id, jsonb, creation_date, created_by, cancellationreasonid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Cancellationreasonid)", request);
        public void Insert(RequestPolicy requestPolicy) => Execute("INSERT INTO diku_mod_circulation_storage.request_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", requestPolicy);
        public void Insert(ScheduledNotice scheduledNotice) => Execute("INSERT INTO diku_mod_circulation_storage.scheduled_notice (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", scheduledNotice);
        public void Insert(ServicePoint servicePoint) => Execute("INSERT INTO diku_mod_inventory_storage.service_point (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", servicePoint);
        public void Insert(ServicePointUser servicePointUser) => Execute("INSERT INTO diku_mod_inventory_storage.service_point_user (id, jsonb, creation_date, created_by, defaultservicepointid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Defaultservicepointid)", servicePointUser);
        public void Insert(Snapshot snapshot) => Execute("INSERT INTO diku_mod_source_record_storage.snapshots_lb (id, status, processing_started_date, created_by_user_id, created_date, updated_by_user_id, updated_date) VALUES (@Id, @Status, @ProcessingStartedDate, @CreationUserId, @CreationTime, @LastWriteUserId, @LastWriteTime)", snapshot);
        public void Insert(StaffSlip staffSlip) => Execute("INSERT INTO diku_mod_circulation_storage.staff_slips (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", staffSlip);
        public void Insert(StatisticalCode statisticalCode) => Execute("INSERT INTO diku_mod_inventory_storage.statistical_code (id, jsonb, creation_date, created_by, statisticalcodetypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Statisticalcodetypeid)", statisticalCode);
        public void Insert(StatisticalCodeType statisticalCodeType) => Execute("INSERT INTO diku_mod_inventory_storage.statistical_code_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", statisticalCodeType);
        public void Insert(Suffix suffix) => Execute("INSERT INTO diku_mod_orders_storage.suffixes (id, jsonb) VALUES (@Id, @Content::jsonb)", suffix);
        public void Insert(Tag tag) => Execute("INSERT INTO diku_mod_tags.tags (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", tag);
        public void Insert(Template template) => Execute("INSERT INTO diku_mod_template_engine.template (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", template);
        public void Insert(TemporaryInvoiceTransaction temporaryInvoiceTransaction) => Execute("INSERT INTO diku_mod_finance_storage.temporary_invoice_transactions (id, jsonb, sourceinvoiceid, paymentencumbranceid, fromfundid, tofundid, fiscalyearid) VALUES (@Id, @Content::jsonb, @Sourceinvoiceid, @Paymentencumbranceid, @Fromfundid, @Tofundid, @Fiscalyearid)", temporaryInvoiceTransaction);
        public void Insert(TemporaryOrderTransaction temporaryOrderTransaction) => Execute("INSERT INTO diku_mod_finance_storage.temporary_order_transactions (id, jsonb, encumbrance_sourcepurchaseorderid, fiscalyearid, fromfundid) VALUES (@Id, @Content::jsonb, @EncumbranceSourcepurchaseorderid, @Fiscalyearid, @Fromfundid)", temporaryOrderTransaction);
        public void Insert(Title title) => Execute("INSERT INTO diku_mod_orders_storage.titles (id, jsonb, creation_date, created_by, polineid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Polineid)", title);
        public void Insert(Transaction transaction) => Execute("INSERT INTO diku_mod_finance_storage.transaction (id, jsonb, creation_date, created_by, fiscalyearid, fromfundid, sourcefiscalyearid, tofundid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Fiscalyearid, @Fromfundid, @Sourcefiscalyearid, @Tofundid)", transaction);
        public void Insert(TransferAccount transferAccount) => Execute("INSERT INTO diku_mod_feesfines.transfers (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", transferAccount);
        public void Insert(TransferCriteria transferCriteria) => Execute("INSERT INTO diku_mod_feesfines.transfer_criteria (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", transferCriteria);
        public void Insert(User user) => Execute("INSERT INTO diku_mod_users.users (id, jsonb, creation_date, created_by, patrongroup) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Patrongroup)", user);
        public void Insert(UserAcquisitionsUnit userAcquisitionsUnit) => Execute("INSERT INTO diku_mod_orders_storage.acquisitions_unit_membership (id, jsonb, creation_date, created_by, acquisitionsunitid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Acquisitionsunitid)", userAcquisitionsUnit);
        public void Insert(UserRequestPreference userRequestPreference) => Execute("INSERT INTO diku_mod_circulation_storage.user_request_preference (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", userRequestPreference);
        public void Insert(UserSummary userSummary) => Execute("INSERT INTO diku_mod_patron_blocks.user_summary (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", userSummary);
        public void Insert(Voucher voucher) => Execute("INSERT INTO diku_mod_invoice_storage.vouchers (id, jsonb, creation_date, created_by, invoiceid, batchgroupid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Invoiceid, @Batchgroupid)", voucher);
        public void Insert(VoucherItem voucherItem) => Execute("INSERT INTO diku_mod_invoice_storage.voucher_lines (id, jsonb, creation_date, created_by, voucherid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Voucherid)", voucherItem);
        public void Insert(WaiveReason waiveReason) => Execute("INSERT INTO diku_mod_feesfines.waives (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", waiveReason);

        public int Update(AcquisitionsUnit acquisitionsUnit) => Execute($"UPDATE diku_mod_orders_storage.acquisitions_unit SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", acquisitionsUnit);
        public int Update(AddressType addressType) => Execute($"UPDATE diku_mod_users.addresstype SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", addressType);
        public int Update(Alert alert) => Execute($"UPDATE diku_mod_orders_storage.alert SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", alert);
        public int Update(AlternativeTitleType alternativeTitleType) => Execute($"UPDATE diku_mod_inventory_storage.alternative_title_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", alternativeTitleType);
        public int Update(AuditLoan auditLoan) => Execute($"UPDATE diku_mod_circulation_storage.audit_loan SET jsonb = @Content::jsonb WHERE id = @Id", auditLoan);
        public int Update(AuthAttempt authAttempt) => Execute($"UPDATE diku_mod_login.auth_attempts SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", authAttempt);
        public int Update(AuthCredentialsHistory authCredentialsHistory) => Execute($"UPDATE diku_mod_login.auth_credentials_history SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", authCredentialsHistory);
        public int Update(AuthPasswordAction authPasswordAction) => Execute($"UPDATE diku_mod_login.auth_password_action SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", authPasswordAction);
        public int Update(BatchGroup batchGroup) => Execute($"UPDATE diku_mod_invoice_storage.batch_groups SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", batchGroup);
        public int Update(BatchVoucher batchVoucher) => Execute($"UPDATE diku_mod_invoice_storage.batch_vouchers SET jsonb = @Content::jsonb WHERE id = @Id", batchVoucher);
        public int Update(BatchVoucherExport batchVoucherExport) => Execute($"UPDATE diku_mod_invoice_storage.batch_voucher_exports SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, batchgroupid = @Batchgroupid, batchvoucherid = @Batchvoucherid WHERE id = @Id", batchVoucherExport);
        public int Update(BatchVoucherExportConfig batchVoucherExportConfig) => Execute($"UPDATE diku_mod_invoice_storage.batch_voucher_export_configs SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, batchgroupid = @Batchgroupid WHERE id = @Id", batchVoucherExportConfig);
        public int Update(Block block) => Execute($"UPDATE diku_mod_feesfines.manualblocks SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", block);
        public int Update(BlockCondition blockCondition) => Execute($"UPDATE diku_mod_patron_blocks.patron_block_conditions SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", blockCondition);
        public int Update(BlockLimit blockLimit) => Execute($"UPDATE diku_mod_patron_blocks.patron_block_limits SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, conditionid = @Conditionid WHERE id = @Id", blockLimit);
        public int Update(Budget budget) => Execute($"UPDATE diku_mod_finance_storage.budget SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, fundid = @FundId, fiscalyearid = @FiscalYearId WHERE id = @Id", budget);
        public int Update(CallNumberType callNumberType) => Execute($"UPDATE diku_mod_inventory_storage.call_number_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", callNumberType);
        public int Update(Campus campus) => Execute($"UPDATE diku_mod_inventory_storage.loccampus SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, institutionid = @Institutionid WHERE id = @Id", campus);
        public int Update(CancellationReason cancellationReason) => Execute($"UPDATE diku_mod_circulation_storage.cancellation_reason SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", cancellationReason);
        public int Update(Category category) => Execute($"UPDATE diku_mod_organizations_storage.categories SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", category);
        public int Update(CheckIn checkIn) => Execute($"UPDATE diku_mod_circulation_storage.check_in SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", checkIn);
        public int Update(CirculationRule circulationRule) => Execute($"UPDATE diku_mod_circulation_storage.circulation_rules SET jsonb = @Content::jsonb, lock = @Lock WHERE id = @Id", circulationRule);
        public int Update(ClassificationType classificationType) => Execute($"UPDATE diku_mod_inventory_storage.classification_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", classificationType);
        public int Update(CloseReason closeReason) => Execute($"UPDATE diku_mod_orders_storage.reasons_for_closure SET jsonb = @Content::jsonb WHERE id = @Id", closeReason);
        public int Update(Comment comment) => Execute($"UPDATE diku_mod_feesfines.comments SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", comment);
        public int Update(Configuration configuration) => Execute($"UPDATE diku_mod_configuration.config_data SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", configuration);
        public int Update(Contact contact) => Execute($"UPDATE diku_mod_organizations_storage.contacts SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", contact);
        public int Update(ContributorNameType contributorNameType) => Execute($"UPDATE diku_mod_inventory_storage.contributor_name_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", contributorNameType);
        public int Update(ContributorType contributorType) => Execute($"UPDATE diku_mod_inventory_storage.contributor_type SET jsonb = @Content::jsonb WHERE id = @Id", contributorType);
        public int Update(CustomField customField) => Execute($"UPDATE diku_mod_users.custom_fields SET jsonb = @Content::jsonb WHERE id = @Id", customField);
        public int Update(Document document) => Execute($"UPDATE diku_mod_invoice_storage.documents SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, invoiceid = @Invoiceid, document_data = @DocumentData WHERE id = @Id", document);
        public int Update(ElectronicAccessRelationship electronicAccessRelationship) => Execute($"UPDATE diku_mod_inventory_storage.electronic_access_relationship SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", electronicAccessRelationship);
        public int Update(ErrorRecord errorRecord) => Execute($"UPDATE diku_mod_source_record_storage.error_records_lb SET content = @Content, description = @Description WHERE id = @Id", errorRecord);
        public int Update(EventLog eventLog) => Execute($"UPDATE diku_mod_login.event_logs SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", eventLog);
        public int Update(ExportConfigCredential exportConfigCredential) => Execute($"UPDATE diku_mod_invoice_storage.export_config_credentials SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, exportconfigid = @Exportconfigid WHERE id = @Id", exportConfigCredential);
        public int Update(Fee fee) => Execute($"UPDATE diku_mod_feesfines.accounts SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", fee);
        public int Update(FeeType feeType) => Execute($"UPDATE diku_mod_feesfines.feefines SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, ownerid = @Ownerid WHERE id = @Id", feeType);
        public int Update(FinanceGroup financeGroup) => Execute($"UPDATE diku_mod_finance_storage.groups SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", financeGroup);
        public int Update(FiscalYear fiscalYear) => Execute($"UPDATE diku_mod_finance_storage.fiscal_year SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", fiscalYear);
        public int Update(FixedDueDateSchedule fixedDueDateSchedule) => Execute($"UPDATE diku_mod_circulation_storage.fixed_due_date_schedule SET jsonb = @Content::jsonb WHERE id = @Id", fixedDueDateSchedule);
        public int Update(Fund fund) => Execute($"UPDATE diku_mod_finance_storage.fund SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, ledgerid = @LedgerId, fundtypeid = @Fundtypeid WHERE id = @Id", fund);
        public int Update(FundType fundType) => Execute($"UPDATE diku_mod_finance_storage.fund_type SET jsonb = @Content::jsonb WHERE id = @Id", fundType);
        public int Update(Group group) => Execute($"UPDATE diku_mod_users.groups SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", group);
        public int Update(GroupFundFiscalYear groupFundFiscalYear) => Execute($"UPDATE diku_mod_finance_storage.group_fund_fiscal_year SET jsonb = @Content::jsonb, budgetid = @Budgetid, groupid = @Groupid, fundid = @Fundid, fiscalyearid = @Fiscalyearid WHERE id = @Id", groupFundFiscalYear);
        public int Update(Holding holding) => Execute($"UPDATE diku_mod_inventory_storage.holdings_record SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, instanceid = @Instanceid, permanentlocationid = @Permanentlocationid, temporarylocationid = @Temporarylocationid, holdingstypeid = @Holdingstypeid, callnumbertypeid = @Callnumbertypeid, illpolicyid = @Illpolicyid WHERE id = @Id", holding);
        public int Update(HoldingNoteType holdingNoteType) => Execute($"UPDATE diku_mod_inventory_storage.holdings_note_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", holdingNoteType);
        public int Update(HoldingType holdingType) => Execute($"UPDATE diku_mod_inventory_storage.holdings_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", holdingType);
        public int Update(HridSetting hridSetting) => Execute($"UPDATE diku_mod_inventory_storage.hrid_settings SET jsonb = @Content::jsonb, lock = @Lock WHERE id = @Id", hridSetting);
        public int Update(IdType idType) => Execute($"UPDATE diku_mod_inventory_storage.identifier_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", idType);
        public int Update(IllPolicy illPolicy) => Execute($"UPDATE diku_mod_inventory_storage.ill_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", illPolicy);
        public int Update(Instance instance) => Execute($"UPDATE diku_mod_inventory_storage.instance SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, instancestatusid = @Instancestatusid, modeofissuanceid = @Modeofissuanceid, instancetypeid = @Instancetypeid WHERE id = @Id", instance);
        public int Update(InstanceFormat instanceFormat) => Execute($"UPDATE diku_mod_inventory_storage.instance_format SET jsonb = @Content::jsonb WHERE id = @Id", instanceFormat);
        public int Update(InstanceNoteType instanceNoteType) => Execute($"UPDATE diku_mod_inventory_storage.instance_note_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceNoteType);
        public int Update(InstanceRelationship instanceRelationship) => Execute($"UPDATE diku_mod_inventory_storage.instance_relationship SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, superinstanceid = @Superinstanceid, subinstanceid = @Subinstanceid, instancerelationshiptypeid = @Instancerelationshiptypeid WHERE id = @Id", instanceRelationship);
        public int Update(InstanceRelationshipType instanceRelationshipType) => Execute($"UPDATE diku_mod_inventory_storage.instance_relationship_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceRelationshipType);
        public int Update(InstanceSourceMarc instanceSourceMarc) => Execute($"UPDATE diku_mod_inventory_storage.instance_source_marc SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceSourceMarc);
        public int Update(InstanceStatus instanceStatus) => Execute($"UPDATE diku_mod_inventory_storage.instance_status SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceStatus);
        public int Update(InstanceType instanceType) => Execute($"UPDATE diku_mod_inventory_storage.instance_type SET jsonb = @Content::jsonb WHERE id = @Id", instanceType);
        public int Update(Institution institution) => Execute($"UPDATE diku_mod_inventory_storage.locinstitution SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", institution);
        public int Update(Interface @interface) => Execute($"UPDATE diku_mod_organizations_storage.interfaces SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", @interface);
        public int Update(InterfaceCredential interfaceCredential) => Execute($"UPDATE diku_mod_organizations_storage.interface_credentials SET jsonb = @Content::jsonb, interfaceid = @Interfaceid WHERE id = @Id", interfaceCredential);
        public int Update(Invoice invoice) => Execute($"UPDATE diku_mod_invoice_storage.invoices SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, batchgroupid = @Batchgroupid WHERE id = @Id", invoice);
        public int Update(InvoiceItem invoiceItem) => Execute($"UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, invoiceid = @Invoiceid WHERE id = @Id", invoiceItem);
        public int Update(InvoiceTransactionSummary invoiceTransactionSummary) => Execute($"UPDATE diku_mod_finance_storage.invoice_transaction_summaries SET jsonb = @Content::jsonb WHERE id = @Id", invoiceTransactionSummary);
        public int Update(Item item) => Execute($"UPDATE diku_mod_inventory_storage.item SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, holdingsrecordid = @Holdingsrecordid, permanentloantypeid = @Permanentloantypeid, temporaryloantypeid = @Temporaryloantypeid, materialtypeid = @Materialtypeid, permanentlocationid = @Permanentlocationid, temporarylocationid = @Temporarylocationid, effectivelocationid = @Effectivelocationid WHERE id = @Id", item);
        public int Update(ItemDamagedStatus itemDamagedStatus) => Execute($"UPDATE diku_mod_inventory_storage.item_damaged_status SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", itemDamagedStatus);
        public int Update(ItemNoteType itemNoteType) => Execute($"UPDATE diku_mod_inventory_storage.item_note_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", itemNoteType);
        public int Update(JobExecution jobExecution) => Execute($"UPDATE diku_mod_source_record_manager.job_executions SET jsonb = @Content::jsonb WHERE id = @Id", jobExecution);
        public int Update(JobExecutionProgress jobExecutionProgress) => Execute($"UPDATE diku_mod_source_record_manager.job_execution_progress SET jsonb = @Content::jsonb, jobexecutionid = @Jobexecutionid WHERE id = @Id", jobExecutionProgress);
        public int Update(JobExecutionSourceChunk jobExecutionSourceChunk) => Execute($"UPDATE diku_mod_source_record_manager.job_execution_source_chunks SET jsonb = @Content::jsonb, jobexecutionid = @Jobexecutionid WHERE id = @Id", jobExecutionSourceChunk);
        public int Update(JournalRecord journalRecord) => Execute($"UPDATE diku_mod_source_record_manager.journal_records SET job_execution_id = @JobExecutionId, source_id = @SourceId, entity_type = @EntityType, entity_id = @EntityId, entity_hrid = @EntityHrid, action_type = @ActionType, action_status = @ActionStatus, action_date = @ActionDate, source_record_order = @SourceRecordOrder, error = @Error WHERE id = @Id", journalRecord);
        public int Update(Ledger ledger) => Execute($"UPDATE diku_mod_finance_storage.ledger SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, fiscalyearoneid = @Fiscalyearoneid WHERE id = @Id", ledger);
        public int Update(LedgerFiscalYear ledgerFiscalYear) => Execute($"UPDATE diku_mod_finance_storage.ledgerfy SET jsonb = @Content::jsonb, ledgerid = @Ledgerid, fiscalyearid = @Fiscalyearid WHERE id = @Id", ledgerFiscalYear);
        public int Update(Library library) => Execute($"UPDATE diku_mod_inventory_storage.loclibrary SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, campusid = @Campusid WHERE id = @Id", library);
        public int Update(Loan loan) => Execute($"UPDATE diku_mod_circulation_storage.loan SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", loan);
        public int Update(LoanPolicy loanPolicy) => Execute($"UPDATE diku_mod_circulation_storage.loan_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, loanspolicy_fixedduedatescheduleid = @LoanspolicyFixedduedatescheduleid, renewalspolicy_alternatefixedduedatescheduleid = @RenewalspolicyAlternatefixedduedatescheduleid WHERE id = @Id", loanPolicy);
        public int Update(LoanType loanType) => Execute($"UPDATE diku_mod_inventory_storage.loan_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", loanType);
        public int Update(Location location) => Execute($"UPDATE diku_mod_inventory_storage.location SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, institutionid = @Institutionid, campusid = @Campusid, libraryid = @Libraryid WHERE id = @Id", location);
        public int Update(Login login) => Execute($"UPDATE diku_mod_login.auth_credentials SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", login);
        public int Update(LostItemFeePolicy lostItemFeePolicy) => Execute($"UPDATE diku_mod_feesfines.lost_item_fee_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", lostItemFeePolicy);
        public int Update(MappingRule mappingRule) => Execute($"UPDATE diku_mod_source_record_manager.mapping_rules SET jsonb = @Content::jsonb WHERE id = @Id", mappingRule);
        public int Update(MarcRecord marcRecord) => Execute($"UPDATE diku_mod_source_record_storage.marc_records_lb SET content = @Content::jsonb WHERE id = @Id", marcRecord);
        public int Update(MaterialType materialType) => Execute($"UPDATE diku_mod_inventory_storage.material_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", materialType);
        public int Update(ModeOfIssuance modeOfIssuance) => Execute($"UPDATE diku_mod_inventory_storage.mode_of_issuance SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", modeOfIssuance);
        public int Update(NatureOfContentTerm natureOfContentTerm) => Execute($"UPDATE diku_mod_inventory_storage.nature_of_content_term SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", natureOfContentTerm);
        public int Update(Note note) => Execute($"UPDATE diku_mod_notes.note_data SET jsonb = @Content::jsonb, temporary_type_id = @TemporaryTypeId WHERE id = @Id", note);
        public int Update(NoteType noteType) => Execute($"UPDATE diku_mod_notes.note_type SET jsonb = @Content::jsonb WHERE id = @Id", noteType);
        public int Update(Order order) => Execute($"UPDATE diku_mod_orders_storage.purchase_order SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", order);
        public int Update(OrderInvoice orderInvoice) => Execute($"UPDATE diku_mod_orders_storage.order_invoice_relationship SET jsonb = @Content::jsonb, purchaseorderid = @Purchaseorderid WHERE id = @Id", orderInvoice);
        public int Update(OrderItem orderItem) => Execute($"UPDATE diku_mod_orders_storage.po_line SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, purchaseorderid = @Purchaseorderid WHERE id = @Id", orderItem);
        public int Update(OrderTemplate orderTemplate) => Execute($"UPDATE diku_mod_orders_storage.order_templates SET jsonb = @Content::jsonb WHERE id = @Id", orderTemplate);
        public int Update(OrderTransactionSummary orderTransactionSummary) => Execute($"UPDATE diku_mod_finance_storage.order_transaction_summaries SET jsonb = @Content::jsonb WHERE id = @Id", orderTransactionSummary);
        public int Update(Organization organization) => Execute($"UPDATE diku_mod_organizations_storage.organizations SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", organization);
        public int Update(OverdueFinePolicy overdueFinePolicy) => Execute($"UPDATE diku_mod_feesfines.overdue_fine_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", overdueFinePolicy);
        public int Update(Owner owner) => Execute($"UPDATE diku_mod_feesfines.owners SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", owner);
        public int Update(PatronActionSession patronActionSession) => Execute($"UPDATE diku_mod_circulation_storage.patron_action_session SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", patronActionSession);
        public int Update(PatronNoticePolicy patronNoticePolicy) => Execute($"UPDATE diku_mod_circulation_storage.patron_notice_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", patronNoticePolicy);
        public int Update(Payment payment) => Execute($"UPDATE diku_mod_feesfines.feefineactions SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", payment);
        public int Update(PaymentMethod paymentMethod) => Execute($"UPDATE diku_mod_feesfines.payments SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", paymentMethod);
        public int Update(Permission permission) => Execute($"UPDATE diku_mod_permissions.permissions SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", permission);
        public int Update(PermissionsUser permissionsUser) => Execute($"UPDATE diku_mod_permissions.permissions_users SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", permissionsUser);
        public int Update(Piece piece) => Execute($"UPDATE diku_mod_orders_storage.pieces SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, polineid = @Polineid, titleid = @Titleid WHERE id = @Id", piece);
        public int Update(PrecedingSucceedingTitle precedingSucceedingTitle) => Execute($"UPDATE diku_mod_inventory_storage.preceding_succeeding_title SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, precedinginstanceid = @Precedinginstanceid, succeedinginstanceid = @Succeedinginstanceid WHERE id = @Id", precedingSucceedingTitle);
        public int Update(Prefix prefix) => Execute($"UPDATE diku_mod_orders_storage.prefixes SET jsonb = @Content::jsonb WHERE id = @Id", prefix);
        public int Update(Proxy proxy) => Execute($"UPDATE diku_mod_users.proxyfor SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", proxy);
        public int Update(RawRecord rawRecord) => Execute($"UPDATE diku_mod_source_record_storage.raw_records_lb SET content = @Content WHERE id = @Id", rawRecord);
        public int Update(Record record, DateTime? lastWriteTime = null) => Execute($"UPDATE diku_mod_source_record_storage.records_lb SET snapshot_id = @SnapshotId, matched_id = @MatchedId, generation = @Generation, record_type = @RecordType, instance_id = @InstanceId, state = @State, leader_record_status = @LeaderRecordStatus, order = @Order, suppress_discovery = @SuppressDiscovery, created_by_user_id = @CreationUserId, created_date = @CreationTime, updated_by_user_id = @LastWriteUserId, updated_date = @LastWriteTime WHERE id = @Id{(lastWriteTime != null ? " AND (updated_date IS NULL OR updated_date = @lastWriteTime)" : "")}", new { record.SnapshotId, record.MatchedId, record.Generation, record.RecordType, record.InstanceId, record.State, record.LeaderRecordStatus, record.Order, record.SuppressDiscovery, record.CreationUserId, record.CreationTime, record.LastWriteUserId, record.LastWriteTime, record.Id, lastWriteTime });
        public int Update(RefundReason refundReason) => Execute($"UPDATE diku_mod_feesfines.refunds SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", refundReason);
        public int Update(ReportingCode reportingCode) => Execute($"UPDATE diku_mod_orders_storage.reporting_code SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", reportingCode);
        public int Update(Request request) => Execute($"UPDATE diku_mod_circulation_storage.request SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, cancellationreasonid = @Cancellationreasonid WHERE id = @Id", request);
        public int Update(RequestPolicy requestPolicy) => Execute($"UPDATE diku_mod_circulation_storage.request_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", requestPolicy);
        public int Update(ScheduledNotice scheduledNotice) => Execute($"UPDATE diku_mod_circulation_storage.scheduled_notice SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", scheduledNotice);
        public int Update(ServicePoint servicePoint) => Execute($"UPDATE diku_mod_inventory_storage.service_point SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", servicePoint);
        public int Update(ServicePointUser servicePointUser) => Execute($"UPDATE diku_mod_inventory_storage.service_point_user SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, defaultservicepointid = @Defaultservicepointid WHERE id = @Id", servicePointUser);
        public int Update(Snapshot snapshot, DateTime? lastWriteTime = null) => Execute($"UPDATE diku_mod_source_record_storage.snapshots_lb SET status = @Status, processing_started_date = @ProcessingStartedDate, created_by_user_id = @CreationUserId, created_date = @CreationTime, updated_by_user_id = @LastWriteUserId, updated_date = @LastWriteTime WHERE id = @Id{(lastWriteTime != null ? " AND (updated_date IS NULL OR updated_date = @lastWriteTime)" : "")}", new { snapshot.Status, snapshot.ProcessingStartedDate, snapshot.CreationUserId, snapshot.CreationTime, snapshot.LastWriteUserId, snapshot.LastWriteTime, snapshot.Id, lastWriteTime });
        public int Update(StaffSlip staffSlip) => Execute($"UPDATE diku_mod_circulation_storage.staff_slips SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", staffSlip);
        public int Update(StatisticalCode statisticalCode) => Execute($"UPDATE diku_mod_inventory_storage.statistical_code SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, statisticalcodetypeid = @Statisticalcodetypeid WHERE id = @Id", statisticalCode);
        public int Update(StatisticalCodeType statisticalCodeType) => Execute($"UPDATE diku_mod_inventory_storage.statistical_code_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", statisticalCodeType);
        public int Update(Suffix suffix) => Execute($"UPDATE diku_mod_orders_storage.suffixes SET jsonb = @Content::jsonb WHERE id = @Id", suffix);
        public int Update(Tag tag) => Execute($"UPDATE diku_mod_tags.tags SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", tag);
        public int Update(Template template) => Execute($"UPDATE diku_mod_template_engine.template SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", template);
        public int Update(TemporaryInvoiceTransaction temporaryInvoiceTransaction) => Execute($"UPDATE diku_mod_finance_storage.temporary_invoice_transactions SET jsonb = @Content::jsonb, sourceinvoiceid = @Sourceinvoiceid, paymentencumbranceid = @Paymentencumbranceid, fromfundid = @Fromfundid, tofundid = @Tofundid, fiscalyearid = @Fiscalyearid WHERE id = @Id", temporaryInvoiceTransaction);
        public int Update(TemporaryOrderTransaction temporaryOrderTransaction) => Execute($"UPDATE diku_mod_finance_storage.temporary_order_transactions SET jsonb = @Content::jsonb, encumbrance_sourcepurchaseorderid = @EncumbranceSourcepurchaseorderid, fiscalyearid = @Fiscalyearid, fromfundid = @Fromfundid WHERE id = @Id", temporaryOrderTransaction);
        public int Update(Title title) => Execute($"UPDATE diku_mod_orders_storage.titles SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, polineid = @Polineid WHERE id = @Id", title);
        public int Update(Transaction transaction) => Execute($"UPDATE diku_mod_finance_storage.transaction SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, fiscalyearid = @Fiscalyearid, fromfundid = @Fromfundid, sourcefiscalyearid = @Sourcefiscalyearid, tofundid = @Tofundid WHERE id = @Id", transaction);
        public int Update(TransferAccount transferAccount) => Execute($"UPDATE diku_mod_feesfines.transfers SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", transferAccount);
        public int Update(TransferCriteria transferCriteria) => Execute($"UPDATE diku_mod_feesfines.transfer_criteria SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", transferCriteria);
        public int Update(User user) => Execute($"UPDATE diku_mod_users.users SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, patrongroup = @Patrongroup WHERE id = @Id", user);
        public int Update(UserAcquisitionsUnit userAcquisitionsUnit) => Execute($"UPDATE diku_mod_orders_storage.acquisitions_unit_membership SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, acquisitionsunitid = @Acquisitionsunitid WHERE id = @Id", userAcquisitionsUnit);
        public int Update(UserRequestPreference userRequestPreference) => Execute($"UPDATE diku_mod_circulation_storage.user_request_preference SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", userRequestPreference);
        public int Update(UserSummary userSummary) => Execute($"UPDATE diku_mod_patron_blocks.user_summary SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", userSummary);
        public int Update(Voucher voucher) => Execute($"UPDATE diku_mod_invoice_storage.vouchers SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, invoiceid = @Invoiceid, batchgroupid = @Batchgroupid WHERE id = @Id", voucher);
        public int Update(VoucherItem voucherItem) => Execute($"UPDATE diku_mod_invoice_storage.voucher_lines SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, voucherid = @Voucherid WHERE id = @Id", voucherItem);
        public int Update(WaiveReason waiveReason) => Execute($"UPDATE diku_mod_feesfines.waives SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", waiveReason);

        public int DeleteAcquisitionsUnit(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit WHERE id = @id", new { id });
        public int DeleteAddressType(Guid? id) => Execute($"DELETE FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype WHERE id = @id", new { id });
        public int DeleteAlert(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert WHERE id = @id", new { id });
        public int DeleteAlternativeTitleType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type WHERE id = @id", new { id });
        public int DeleteAuditLoan(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan WHERE id = @id", new { id });
        public int DeleteAuthAttempt(Guid? id) => Execute($"DELETE FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts WHERE id = @id", new { id });
        public int DeleteAuthCredentialsHistory(Guid? id) => Execute($"DELETE FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history WHERE id = @id", new { id });
        public int DeleteAuthPasswordAction(Guid? id) => Execute($"DELETE FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action WHERE id = @id", new { id });
        public int DeleteBatchGroup(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_groups WHERE id = @id", new { id });
        public int DeleteBatchVoucher(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_vouchers WHERE id = @id", new { id });
        public int DeleteBatchVoucherExport(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_exports WHERE id = @id", new { id });
        public int DeleteBatchVoucherExportConfig(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}batch_voucher_export_configs WHERE id = @id", new { id });
        public int DeleteBlock(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks WHERE id = @id", new { id });
        public int DeleteBlockCondition(Guid? id) => Execute($"DELETE FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_conditions WHERE id = @id", new { id });
        public int DeleteBlockLimit(Guid? id) => Execute($"DELETE FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}patron_block_limits WHERE id = @id", new { id });
        public int DeleteBudget(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget WHERE id = @id", new { id });
        public int DeleteCallNumberType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type WHERE id = @id", new { id });
        public int DeleteCampus(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus WHERE id = @id", new { id });
        public int DeleteCancellationReason(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason WHERE id = @id", new { id });
        public int DeleteCategory(Guid? id) => Execute($"DELETE FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories WHERE id = @id", new { id });
        public int DeleteCheckIn(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}check_in WHERE id = @id", new { id });
        public int DeleteCirculationRule(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules WHERE id = @id", new { id });
        public int DeleteClassificationType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type WHERE id = @id", new { id });
        public int DeleteCloseReason(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reasons_for_closure WHERE id = @id", new { id });
        public int DeleteComment(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments WHERE id = @id", new { id });
        public int DeleteConfiguration(Guid? id) => Execute($"DELETE FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data WHERE id = @id", new { id });
        public int DeleteContact(Guid? id) => Execute($"DELETE FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts WHERE id = @id", new { id });
        public int DeleteContributorNameType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type WHERE id = @id", new { id });
        public int DeleteContributorType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type WHERE id = @id", new { id });
        public int DeleteCustomField(Guid? id) => Execute($"DELETE FROM diku_mod_users{(IsMySql ? "_" : ".")}custom_fields WHERE id = @id", new { id });
        public int DeleteDocument(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents WHERE id = @id", new { id });
        public int DeleteElectronicAccessRelationship(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship WHERE id = @id", new { id });
        public int DeleteErrorRecord(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records_lb WHERE id = @id", new { id });
        public int DeleteEventLog(Guid? id) => Execute($"DELETE FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs WHERE id = @id", new { id });
        public int DeleteExportConfigCredential(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}export_config_credentials WHERE id = @id", new { id });
        public int DeleteFee(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts WHERE id = @id", new { id });
        public int DeleteFeeType(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines WHERE id = @id", new { id });
        public int DeleteFinanceGroup(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups WHERE id = @id", new { id });
        public int DeleteFiscalYear(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year WHERE id = @id", new { id });
        public int DeleteFixedDueDateSchedule(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule WHERE id = @id", new { id });
        public int DeleteFund(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund WHERE id = @id", new { id });
        public int DeleteFundType(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type WHERE id = @id", new { id });
        public int DeleteGroup(Guid? id) => Execute($"DELETE FROM diku_mod_users{(IsMySql ? "_" : ".")}groups WHERE id = @id", new { id });
        public int DeleteGroupFundFiscalYear(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year WHERE id = @id", new { id });
        public int DeleteHolding(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record WHERE id = @id", new { id });
        public int DeleteHoldingNoteType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type WHERE id = @id", new { id });
        public int DeleteHoldingType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type WHERE id = @id", new { id });
        public int DeleteHridSetting(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings WHERE id = @id", new { id });
        public int DeleteIdType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type WHERE id = @id", new { id });
        public int DeleteIllPolicy(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy WHERE id = @id", new { id });
        public int DeleteInstance(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance WHERE id = @id", new { id });
        public int DeleteInstanceFormat(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format WHERE id = @id", new { id });
        public int DeleteInstanceNoteType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type WHERE id = @id", new { id });
        public int DeleteInstanceRelationship(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship WHERE id = @id", new { id });
        public int DeleteInstanceRelationshipType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type WHERE id = @id", new { id });
        public int DeleteInstanceSourceMarc(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc WHERE id = @id", new { id });
        public int DeleteInstanceStatus(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status WHERE id = @id", new { id });
        public int DeleteInstanceType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type WHERE id = @id", new { id });
        public int DeleteInstitution(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution WHERE id = @id", new { id });
        public int DeleteInterface(Guid? id) => Execute($"DELETE FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces WHERE id = @id", new { id });
        public int DeleteInterfaceCredential(Guid? id) => Execute($"DELETE FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials WHERE id = @id", new { id });
        public int DeleteInvoice(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices WHERE id = @id", new { id });
        public int DeleteInvoiceItem(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines WHERE id = @id", new { id });
        public int DeleteInvoiceTransactionSummary(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}invoice_transaction_summaries WHERE id = @id", new { id });
        public int DeleteItem(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item WHERE id = @id", new { id });
        public int DeleteItemDamagedStatus(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status WHERE id = @id", new { id });
        public int DeleteItemNoteType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type WHERE id = @id", new { id });
        public int DeleteJobExecution(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions WHERE id = @id", new { id });
        public int DeleteJobExecutionProgress(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_progress WHERE id = @id", new { id });
        public int DeleteJobExecutionSourceChunk(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks WHERE id = @id", new { id });
        public int DeleteJournalRecord(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records WHERE id = @id", new { id });
        public int DeleteLedger(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger WHERE id = @id", new { id });
        public int DeleteLedgerFiscalYear(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy WHERE id = @id", new { id });
        public int DeleteLibrary(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary WHERE id = @id", new { id });
        public int DeleteLoan(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan WHERE id = @id", new { id });
        public int DeleteLoanPolicy(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy WHERE id = @id", new { id });
        public int DeleteLoanType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type WHERE id = @id", new { id });
        public int DeleteLocation(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location WHERE id = @id", new { id });
        public int DeleteLogin(Guid? id) => Execute($"DELETE FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials WHERE id = @id", new { id });
        public int DeleteLostItemFeePolicy(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy WHERE id = @id", new { id });
        public int DeleteMappingRule(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules WHERE id = @id", new { id });
        public int DeleteMarcRecord(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records_lb WHERE id = @id", new { id });
        public int DeleteMaterialType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type WHERE id = @id", new { id });
        public int DeleteModeOfIssuance(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance WHERE id = @id", new { id });
        public int DeleteNatureOfContentTerm(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term WHERE id = @id", new { id });
        public int DeleteNote(Guid? id) => Execute($"DELETE FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data WHERE id = @id", new { id });
        public int DeleteNoteType(Guid? id) => Execute($"DELETE FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type WHERE id = @id", new { id });
        public int DeleteOrder(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order WHERE id = @id", new { id });
        public int DeleteOrderInvoice(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship WHERE id = @id", new { id });
        public int DeleteOrderItem(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line WHERE id = @id", new { id });
        public int DeleteOrderTemplate(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates WHERE id = @id", new { id });
        public int DeleteOrderTransactionSummary(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries WHERE id = @id", new { id });
        public int DeleteOrganization(Guid? id) => Execute($"DELETE FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations WHERE id = @id", new { id });
        public int DeleteOverdueFinePolicy(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy WHERE id = @id", new { id });
        public int DeleteOwner(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners WHERE id = @id", new { id });
        public int DeletePatronActionSession(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session WHERE id = @id", new { id });
        public int DeletePatronNoticePolicy(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy WHERE id = @id", new { id });
        public int DeletePayment(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions WHERE id = @id", new { id });
        public int DeletePaymentMethod(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments WHERE id = @id", new { id });
        public int DeletePermission(Guid? id) => Execute($"DELETE FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions WHERE id = @id", new { id });
        public int DeletePermissionsUser(Guid? id) => Execute($"DELETE FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users WHERE id = @id", new { id });
        public int DeletePiece(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces WHERE id = @id", new { id });
        public int DeletePrecedingSucceedingTitle(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}preceding_succeeding_title WHERE id = @id", new { id });
        public int DeletePrefix(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}prefixes WHERE id = @id", new { id });
        public int DeleteProxy(Guid? id) => Execute($"DELETE FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor WHERE id = @id", new { id });
        public int DeleteRawRecord(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records_lb WHERE id = @id", new { id });
        public int DeleteRecord(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records_lb WHERE id = @id", new { id });
        public int DeleteRefundReason(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds WHERE id = @id", new { id });
        public int DeleteReportingCode(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code WHERE id = @id", new { id });
        public int DeleteRequest(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request WHERE id = @id", new { id });
        public int DeleteRequestPolicy(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy WHERE id = @id", new { id });
        public int DeleteScheduledNotice(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice WHERE id = @id", new { id });
        public int DeleteServicePoint(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point WHERE id = @id", new { id });
        public int DeleteServicePointUser(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user WHERE id = @id", new { id });
        public int DeleteSnapshot(Guid? id) => Execute($"DELETE FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots_lb WHERE id = @id", new { id });
        public int DeleteStaffSlip(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips WHERE id = @id", new { id });
        public int DeleteStatisticalCode(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code WHERE id = @id", new { id });
        public int DeleteStatisticalCodeType(Guid? id) => Execute($"DELETE FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type WHERE id = @id", new { id });
        public int DeleteSuffix(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}suffixes WHERE id = @id", new { id });
        public int DeleteTag(Guid? id) => Execute($"DELETE FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags WHERE id = @id", new { id });
        public int DeleteTemplate(Guid? id) => Execute($"DELETE FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template WHERE id = @id", new { id });
        public int DeleteTemporaryInvoiceTransaction(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_invoice_transactions WHERE id = @id", new { id });
        public int DeleteTemporaryOrderTransaction(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}temporary_order_transactions WHERE id = @id", new { id });
        public int DeleteTitle(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}titles WHERE id = @id", new { id });
        public int DeleteTransaction(Guid? id) => Execute($"DELETE FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction WHERE id = @id", new { id });
        public int DeleteTransferAccount(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers WHERE id = @id", new { id });
        public int DeleteTransferCriteria(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria WHERE id = @id", new { id });
        public int DeleteUser(Guid? id) => Execute($"DELETE FROM diku_mod_users{(IsMySql ? "_" : ".")}users WHERE id = @id", new { id });
        public int DeleteUserAcquisitionsUnit(Guid? id) => Execute($"DELETE FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership WHERE id = @id", new { id });
        public int DeleteUserRequestPreference(Guid? id) => Execute($"DELETE FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference WHERE id = @id", new { id });
        public int DeleteUserSummary(Guid? id) => Execute($"DELETE FROM diku_mod_patron_blocks{(IsMySql ? "_" : ".")}user_summary WHERE id = @id", new { id });
        public int DeleteVoucher(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers WHERE id = @id", new { id });
        public int DeleteVoucherItem(Guid? id) => Execute($"DELETE FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines WHERE id = @id", new { id });
        public int DeleteWaiveReason(Guid? id) => Execute($"DELETE FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives WHERE id = @id", new { id });

        public int Execute(string sql, object param = null, int? commandTimeout = null)
        {
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param}");
            return Connection.Execute(sql, param, Transaction, commandTimeout ?? CommandTimeout);
        }

        public T ExecuteScalar<T>(string sql, object param = null, int? commandTimeout = null)
        {
            sql = Regex.Replace(sql, @"[\[\]]", "\"", RegexOptions.Compiled);
            var s = Stopwatch.StartNew();
            try
            {
                return Connection.ExecuteScalar<T>(sql, param, Transaction, commandTimeout ?? CommandTimeout);
            }
            catch (NpgsqlException e)
            {
                if (e.Message == "Exception while reading from stream") traceSource.TraceEvent(TraceEventType.Verbose, 0, string.Join("\r\n", Query<string>($"EXPLAIN {sql}")));
                throw e;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param} {s.Elapsed}");
            }
        }

        public int Count(string sql, object param = null, int? take = null, int? commandTimeout = null)
        {
            sql = $"SELECT COUNT (*) FROM ({sql}{(take != null ? $"{(IsMySql || IsPostgreSql ? $" LIMIT {take}" : $" OFFSET 0 ROWS FETCH NEXT {take} ROWS ONLY")}" : "")}) count";
            return ExecuteScalar<int>(sql, param, commandTimeout ?? CommandTimeout);
        }

        public IEnumerable<dynamic> Query(string sql, object param = null, int? skip = null, int? take = null, int? commandTimeout = null)
        {
            sql = Regex.Replace(sql, @"[\[\]]", "\"", RegexOptions.Compiled);
            if (skip != null || take != null) sql = $"{sql}{(IsMySql ? $" LIMIT {(skip == null ? $"{take}" : $"{skip}, {take ?? int.MaxValue}")}" : IsPostgreSql ? $"{(take != null ? $" LIMIT {take}" : "")}{(skip != null ? $" OFFSET {skip}" : "")}" : $" OFFSET {skip ?? 0} ROWS{(take != null ? $" FETCH NEXT {take} ROWS ONLY" : "")}")}";
            var s = Stopwatch.StartNew();
            try
            {
                return Connection.Query(sql, param, Transaction, false, commandTimeout ?? CommandTimeout);
            }
            catch (NpgsqlException e)
            {
                if (e.Message == "Exception while reading from stream") traceSource.TraceEvent(TraceEventType.Verbose, 0, string.Join("\r\n", Query<string>($"EXPLAIN {sql}")));
                throw e;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param} {s.Elapsed}");
            }
        }

        public IEnumerable<T> Query<T>(string sql, object param = null, int? skip = null, int? take = null, int? commandTimeout = null)
        {
            sql = Regex.Replace(sql, @"[\[\]]", "\"", RegexOptions.Compiled);
            if (skip != null || take != null) sql = $"{sql}{(IsMySql ? $" LIMIT {(skip == null ? $"{take}" : $"{skip}, {take ?? int.MaxValue}")}" : IsPostgreSql ? $"{(take != null ? $" LIMIT {take}" : "")}{(skip != null ? $" OFFSET {skip}" : "")}" : $" OFFSET {skip ?? 0} ROWS{(take != null ? $" FETCH NEXT {take} ROWS ONLY" : "")}")}";
            var s = Stopwatch.StartNew();
            try
            {
                return Connection.Query<T>(sql, param, Transaction, false, commandTimeout ?? CommandTimeout);
            }
            catch (NpgsqlException e)
            {
                if (e.Message == "Exception while reading from stream") traceSource.TraceEvent(TraceEventType.Verbose, 0, string.Join("\r\n", Query<string>($"EXPLAIN {sql}")));
                throw e;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param} {s.Elapsed}");
            }
        }

        public void Commit()
        {
            if (dbTransaction != null)
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, "Committing transaction");
                dbTransaction.Commit();
                dbTransaction.Dispose();
                dbTransaction = dbConnection.BeginTransaction();
            }
        }

        private string SqlEncode(string value) => value.Replace("'", "''").Replace(@"\", IsMySql ? @"\\" : @"\");

        public void Dispose()
        {
            if (dbTransaction != null)
            {
                dbTransaction.Dispose();
            }
            if (dbConnection != null)
            {
                dbConnection.Dispose();
            }
        }
    }

    public class DbProviderFactories
    {
        internal static DbProviderFactory GetFactory(string providerName)
        {
            if (providerName == "MySql.Data.MySqlClient" || providerName == "MySql.Data.MySqlClient2")
                throw new NotSupportedException();
            else if (providerName == "Npgsql")
                return NpgsqlFactory.Instance;
            else if (providerName == "System.Data.SqlClient")
                throw new NotSupportedException();
            throw new NotImplementedException();
        }
    }
}
