using Dapper;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Diagnostics;
using System.Linq;
using System.Text.RegularExpressions;

namespace FolioLibrary
{
    public class FolioDapperContext : IDisposable
    {
        private string connectionString;
        public int? CommandTimeout { get; set; } = 30;
        private DbConnection dbConnection;
        private DbTransaction dbTransaction;
        private string providerName;
        public readonly static TraceSource traceSource = new TraceSource("FolioLibrary", SourceLevels.Information);

        public bool IsMySql => providerName == "MySql.Data.MySqlClient";
        public bool IsPostgreSql => providerName == "Npgsql";
        public bool IsSqlServer => providerName == "System.Data.SqlClient";

        public FolioDapperContext() : this("FolioContext") { }

        public FolioDapperContext(string name)
        {
            providerName = ConfigurationManager.ConnectionStrings[name].ProviderName;
            connectionString = ConfigurationManager.ConnectionStrings[name].ConnectionString;
        }

        public FolioDapperContext(string providerName, string connectionString)
        {
            this.providerName = providerName;
            this.connectionString = connectionString;
        }

        private DbConnection Connection
        {
            get
            {
                if (dbConnection == null)
                {
                    dbConnection = DbProviderFactories.GetFactory(IsMySql ? "MySql.Data.MySqlClient2" : providerName).CreateConnection();
                    dbConnection.ConnectionString = connectionString;
                    dbConnection.Open();
                    if (IsMySql) dbConnection.Execute("SET SQL_MODE = 'ANSI'");
                }
                return dbConnection;
            }
        }

        private DbTransaction Transaction
        {
            get
            {
                if (dbTransaction == null) dbTransaction = Connection.BeginTransaction(IsolationLevel.ReadCommitted);
                return dbTransaction;
            }
        }

        public Account FindAccount(Guid? id) => Query<Account>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts WHERE id = @id", new { id }).SingleOrDefault();
        public AcquisitionsUnit FindAcquisitionsUnit(Guid? id) => Query<AcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit WHERE id = @id", new { id }).SingleOrDefault();
        public AddressType FindAddressType(Guid? id) => Query<AddressType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype WHERE id = @id", new { id }).SingleOrDefault();
        public Alert FindAlert(Guid? id) => Query<Alert>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert WHERE id = @id", new { id }).SingleOrDefault();
        public AlternativeTitleType FindAlternativeTitleType(Guid? id) => Query<AlternativeTitleType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type WHERE id = @id", new { id }).SingleOrDefault();
        public AuditLoan FindAuditLoan(Guid? id) => Query<AuditLoan>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan WHERE id = @id", new { id }).SingleOrDefault();
        public AuthAttempt FindAuthAttempt(Guid? id) => Query<AuthAttempt>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts WHERE id = @id", new { id }).SingleOrDefault();
        public AuthCredentialsHistory FindAuthCredentialsHistory(Guid? id) => Query<AuthCredentialsHistory>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history WHERE id = @id", new { id }).SingleOrDefault();
        public AuthPasswordAction FindAuthPasswordAction(Guid? id) => Query<AuthPasswordAction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action WHERE id = @id", new { id }).SingleOrDefault();
        public Block FindBlock(Guid? id) => Query<Block>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks WHERE id = @id", new { id }).SingleOrDefault();
        public Budget FindBudget(Guid? id) => Query<Budget>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fundid AS \"FundId\", fiscalyearid AS \"FiscalYearId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget WHERE id = @id", new { id }).SingleOrDefault();
        public CallNumberType FindCallNumberType(Guid? id) => Query<CallNumberType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type WHERE id = @id", new { id }).SingleOrDefault();
        public Campus FindCampus(Guid? id) => Query<Campus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus WHERE id = @id", new { id }).SingleOrDefault();
        public CancellationReason FindCancellationReason(Guid? id) => Query<CancellationReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason WHERE id = @id", new { id }).SingleOrDefault();
        public Category FindCategory(Guid? id) => Query<Category>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories WHERE id = @id", new { id }).SingleOrDefault();
        public CirculationRule FindCirculationRule(Guid? id) => Query<CirculationRule>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules WHERE id = @id", new { id }).SingleOrDefault();
        public ClassificationType FindClassificationType(Guid? id) => Query<ClassificationType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type WHERE id = @id", new { id }).SingleOrDefault();
        public Comment FindComment(Guid? id) => Query<Comment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments WHERE id = @id", new { id }).SingleOrDefault();
        public Configuration FindConfiguration(Guid? id) => Query<Configuration>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data WHERE id = @id", new { id }).SingleOrDefault();
        public Contact FindContact(Guid? id) => Query<Contact>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts WHERE id = @id", new { id }).SingleOrDefault();
        public ContributorNameType FindContributorNameType(Guid? id) => Query<ContributorNameType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type WHERE id = @id", new { id }).SingleOrDefault();
        public ContributorType FindContributorType(Guid? id) => Query<ContributorType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type WHERE id = @id", new { id }).SingleOrDefault();
        public Country FindCountry(string alpha2Code) => Query<Country>($"SELECT alpha2_code AS \"Alpha2Code\", alpha3_code AS \"Alpha3Code\", name AS \"Name\" FROM uc{(IsMySql ? "_" : ".")}countries WHERE alpha2_code = @alpha2Code", new { alpha2Code }).SingleOrDefault();
        public Document FindDocument(Guid? id) => Query<Document>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\", document_data AS \"DocumentData\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents WHERE id = @id", new { id }).SingleOrDefault();
        public ElectronicAccessRelationship FindElectronicAccessRelationship(Guid? id) => Query<ElectronicAccessRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship WHERE id = @id", new { id }).SingleOrDefault();
        public ErrorRecord FindErrorRecord(Guid? id) => Query<ErrorRecord>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records WHERE _id = @id", new { id }).SingleOrDefault();
        public EventLog FindEventLog(Guid? id) => Query<EventLog>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs WHERE id = @id", new { id }).SingleOrDefault();
        public Fee FindFee(Guid? id) => Query<Fee>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ownerid AS \"Ownerid\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines WHERE id = @id", new { id }).SingleOrDefault();
        public FeeAction FindFeeAction(Guid? id) => Query<FeeAction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions WHERE id = @id", new { id }).SingleOrDefault();
        public FinanceGroup FindFinanceGroup(Guid? id) => Query<FinanceGroup>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups WHERE id = @id", new { id }).SingleOrDefault();
        public FiscalYear FindFiscalYear(Guid? id) => Query<FiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year WHERE id = @id", new { id }).SingleOrDefault();
        public FixedDueDateSchedule FindFixedDueDateSchedule(Guid? id) => Query<FixedDueDateSchedule>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule WHERE id = @id", new { id }).SingleOrDefault();
        public Fund FindFund(Guid? id) => Query<Fund>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ledgerid AS \"LedgerId\", fundtypeid AS \"Fundtypeid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund WHERE id = @id", new { id }).SingleOrDefault();
        public FundDistribution FindFundDistribution(Guid? id) => Query<FundDistribution>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", budgetid AS \"Budgetid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_distribution WHERE id = @id", new { id }).SingleOrDefault();
        public FundType FindFundType(Guid? id) => Query<FundType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type WHERE id = @id", new { id }).SingleOrDefault();
        public Group FindGroup(Guid? id) => Query<Group>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}groups WHERE id = @id", new { id }).SingleOrDefault();
        public GroupFundFiscalYear FindGroupFundFiscalYear(Guid? id) => Query<GroupFundFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", budgetid AS \"Budgetid\", groupid AS \"Groupid\", fundid AS \"Fundid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year WHERE id = @id", new { id }).SingleOrDefault();
        public Holding FindHolding(Guid? id) => Query<Holding>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instanceid AS \"Instanceid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", holdingstypeid AS \"Holdingstypeid\", callnumbertypeid AS \"Callnumbertypeid\", illpolicyid AS \"Illpolicyid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record WHERE id = @id", new { id }).SingleOrDefault();
        public HoldingNoteType FindHoldingNoteType(Guid? id) => Query<HoldingNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type WHERE id = @id", new { id }).SingleOrDefault();
        public HoldingType FindHoldingType(Guid? id) => Query<HoldingType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type WHERE id = @id", new { id }).SingleOrDefault();
        public HridSetting FindHridSetting(Guid? id) => Query<HridSetting>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings WHERE id = @id", new { id }).SingleOrDefault();
        public IdType FindIdType(Guid? id) => Query<IdType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type WHERE id = @id", new { id }).SingleOrDefault();
        public IllPolicy FindIllPolicy(Guid? id) => Query<IllPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy WHERE id = @id", new { id }).SingleOrDefault();
        public Instance FindInstance(Guid? id) => Query<Instance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instancestatusid AS \"Instancestatusid\", modeofissuanceid AS \"Modeofissuanceid\", instancetypeid AS \"Instancetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceFormat FindInstanceFormat(Guid? id) => Query<InstanceFormat>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceNoteType FindInstanceNoteType(Guid? id) => Query<InstanceNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceRelationship FindInstanceRelationship(Guid? id) => Query<InstanceRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", superinstanceid AS \"Superinstanceid\", subinstanceid AS \"Subinstanceid\", instancerelationshiptypeid AS \"Instancerelationshiptypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceRelationshipType FindInstanceRelationshipType(Guid? id) => Query<InstanceRelationshipType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceSourceMarc FindInstanceSourceMarc(Guid? id) => Query<InstanceSourceMarc>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceStatus FindInstanceStatus(Guid? id) => Query<InstanceStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status WHERE id = @id", new { id }).SingleOrDefault();
        public InstanceType FindInstanceType(Guid? id) => Query<InstanceType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type WHERE id = @id", new { id }).SingleOrDefault();
        public Institution FindInstitution(Guid? id) => Query<Institution>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution WHERE id = @id", new { id }).SingleOrDefault();
        public Interface FindInterface(Guid? id) => Query<Interface>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces WHERE id = @id", new { id }).SingleOrDefault();
        public InterfaceCredential FindInterfaceCredential(Guid? id) => Query<InterfaceCredential>($"SELECT id AS \"Id\", jsonb AS \"Content\", interfaceid AS \"Interfaceid\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials WHERE id = @id", new { id }).SingleOrDefault();
        public Invoice FindInvoice(Guid? id) => Query<Invoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices WHERE id = @id", new { id }).SingleOrDefault();
        public InvoiceItem FindInvoiceItem(Guid? id) => Query<InvoiceItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines WHERE id = @id", new { id }).SingleOrDefault();
        public Item FindItem(Guid? id) => Query<Item>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", holdingsrecordid AS \"Holdingsrecordid\", permanentloantypeid AS \"Permanentloantypeid\", temporaryloantypeid AS \"Temporaryloantypeid\", materialtypeid AS \"Materialtypeid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", effectivelocationid AS \"Effectivelocationid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item WHERE id = @id", new { id }).SingleOrDefault();
        public ItemDamagedStatus FindItemDamagedStatus(Guid? id) => Query<ItemDamagedStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status WHERE id = @id", new { id }).SingleOrDefault();
        public ItemNoteType FindItemNoteType(Guid? id) => Query<ItemNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type WHERE id = @id", new { id }).SingleOrDefault();
        public JobExecution FindJobExecution(Guid? id) => Query<JobExecution>($"SELECT _id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions WHERE _id = @id", new { id }).SingleOrDefault();
        public JobExecutionSourceChunk FindJobExecutionSourceChunk(Guid? id) => Query<JobExecutionSourceChunk>($"SELECT _id AS \"Id\", jsonb AS \"Content\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks WHERE _id = @id", new { id }).SingleOrDefault();
        public JournalRecord FindJournalRecord(Guid? id) => Query<JournalRecord>($"SELECT _id AS \"Id\", job_execution_id AS \"JobExecutionId\", source_id AS \"SourceId\", entity_type AS \"EntityType\", entity_id AS \"EntityId\", entity_hrid AS \"EntityHrid\", action_type AS \"ActionType\", action_status AS \"ActionStatus\", action_date AS \"ActionDate\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records WHERE _id = @id", new { id }).SingleOrDefault();
        public Ledger FindLedger(Guid? id) => Query<Ledger>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearoneid AS \"Fiscalyearoneid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger WHERE id = @id", new { id }).SingleOrDefault();
        public LedgerFiscalYear FindLedgerFiscalYear(Guid? id) => Query<LedgerFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", ledgerid AS \"Ledgerid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy WHERE id = @id", new { id }).SingleOrDefault();
        public Library FindLibrary(Guid? id) => Query<Library>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", campusid AS \"Campusid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary WHERE id = @id", new { id }).SingleOrDefault();
        public Loan FindLoan(Guid? id) => Query<Loan>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan WHERE id = @id", new { id }).SingleOrDefault();
        public LoanPolicy FindLoanPolicy(Guid? id) => Query<LoanPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", loanspolicy_fixedduedatescheduleid AS \"LoanspolicyFixedduedatescheduleid\", renewalspolicy_alternatefixedduedatescheduleid AS \"RenewalspolicyAlternatefixedduedatescheduleid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy WHERE id = @id", new { id }).SingleOrDefault();
        public LoanType FindLoanType(Guid? id) => Query<LoanType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type WHERE id = @id", new { id }).SingleOrDefault();
        public Location FindLocation(Guid? id) => Query<Location>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\", campusid AS \"Campusid\", libraryid AS \"Libraryid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location WHERE id = @id", new { id }).SingleOrDefault();
        public Login FindLogin(Guid? id) => Query<Login>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials WHERE id = @id", new { id }).SingleOrDefault();
        public LostItemFeePolicy FindLostItemFeePolicy(Guid? id) => Query<LostItemFeePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy WHERE id = @id", new { id }).SingleOrDefault();
        public MappingRule FindMappingRule(Guid? id) => Query<MappingRule>($"SELECT _id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules WHERE _id = @id", new { id }).SingleOrDefault();
        public MarcRecord FindMarcRecord(Guid? id) => Query<MarcRecord>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records WHERE _id = @id", new { id }).SingleOrDefault();
        public MaterialType FindMaterialType(Guid? id) => Query<MaterialType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type WHERE id = @id", new { id }).SingleOrDefault();
        public ModeOfIssuance FindModeOfIssuance(Guid? id) => Query<ModeOfIssuance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance WHERE id = @id", new { id }).SingleOrDefault();
        public NatureOfContentTerm FindNatureOfContentTerm(Guid? id) => Query<NatureOfContentTerm>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term WHERE id = @id", new { id }).SingleOrDefault();
        public Note FindNote(Guid? id) => Query<Note>($"SELECT id AS \"Id\", jsonb AS \"Content\", temporary_type_id AS \"TemporaryTypeId\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data WHERE id = @id", new { id }).SingleOrDefault();
        public NoteType FindNoteType(Guid? id) => Query<NoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type WHERE id = @id", new { id }).SingleOrDefault();
        public Order FindOrder(Guid? id) => Query<Order>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order WHERE id = @id", new { id }).SingleOrDefault();
        public OrderInvoice FindOrderInvoice(Guid? id) => Query<OrderInvoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship WHERE id = @id", new { id }).SingleOrDefault();
        public OrderItem FindOrderItem(Guid? id) => Query<OrderItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line WHERE id = @id", new { id }).SingleOrDefault();
        public OrderTemplate FindOrderTemplate(Guid? id) => Query<OrderTemplate>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates WHERE id = @id", new { id }).SingleOrDefault();
        public OrderTransactionSummary FindOrderTransactionSummary(Guid? id) => Query<OrderTransactionSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries WHERE id = @id", new { id }).SingleOrDefault();
        public Organization FindOrganization(Guid? id) => Query<Organization>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations WHERE id = @id", new { id }).SingleOrDefault();
        public OverdueFinePolicy FindOverdueFinePolicy(Guid? id) => Query<OverdueFinePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy WHERE id = @id", new { id }).SingleOrDefault();
        public Owner FindOwner(Guid? id) => Query<Owner>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners WHERE id = @id", new { id }).SingleOrDefault();
        public PatronActionSession FindPatronActionSession(Guid? id) => Query<PatronActionSession>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session WHERE id = @id", new { id }).SingleOrDefault();
        public PatronNoticePolicy FindPatronNoticePolicy(Guid? id) => Query<PatronNoticePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy WHERE id = @id", new { id }).SingleOrDefault();
        public Payment FindPayment(Guid? id) => Query<Payment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments WHERE id = @id", new { id }).SingleOrDefault();
        public Permission FindPermission(Guid? id) => Query<Permission>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions WHERE id = @id", new { id }).SingleOrDefault();
        public PermissionsUser FindPermissionsUser(Guid? id) => Query<PermissionsUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users WHERE id = @id", new { id }).SingleOrDefault();
        public Piece FindPiece(Guid? id) => Query<Piece>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", polineid AS \"Polineid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces WHERE id = @id", new { id }).SingleOrDefault();
        public Proxy FindProxy(Guid? id) => Query<Proxy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor WHERE id = @id", new { id }).SingleOrDefault();
        public RawRecord FindRawRecord(Guid? id) => Query<RawRecord>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records WHERE _id = @id", new { id }).SingleOrDefault();
        public Record FindRecord(Guid? id) => Query<Record>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records WHERE _id = @id", new { id }).SingleOrDefault();
        public Refund FindRefund(Guid? id) => Query<Refund>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds WHERE id = @id", new { id }).SingleOrDefault();
        public ReportingCode FindReportingCode(Guid? id) => Query<ReportingCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code WHERE id = @id", new { id }).SingleOrDefault();
        public Request FindRequest(Guid? id) => Query<Request>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", cancellationreasonid AS \"Cancellationreasonid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request WHERE id = @id", new { id }).SingleOrDefault();
        public RequestPolicy FindRequestPolicy(Guid? id) => Query<RequestPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy WHERE id = @id", new { id }).SingleOrDefault();
        public ScheduledNotice FindScheduledNotice(Guid? id) => Query<ScheduledNotice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice WHERE id = @id", new { id }).SingleOrDefault();
        public ServicePoint FindServicePoint(Guid? id) => Query<ServicePoint>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point WHERE id = @id", new { id }).SingleOrDefault();
        public ServicePointUser FindServicePointUser(Guid? id) => Query<ServicePointUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", defaultservicepointid AS \"Defaultservicepointid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user WHERE id = @id", new { id }).SingleOrDefault();
        public Snapshot FindSnapshot(Guid? id) => Query<Snapshot>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots WHERE _id = @id", new { id }).SingleOrDefault();
        public StaffSlip FindStaffSlip(Guid? id) => Query<StaffSlip>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips WHERE id = @id", new { id }).SingleOrDefault();
        public StatisticalCode FindStatisticalCode(Guid? id) => Query<StatisticalCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", statisticalcodetypeid AS \"Statisticalcodetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code WHERE id = @id", new { id }).SingleOrDefault();
        public StatisticalCodeType FindStatisticalCodeType(Guid? id) => Query<StatisticalCodeType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type WHERE id = @id", new { id }).SingleOrDefault();
        public Tag FindTag(Guid? id) => Query<Tag>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags WHERE id = @id", new { id }).SingleOrDefault();
        public Template FindTemplate(Guid? id) => Query<Template>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template WHERE id = @id", new { id }).SingleOrDefault();
        public Transaction FindTransaction(Guid? id) => Query<Transaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearid AS \"Fiscalyearid\", fromfundid AS \"Fromfundid\", sourcefiscalyearid AS \"Sourcefiscalyearid\", tofundid AS \"Tofundid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction WHERE id = @id", new { id }).SingleOrDefault();
        public Transfer FindTransfer(Guid? id) => Query<Transfer>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers WHERE id = @id", new { id }).SingleOrDefault();
        public TransferCriteria FindTransferCriteria(Guid? id) => Query<TransferCriteria>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria WHERE id = @id", new { id }).SingleOrDefault();
        public User FindUser(Guid? id) => Query<User>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", patrongroup AS \"Patrongroup\" FROM diku_mod_users{(IsMySql ? "_" : ".")}users WHERE id = @id", new { id }).SingleOrDefault();
        public UserAcquisitionsUnit FindUserAcquisitionsUnit(Guid? id) => Query<UserAcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", acquisitionsunitid AS \"Acquisitionsunitid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership WHERE id = @id", new { id }).SingleOrDefault();
        public UserRequestPreference FindUserRequestPreference(Guid? id) => Query<UserRequestPreference>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference WHERE id = @id", new { id }).SingleOrDefault();
        public Voucher FindVoucher(Guid? id) => Query<Voucher>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers WHERE id = @id", new { id }).SingleOrDefault();
        public VoucherItem FindVoucherItem(Guid? id) => Query<VoucherItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", voucherid AS \"Voucherid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines WHERE id = @id", new { id }).SingleOrDefault();
        public Waive FindWaive(Guid? id) => Query<Waive>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives WHERE id = @id", new { id }).SingleOrDefault();

        public IEnumerable<Account> Accounts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Account>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AcquisitionsUnit> AcquisitionsUnits(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AddressType> AddressTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AddressType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Alert> Alerts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Alert>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AlternativeTitleType> AlternativeTitleTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AlternativeTitleType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuditLoan> AuditLoans(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuditLoan>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuthAttempt> AuthAttempts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuthAttempt>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuthCredentialsHistory> AuthCredentialsHistories(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuthCredentialsHistory>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<AuthPasswordAction> AuthPasswordActions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<AuthPasswordAction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Block> Blocks(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Block>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Budget> Budgets(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Budget>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fundid AS \"FundId\", fiscalyearid AS \"FiscalYearId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CallNumberType> CallNumberTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CallNumberType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Campus> Campuses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Campus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CancellationReason> CancellationReasons(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CancellationReason>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Category> Categories(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Category>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<CirculationRule> CirculationRules(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<CirculationRule>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ClassificationType> ClassificationTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ClassificationType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Comment> Comments(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Comment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Configuration> Configurations(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Configuration>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Contact> Contacts(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Contact>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ContributorNameType> ContributorNameTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ContributorNameType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ContributorType> ContributorTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ContributorType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Country> Countries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Country>($"SELECT alpha2_code AS \"Alpha2Code\", alpha3_code AS \"Alpha3Code\", name AS \"Name\" FROM uc{(IsMySql ? "_" : ".")}countries{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Document> Documents(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Document>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\", document_data AS \"DocumentData\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ElectronicAccessRelationship> ElectronicAccessRelationships(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ElectronicAccessRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ErrorRecord> ErrorRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ErrorRecord>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<EventLog> EventLogs(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<EventLog>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Fee> Fees(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Fee>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ownerid AS \"Ownerid\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FeeAction> FeeActions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FeeAction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FinanceGroup> FinanceGroups(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FinanceGroup>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FiscalYear> FiscalYears(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FixedDueDateSchedule> FixedDueDateSchedules(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FixedDueDateSchedule>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Fund> Funds(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Fund>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", ledgerid AS \"LedgerId\", fundtypeid AS \"Fundtypeid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FundDistribution> FundDistributions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FundDistribution>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", budgetid AS \"Budgetid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_distribution{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<FundType> FundTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<FundType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Group> Groups(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Group>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<GroupFundFiscalYear> GroupFundFiscalYears(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<GroupFundFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", budgetid AS \"Budgetid\", groupid AS \"Groupid\", fundid AS \"Fundid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Holding> Holdings(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Holding>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instanceid AS \"Instanceid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", holdingstypeid AS \"Holdingstypeid\", callnumbertypeid AS \"Callnumbertypeid\", illpolicyid AS \"Illpolicyid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<HoldingNoteType> HoldingNoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<HoldingNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<HoldingType> HoldingTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<HoldingType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<HridSetting> HridSettings(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<HridSetting>($"SELECT id AS \"Id\", jsonb AS \"Content\", lock AS \"Lock\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<IdType> IdTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<IdType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<IllPolicy> IllPolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<IllPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Instance> Instances(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Instance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", instancestatusid AS \"Instancestatusid\", modeofissuanceid AS \"Modeofissuanceid\", instancetypeid AS \"Instancetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceFormat> InstanceFormats(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceFormat>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceNoteType> InstanceNoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceRelationship> InstanceRelationships(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceRelationship>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", superinstanceid AS \"Superinstanceid\", subinstanceid AS \"Subinstanceid\", instancerelationshiptypeid AS \"Instancerelationshiptypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceRelationshipType> InstanceRelationshipTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceRelationshipType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceSourceMarc> InstanceSourceMarcs(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceSourceMarc>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceStatus> InstanceStatuses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InstanceType> InstanceTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InstanceType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Institution> Institutions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Institution>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Interface> Interfaces(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Interface>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InterfaceCredential> InterfaceCredentials(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InterfaceCredential>($"SELECT id AS \"Id\", jsonb AS \"Content\", interfaceid AS \"Interfaceid\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Invoice> Invoices(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Invoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<InvoiceItem> InvoiceItems(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<InvoiceItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Item> Items(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Item>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", holdingsrecordid AS \"Holdingsrecordid\", permanentloantypeid AS \"Permanentloantypeid\", temporaryloantypeid AS \"Temporaryloantypeid\", materialtypeid AS \"Materialtypeid\", permanentlocationid AS \"Permanentlocationid\", temporarylocationid AS \"Temporarylocationid\", effectivelocationid AS \"Effectivelocationid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ItemDamagedStatus> ItemDamagedStatuses(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ItemDamagedStatus>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ItemNoteType> ItemNoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ItemNoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JobExecution> JobExecutions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JobExecution>($"SELECT _id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JobExecutionSourceChunk> JobExecutionSourceChunks(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JobExecutionSourceChunk>($"SELECT _id AS \"Id\", jsonb AS \"Content\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<JournalRecord> JournalRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<JournalRecord>($"SELECT _id AS \"Id\", job_execution_id AS \"JobExecutionId\", source_id AS \"SourceId\", entity_type AS \"EntityType\", entity_id AS \"EntityId\", entity_hrid AS \"EntityHrid\", action_type AS \"ActionType\", action_status AS \"ActionStatus\", action_date AS \"ActionDate\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Ledger> Ledgers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Ledger>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearoneid AS \"Fiscalyearoneid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LedgerFiscalYear> LedgerFiscalYears(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LedgerFiscalYear>($"SELECT id AS \"Id\", jsonb AS \"Content\", ledgerid AS \"Ledgerid\", fiscalyearid AS \"Fiscalyearid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Library> Libraries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Library>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", campusid AS \"Campusid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Loan> Loans(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Loan>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LoanPolicy> LoanPolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LoanPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", loanspolicy_fixedduedatescheduleid AS \"LoanspolicyFixedduedatescheduleid\", renewalspolicy_alternatefixedduedatescheduleid AS \"RenewalspolicyAlternatefixedduedatescheduleid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LoanType> LoanTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LoanType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Location> Locations(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Location>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", institutionid AS \"Institutionid\", campusid AS \"Campusid\", libraryid AS \"Libraryid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Login> Logins(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Login>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<LostItemFeePolicy> LostItemFeePolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<LostItemFeePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<MappingRule> MappingRules(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<MappingRule>($"SELECT _id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<MarcRecord> MarcRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<MarcRecord>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<MaterialType> MaterialTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<MaterialType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ModeOfIssuance> ModeOfIssuances(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ModeOfIssuance>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<NatureOfContentTerm> NatureOfContentTerms(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<NatureOfContentTerm>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Note> Notes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Note>($"SELECT id AS \"Id\", jsonb AS \"Content\", temporary_type_id AS \"TemporaryTypeId\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<NoteType> NoteTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<NoteType>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Order> Orders(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Order>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderInvoice> OrderInvoices(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderInvoice>($"SELECT id AS \"Id\", jsonb AS \"Content\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderItem> OrderItems(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", purchaseorderid AS \"Purchaseorderid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderTemplate> OrderTemplates(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderTemplate>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OrderTransactionSummary> OrderTransactionSummaries(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OrderTransactionSummary>($"SELECT id AS \"Id\", jsonb AS \"Content\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Organization> Organizations(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Organization>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<OverdueFinePolicy> OverdueFinePolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<OverdueFinePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Owner> Owners(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Owner>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PatronActionSession> PatronActionSessions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PatronActionSession>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PatronNoticePolicy> PatronNoticePolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PatronNoticePolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Payment> Payments(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Payment>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Permission> Permissions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Permission>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<PermissionsUser> PermissionsUsers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<PermissionsUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Piece> Pieces(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Piece>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", polineid AS \"Polineid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Proxy> Proxies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Proxy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<RawRecord> RawRecords(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<RawRecord>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Record> Records(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Record>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", jobexecutionid AS \"Jobexecutionid\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Refund> Refunds(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Refund>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ReportingCode> ReportingCodes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ReportingCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Request> Requests(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Request>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", cancellationreasonid AS \"Cancellationreasonid\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<RequestPolicy> RequestPolicies(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<RequestPolicy>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ScheduledNotice> ScheduledNotices(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ScheduledNotice>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ServicePoint> ServicePoints(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ServicePoint>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<ServicePointUser> ServicePointUsers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<ServicePointUser>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", defaultservicepointid AS \"Defaultservicepointid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Snapshot> Snapshots(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Snapshot>($"SELECT _id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<StaffSlip> StaffSlips(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<StaffSlip>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<StatisticalCode> StatisticalCodes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<StatisticalCode>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", statisticalcodetypeid AS \"Statisticalcodetypeid\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<StatisticalCodeType> StatisticalCodeTypes(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<StatisticalCodeType>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Tag> Tags(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Tag>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Template> Templates(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Template>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Transaction> Transactions(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Transaction>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", fiscalyearid AS \"Fiscalyearid\", fromfundid AS \"Fromfundid\", sourcefiscalyearid AS \"Sourcefiscalyearid\", tofundid AS \"Tofundid\" FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Transfer> Transfers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Transfer>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<TransferCriteria> TransferCriterias(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<TransferCriteria>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<User> Users(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<User>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", patrongroup AS \"Patrongroup\" FROM diku_mod_users{(IsMySql ? "_" : ".")}users{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<UserAcquisitionsUnit> UserAcquisitionsUnits(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<UserAcquisitionsUnit>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", acquisitionsunitid AS \"Acquisitionsunitid\" FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<UserRequestPreference> UserRequestPreferences(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<UserRequestPreference>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Voucher> Vouchers(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Voucher>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", invoiceid AS \"Invoiceid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<VoucherItem> VoucherItems(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<VoucherItem>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\", voucherid AS \"Voucherid\" FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);
        public IEnumerable<Waive> Waives(string where = null, object param = null, string orderBy = null, int? skip = null, int? take = null) => Query<Waive>($"SELECT id AS \"Id\", jsonb AS \"Content\", creation_date AS \"CreationTime\", created_by AS \"CreationUserId\" FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives{(where != null ? $" WHERE {where}" : "")}{(orderBy != null ? $" ORDER BY {orderBy}" : "")}", param, skip, take);

        public bool AnyAccounts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}accounts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAcquisitionsUnits(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAddressTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}addresstype{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAlerts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}alert{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAlternativeTitleTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}alternative_title_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuditLoans(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}audit_loan{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuthAttempts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_attempts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuthCredentialsHistories(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials_history{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyAuthPasswordActions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_password_action{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBlocks(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}manualblocks{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyBudgets(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}budget{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCallNumberTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}call_number_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCampuses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loccampus{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCancellationReasons(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}cancellation_reason{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCategories(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}categories{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCirculationRules(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}circulation_rules{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyClassificationTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}classification_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyComments(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}comments{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyConfigurations(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_configuration{(IsMySql ? "_" : ".")}config_data{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyContacts(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}contacts{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyContributorNameTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_name_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyContributorTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}contributor_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyCountries(string where = null, object param = null) => Query($"SELECT 1 FROM uc{(IsMySql ? "_" : ".")}countries{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY alpha2_code" : "")}", param: param, take: 1).Any();
        public bool AnyDocuments(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}documents{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyElectronicAccessRelationships(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}electronic_access_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyErrorRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}error_records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyEventLogs(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}event_logs{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFees(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFeeActions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}feefineactions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFinanceGroups(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFiscalYears(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fiscal_year{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFixedDueDateSchedules(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}fixed_due_date_schedule{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFunds(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFundDistributions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_distribution{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyFundTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}fund_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyGroups(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}groups{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyGroupFundFiscalYears(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}group_fund_fiscal_year{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHoldings(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_record{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHoldingNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHoldingTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}holdings_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyHridSettings(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}hrid_settings{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyIdTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}identifier_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyIllPolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}ill_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstances(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceFormats(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_format{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceRelationships(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceRelationshipTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_relationship_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceSourceMarcs(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_source_marc{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceStatuses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_status{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstanceTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}instance_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInstitutions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}locinstitution{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInterfaces(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interfaces{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInterfaceCredentials(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}interface_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInvoices(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoices{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyInvoiceItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}invoice_lines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyItemDamagedStatuses(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_damaged_status{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyItemNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}item_note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyJobExecutions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_executions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyJobExecutionSourceChunks(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}job_execution_source_chunks{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyJournalRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}journal_records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyLedgers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledger{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLedgerFiscalYears(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}ledgerfy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLibraries(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loclibrary{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLoans(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLoanPolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}loan_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLoanTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}loan_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLocations(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}location{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLogins(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_login{(IsMySql ? "_" : ".")}auth_credentials{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyLostItemFeePolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}lost_item_fee_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyMappingRules(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_manager{(IsMySql ? "_" : ".")}mapping_rules{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyMarcRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}marc_records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyMaterialTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}material_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyModeOfIssuances(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}mode_of_issuance{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyNatureOfContentTerms(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}nature_of_content_term{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyNotes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_data{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyNoteTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_notes{(IsMySql ? "_" : ".")}note_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrders(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}purchase_order{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderInvoices(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_invoice_relationship{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}po_line{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderTemplates(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}order_templates{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrderTransactionSummaries(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}order_transaction_summaries{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOrganizations(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_organizations_storage{(IsMySql ? "_" : ".")}organizations{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOverdueFinePolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}overdue_fine_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyOwners(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}owners{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPatronActionSessions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_action_session{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPatronNoticePolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}patron_notice_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPayments(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}payments{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPermissions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPermissionsUsers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_permissions{(IsMySql ? "_" : ".")}permissions_users{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyPieces(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}pieces{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyProxies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}proxyfor{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRawRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}raw_records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyRecords(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}records{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyRefunds(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}refunds{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyReportingCodes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}reporting_code{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRequests(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyRequestPolicies(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}request_policy{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyScheduledNotices(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}scheduled_notice{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyServicePoints(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyServicePointUsers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}service_point_user{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnySnapshots(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_source_record_storage{(IsMySql ? "_" : ".")}snapshots{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY _id" : "")}", param: param, take: 1).Any();
        public bool AnyStaffSlips(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}staff_slips{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyStatisticalCodes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyStatisticalCodeTypes(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_inventory_storage{(IsMySql ? "_" : ".")}statistical_code_type{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTags(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_tags{(IsMySql ? "_" : ".")}tags{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTemplates(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_template_engine{(IsMySql ? "_" : ".")}template{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTransactions(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_finance_storage{(IsMySql ? "_" : ".")}transaction{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTransfers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyTransferCriterias(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}transfer_criteria{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUsers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_users{(IsMySql ? "_" : ".")}users{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUserAcquisitionsUnits(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_orders_storage{(IsMySql ? "_" : ".")}acquisitions_unit_membership{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyUserRequestPreferences(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_circulation_storage{(IsMySql ? "_" : ".")}user_request_preference{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyVouchers(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}vouchers{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyVoucherItems(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_invoice_storage{(IsMySql ? "_" : ".")}voucher_lines{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();
        public bool AnyWaives(string where = null, object param = null) => Query($"SELECT 1 FROM diku_mod_feesfines{(IsMySql ? "_" : ".")}waives{(where != null ? $" WHERE {where}" : "")}{(IsSqlServer ? $" ORDER BY id" : "")}", param: param, take: 1).Any();

        public void Insert(Account account) => Execute("INSERT INTO diku_mod_feesfines.accounts (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", account);
        public void Insert(AcquisitionsUnit acquisitionsUnit) => Execute("INSERT INTO diku_mod_orders_storage.acquisitions_unit (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", acquisitionsUnit);
        public void Insert(AddressType addressType) => Execute("INSERT INTO diku_mod_users.addresstype (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", addressType);
        public void Insert(Alert alert) => Execute("INSERT INTO diku_mod_orders_storage.alert (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", alert);
        public void Insert(AlternativeTitleType alternativeTitleType) => Execute("INSERT INTO diku_mod_inventory_storage.alternative_title_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", alternativeTitleType);
        public void Insert(AuditLoan auditLoan) => Execute("INSERT INTO diku_mod_circulation_storage.audit_loan (id, jsonb) VALUES (@Id, @Content::jsonb)", auditLoan);
        public void Insert(AuthAttempt authAttempt) => Execute("INSERT INTO diku_mod_login.auth_attempts (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", authAttempt);
        public void Insert(AuthCredentialsHistory authCredentialsHistory) => Execute("INSERT INTO diku_mod_login.auth_credentials_history (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", authCredentialsHistory);
        public void Insert(AuthPasswordAction authPasswordAction) => Execute("INSERT INTO diku_mod_login.auth_password_action (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", authPasswordAction);
        public void Insert(Block block) => Execute("INSERT INTO diku_mod_feesfines.manualblocks (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", block);
        public void Insert(Budget budget) => Execute("INSERT INTO diku_mod_finance_storage.budget (id, jsonb, creation_date, created_by, fundid, fiscalyearid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @FundId, @FiscalYearId)", budget);
        public void Insert(CallNumberType callNumberType) => Execute("INSERT INTO diku_mod_inventory_storage.call_number_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", callNumberType);
        public void Insert(Campus campus) => Execute("INSERT INTO diku_mod_inventory_storage.loccampus (id, jsonb, creation_date, created_by, institutionid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Institutionid)", campus);
        public void Insert(CancellationReason cancellationReason) => Execute("INSERT INTO diku_mod_circulation_storage.cancellation_reason (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", cancellationReason);
        public void Insert(Category category) => Execute("INSERT INTO diku_mod_organizations_storage.categories (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", category);
        public void Insert(CirculationRule circulationRule) => Execute("INSERT INTO diku_mod_circulation_storage.circulation_rules (id, jsonb, lock) VALUES (@Id, @Content::jsonb, @Lock)", circulationRule);
        public void Insert(ClassificationType classificationType) => Execute("INSERT INTO diku_mod_inventory_storage.classification_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", classificationType);
        public void Insert(Comment comment) => Execute("INSERT INTO diku_mod_feesfines.comments (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", comment);
        public void Insert(Configuration configuration) => Execute("INSERT INTO diku_mod_configuration.config_data (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", configuration);
        public void Insert(Contact contact) => Execute("INSERT INTO diku_mod_organizations_storage.contacts (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", contact);
        public void Insert(ContributorNameType contributorNameType) => Execute("INSERT INTO diku_mod_inventory_storage.contributor_name_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", contributorNameType);
        public void Insert(ContributorType contributorType) => Execute("INSERT INTO diku_mod_inventory_storage.contributor_type (id, jsonb) VALUES (@Id, @Content::jsonb)", contributorType);
        public void Insert(Country country) => Execute("INSERT INTO uc.countries (alpha2_code, alpha3_code, name) VALUES (@Alpha2Code, @Alpha3Code, @Name)", country);
        public void Insert(Document document) => Execute("INSERT INTO diku_mod_invoice_storage.documents (id, jsonb, creation_date, created_by, invoiceid, document_data) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Invoiceid, @DocumentData)", document);
        public void Insert(ElectronicAccessRelationship electronicAccessRelationship) => Execute("INSERT INTO diku_mod_inventory_storage.electronic_access_relationship (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", electronicAccessRelationship);
        public void Insert(ErrorRecord errorRecord) => Execute("INSERT INTO diku_mod_source_record_storage.error_records (_id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", errorRecord);
        public void Insert(EventLog eventLog) => Execute("INSERT INTO diku_mod_login.event_logs (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", eventLog);
        public void Insert(Fee fee) => Execute("INSERT INTO diku_mod_feesfines.feefines (id, jsonb, creation_date, created_by, ownerid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Ownerid)", fee);
        public void Insert(FeeAction feeAction) => Execute("INSERT INTO diku_mod_feesfines.feefineactions (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", feeAction);
        public void Insert(FinanceGroup financeGroup) => Execute("INSERT INTO diku_mod_finance_storage.groups (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", financeGroup);
        public void Insert(FiscalYear fiscalYear) => Execute("INSERT INTO diku_mod_finance_storage.fiscal_year (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", fiscalYear);
        public void Insert(FixedDueDateSchedule fixedDueDateSchedule) => Execute("INSERT INTO diku_mod_circulation_storage.fixed_due_date_schedule (id, jsonb) VALUES (@Id, @Content::jsonb)", fixedDueDateSchedule);
        public void Insert(Fund fund) => Execute("INSERT INTO diku_mod_finance_storage.fund (id, jsonb, creation_date, created_by, ledgerid, fundtypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @LedgerId, @Fundtypeid)", fund);
        public void Insert(FundDistribution fundDistribution) => Execute("INSERT INTO diku_mod_finance_storage.fund_distribution (id, jsonb, creation_date, created_by, budgetid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Budgetid)", fundDistribution);
        public void Insert(FundType fundType) => Execute("INSERT INTO diku_mod_finance_storage.fund_type (id, jsonb) VALUES (@Id, @Content::jsonb)", fundType);
        public void Insert(Group group) => Execute("INSERT INTO diku_mod_users.groups (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", group);
        public void Insert(GroupFundFiscalYear groupFundFiscalYear) => Execute("INSERT INTO diku_mod_finance_storage.group_fund_fiscal_year (id, jsonb, budgetid, groupid, fundid, fiscalyearid) VALUES (@Id, @Content::jsonb, @Budgetid, @Groupid, @Fundid, @Fiscalyearid)", groupFundFiscalYear);
        public void Insert(Holding holding) => Execute("INSERT INTO diku_mod_inventory_storage.holdings_record (id, jsonb, creation_date, created_by, instanceid, permanentlocationid, temporarylocationid, holdingstypeid, callnumbertypeid, illpolicyid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Instanceid, @Permanentlocationid, @Temporarylocationid, @Holdingstypeid, @Callnumbertypeid, @Illpolicyid)", holding);
        public void Insert(HoldingNoteType holdingNoteType) => Execute("INSERT INTO diku_mod_inventory_storage.holdings_note_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", holdingNoteType);
        public void Insert(HoldingType holdingType) => Execute("INSERT INTO diku_mod_inventory_storage.holdings_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", holdingType);
        public void Insert(HridSetting hridSetting) => Execute("INSERT INTO diku_mod_inventory_storage.hrid_settings (id, jsonb, lock) VALUES (@Id, @Content::jsonb, @Lock)", hridSetting);
        public void Insert(IdType idType) => Execute("INSERT INTO diku_mod_inventory_storage.identifier_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", idType);
        public void Insert(IllPolicy illPolicy) => Execute("INSERT INTO diku_mod_inventory_storage.ill_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", illPolicy);
        public void Insert(Instance instance) => Execute("INSERT INTO diku_mod_inventory_storage.instance (id, jsonb, creation_date, created_by, instancestatusid, modeofissuanceid, instancetypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Instancestatusid, @Modeofissuanceid, @Instancetypeid)", instance);
        public void Insert(InstanceFormat instanceFormat) => Execute("INSERT INTO diku_mod_inventory_storage.instance_format (id, jsonb) VALUES (@Id, @Content::jsonb)", instanceFormat);
        public void Insert(InstanceNoteType instanceNoteType) => Execute("INSERT INTO diku_mod_inventory_storage.instance_note_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceNoteType);
        public void Insert(InstanceRelationship instanceRelationship) => Execute("INSERT INTO diku_mod_inventory_storage.instance_relationship (id, jsonb, creation_date, created_by, superinstanceid, subinstanceid, instancerelationshiptypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Superinstanceid, @Subinstanceid, @Instancerelationshiptypeid)", instanceRelationship);
        public void Insert(InstanceRelationshipType instanceRelationshipType) => Execute("INSERT INTO diku_mod_inventory_storage.instance_relationship_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceRelationshipType);
        public void Insert(InstanceSourceMarc instanceSourceMarc) => Execute("INSERT INTO diku_mod_inventory_storage.instance_source_marc (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceSourceMarc);
        public void Insert(InstanceStatus instanceStatus) => Execute("INSERT INTO diku_mod_inventory_storage.instance_status (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", instanceStatus);
        public void Insert(InstanceType instanceType) => Execute("INSERT INTO diku_mod_inventory_storage.instance_type (id, jsonb) VALUES (@Id, @Content::jsonb)", instanceType);
        public void Insert(Institution institution) => Execute("INSERT INTO diku_mod_inventory_storage.locinstitution (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", institution);
        public void Insert(Interface @interface) => Execute("INSERT INTO diku_mod_organizations_storage.interfaces (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", @interface);
        public void Insert(InterfaceCredential interfaceCredential) => Execute("INSERT INTO diku_mod_organizations_storage.interface_credentials (id, jsonb, interfaceid) VALUES (@Id, @Content::jsonb, @Interfaceid)", interfaceCredential);
        public void Insert(Invoice invoice) => Execute("INSERT INTO diku_mod_invoice_storage.invoices (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", invoice);
        public void Insert(InvoiceItem invoiceItem) => Execute("INSERT INTO diku_mod_invoice_storage.invoice_lines (id, jsonb, creation_date, created_by, invoiceid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Invoiceid)", invoiceItem);
        public void Insert(Item item) => Execute("INSERT INTO diku_mod_inventory_storage.item (id, jsonb, creation_date, created_by, holdingsrecordid, permanentloantypeid, temporaryloantypeid, materialtypeid, permanentlocationid, temporarylocationid, effectivelocationid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Holdingsrecordid, @Permanentloantypeid, @Temporaryloantypeid, @Materialtypeid, @Permanentlocationid, @Temporarylocationid, @Effectivelocationid)", item);
        public void Insert(ItemDamagedStatus itemDamagedStatus) => Execute("INSERT INTO diku_mod_inventory_storage.item_damaged_status (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", itemDamagedStatus);
        public void Insert(ItemNoteType itemNoteType) => Execute("INSERT INTO diku_mod_inventory_storage.item_note_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", itemNoteType);
        public void Insert(JobExecution jobExecution) => Execute("INSERT INTO diku_mod_source_record_manager.job_executions (_id, jsonb) VALUES (@Id, @Content::jsonb)", jobExecution);
        public void Insert(JobExecutionSourceChunk jobExecutionSourceChunk) => Execute("INSERT INTO diku_mod_source_record_manager.job_execution_source_chunks (_id, jsonb, jobexecutionid) VALUES (@Id, @Content::jsonb, @Jobexecutionid)", jobExecutionSourceChunk);
        public void Insert(JournalRecord journalRecord) => Execute("INSERT INTO diku_mod_source_record_manager.journal_records (_id, job_execution_id, source_id, entity_type, entity_id, entity_hrid, action_type, action_status, action_date) VALUES (@Id, @JobExecutionId, @SourceId, @EntityType, @EntityId, @EntityHrid, @ActionType, @ActionStatus, @ActionDate)", journalRecord);
        public void Insert(Ledger ledger) => Execute("INSERT INTO diku_mod_finance_storage.ledger (id, jsonb, creation_date, created_by, fiscalyearoneid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Fiscalyearoneid)", ledger);
        public void Insert(LedgerFiscalYear ledgerFiscalYear) => Execute("INSERT INTO diku_mod_finance_storage.ledgerfy (id, jsonb, ledgerid, fiscalyearid) VALUES (@Id, @Content::jsonb, @Ledgerid, @Fiscalyearid)", ledgerFiscalYear);
        public void Insert(Library library) => Execute("INSERT INTO diku_mod_inventory_storage.loclibrary (id, jsonb, creation_date, created_by, campusid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Campusid)", library);
        public void Insert(Loan loan) => Execute("INSERT INTO diku_mod_circulation_storage.loan (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", loan);
        public void Insert(LoanPolicy loanPolicy) => Execute("INSERT INTO diku_mod_circulation_storage.loan_policy (id, jsonb, creation_date, created_by, loanspolicy_fixedduedatescheduleid, renewalspolicy_alternatefixedduedatescheduleid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @LoanspolicyFixedduedatescheduleid, @RenewalspolicyAlternatefixedduedatescheduleid)", loanPolicy);
        public void Insert(LoanType loanType) => Execute("INSERT INTO diku_mod_inventory_storage.loan_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", loanType);
        public void Insert(Location location) => Execute("INSERT INTO diku_mod_inventory_storage.location (id, jsonb, creation_date, created_by, institutionid, campusid, libraryid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Institutionid, @Campusid, @Libraryid)", location);
        public void Insert(Login login) => Execute("INSERT INTO diku_mod_login.auth_credentials (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", login);
        public void Insert(LostItemFeePolicy lostItemFeePolicy) => Execute("INSERT INTO diku_mod_feesfines.lost_item_fee_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", lostItemFeePolicy);
        public void Insert(MappingRule mappingRule) => Execute("INSERT INTO diku_mod_source_record_manager.mapping_rules (_id, jsonb) VALUES (@Id, @Content::jsonb)", mappingRule);
        public void Insert(MarcRecord marcRecord) => Execute("INSERT INTO diku_mod_source_record_storage.marc_records (_id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", marcRecord);
        public void Insert(MaterialType materialType) => Execute("INSERT INTO diku_mod_inventory_storage.material_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", materialType);
        public void Insert(ModeOfIssuance modeOfIssuance) => Execute("INSERT INTO diku_mod_inventory_storage.mode_of_issuance (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", modeOfIssuance);
        public void Insert(NatureOfContentTerm natureOfContentTerm) => Execute("INSERT INTO diku_mod_inventory_storage.nature_of_content_term (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", natureOfContentTerm);
        public void Insert(Note note) => Execute("INSERT INTO diku_mod_notes.note_data (id, jsonb, temporary_type_id) VALUES (@Id, @Content::jsonb, @TemporaryTypeId)", note);
        public void Insert(NoteType noteType) => Execute("INSERT INTO diku_mod_notes.note_type (id, jsonb) VALUES (@Id, @Content::jsonb)", noteType);
        public void Insert(Order order) => Execute("INSERT INTO diku_mod_orders_storage.purchase_order (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", order);
        public void Insert(OrderInvoice orderInvoice) => Execute("INSERT INTO diku_mod_orders_storage.order_invoice_relationship (id, jsonb, purchaseorderid) VALUES (@Id, @Content::jsonb, @Purchaseorderid)", orderInvoice);
        public void Insert(OrderItem orderItem) => Execute("INSERT INTO diku_mod_orders_storage.po_line (id, jsonb, creation_date, created_by, purchaseorderid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Purchaseorderid)", orderItem);
        public void Insert(OrderTemplate orderTemplate) => Execute("INSERT INTO diku_mod_orders_storage.order_templates (id, jsonb) VALUES (@Id, @Content::jsonb)", orderTemplate);
        public void Insert(OrderTransactionSummary orderTransactionSummary) => Execute("INSERT INTO diku_mod_finance_storage.order_transaction_summaries (id, jsonb) VALUES (@Id, @Content::jsonb)", orderTransactionSummary);
        public void Insert(Organization organization) => Execute("INSERT INTO diku_mod_organizations_storage.organizations (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", organization);
        public void Insert(OverdueFinePolicy overdueFinePolicy) => Execute("INSERT INTO diku_mod_feesfines.overdue_fine_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", overdueFinePolicy);
        public void Insert(Owner owner) => Execute("INSERT INTO diku_mod_feesfines.owners (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", owner);
        public void Insert(PatronActionSession patronActionSession) => Execute("INSERT INTO diku_mod_circulation_storage.patron_action_session (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", patronActionSession);
        public void Insert(PatronNoticePolicy patronNoticePolicy) => Execute("INSERT INTO diku_mod_circulation_storage.patron_notice_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", patronNoticePolicy);
        public void Insert(Payment payment) => Execute("INSERT INTO diku_mod_feesfines.payments (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", payment);
        public void Insert(Permission permission) => Execute("INSERT INTO diku_mod_permissions.permissions (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", permission);
        public void Insert(PermissionsUser permissionsUser) => Execute("INSERT INTO diku_mod_permissions.permissions_users (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", permissionsUser);
        public void Insert(Piece piece) => Execute("INSERT INTO diku_mod_orders_storage.pieces (id, jsonb, creation_date, created_by, polineid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Polineid)", piece);
        public void Insert(Proxy proxy) => Execute("INSERT INTO diku_mod_users.proxyfor (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", proxy);
        public void Insert(RawRecord rawRecord) => Execute("INSERT INTO diku_mod_source_record_storage.raw_records (_id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", rawRecord);
        public void Insert(Record record) => Execute("INSERT INTO diku_mod_source_record_storage.records (_id, jsonb, creation_date, created_by, jobexecutionid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Jobexecutionid)", record);
        public void Insert(Refund refund) => Execute("INSERT INTO diku_mod_feesfines.refunds (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", refund);
        public void Insert(ReportingCode reportingCode) => Execute("INSERT INTO diku_mod_orders_storage.reporting_code (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", reportingCode);
        public void Insert(Request request) => Execute("INSERT INTO diku_mod_circulation_storage.request (id, jsonb, creation_date, created_by, cancellationreasonid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Cancellationreasonid)", request);
        public void Insert(RequestPolicy requestPolicy) => Execute("INSERT INTO diku_mod_circulation_storage.request_policy (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", requestPolicy);
        public void Insert(ScheduledNotice scheduledNotice) => Execute("INSERT INTO diku_mod_circulation_storage.scheduled_notice (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", scheduledNotice);
        public void Insert(ServicePoint servicePoint) => Execute("INSERT INTO diku_mod_inventory_storage.service_point (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", servicePoint);
        public void Insert(ServicePointUser servicePointUser) => Execute("INSERT INTO diku_mod_inventory_storage.service_point_user (id, jsonb, creation_date, created_by, defaultservicepointid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Defaultservicepointid)", servicePointUser);
        public void Insert(Snapshot snapshot) => Execute("INSERT INTO diku_mod_source_record_storage.snapshots (_id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", snapshot);
        public void Insert(StaffSlip staffSlip) => Execute("INSERT INTO diku_mod_circulation_storage.staff_slips (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", staffSlip);
        public void Insert(StatisticalCode statisticalCode) => Execute("INSERT INTO diku_mod_inventory_storage.statistical_code (id, jsonb, creation_date, created_by, statisticalcodetypeid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Statisticalcodetypeid)", statisticalCode);
        public void Insert(StatisticalCodeType statisticalCodeType) => Execute("INSERT INTO diku_mod_inventory_storage.statistical_code_type (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", statisticalCodeType);
        public void Insert(Tag tag) => Execute("INSERT INTO diku_mod_tags.tags (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", tag);
        public void Insert(Template template) => Execute("INSERT INTO diku_mod_template_engine.template (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", template);
        public void Insert(Transaction transaction) => Execute("INSERT INTO diku_mod_finance_storage.transaction (id, jsonb, creation_date, created_by, fiscalyearid, fromfundid, sourcefiscalyearid, tofundid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Fiscalyearid, @Fromfundid, @Sourcefiscalyearid, @Tofundid)", transaction);
        public void Insert(Transfer transfer) => Execute("INSERT INTO diku_mod_feesfines.transfers (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", transfer);
        public void Insert(TransferCriteria transferCriteria) => Execute("INSERT INTO diku_mod_feesfines.transfer_criteria (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", transferCriteria);
        public void Insert(User user) => Execute("INSERT INTO diku_mod_users.users (id, jsonb, creation_date, created_by, patrongroup) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Patrongroup)", user);
        public void Insert(UserAcquisitionsUnit userAcquisitionsUnit) => Execute("INSERT INTO diku_mod_orders_storage.acquisitions_unit_membership (id, jsonb, creation_date, created_by, acquisitionsunitid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Acquisitionsunitid)", userAcquisitionsUnit);
        public void Insert(UserRequestPreference userRequestPreference) => Execute("INSERT INTO diku_mod_circulation_storage.user_request_preference (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", userRequestPreference);
        public void Insert(Voucher voucher) => Execute("INSERT INTO diku_mod_invoice_storage.vouchers (id, jsonb, creation_date, created_by, invoiceid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Invoiceid)", voucher);
        public void Insert(VoucherItem voucherItem) => Execute("INSERT INTO diku_mod_invoice_storage.voucher_lines (id, jsonb, creation_date, created_by, voucherid) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId, @Voucherid)", voucherItem);
        public void Insert(Waive waive) => Execute("INSERT INTO diku_mod_feesfines.waives (id, jsonb, creation_date, created_by) VALUES (@Id, @Content::jsonb, @CreationTime, @CreationUserId)", waive);

        public int Update(Account account) => Execute($"UPDATE diku_mod_feesfines.accounts SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", account);
        public int Update(AcquisitionsUnit acquisitionsUnit) => Execute($"UPDATE diku_mod_orders_storage.acquisitions_unit SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", acquisitionsUnit);
        public int Update(AddressType addressType) => Execute($"UPDATE diku_mod_users.addresstype SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", addressType);
        public int Update(Alert alert) => Execute($"UPDATE diku_mod_orders_storage.alert SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", alert);
        public int Update(AlternativeTitleType alternativeTitleType) => Execute($"UPDATE diku_mod_inventory_storage.alternative_title_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", alternativeTitleType);
        public int Update(AuditLoan auditLoan) => Execute($"UPDATE diku_mod_circulation_storage.audit_loan SET jsonb = @Content::jsonb WHERE id = @Id", auditLoan);
        public int Update(AuthAttempt authAttempt) => Execute($"UPDATE diku_mod_login.auth_attempts SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", authAttempt);
        public int Update(AuthCredentialsHistory authCredentialsHistory) => Execute($"UPDATE diku_mod_login.auth_credentials_history SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", authCredentialsHistory);
        public int Update(AuthPasswordAction authPasswordAction) => Execute($"UPDATE diku_mod_login.auth_password_action SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", authPasswordAction);
        public int Update(Block block) => Execute($"UPDATE diku_mod_feesfines.manualblocks SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", block);
        public int Update(Budget budget) => Execute($"UPDATE diku_mod_finance_storage.budget SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, fundid = @FundId, fiscalyearid = @FiscalYearId WHERE id = @Id", budget);
        public int Update(CallNumberType callNumberType) => Execute($"UPDATE diku_mod_inventory_storage.call_number_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", callNumberType);
        public int Update(Campus campus) => Execute($"UPDATE diku_mod_inventory_storage.loccampus SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, institutionid = @Institutionid WHERE id = @Id", campus);
        public int Update(CancellationReason cancellationReason) => Execute($"UPDATE diku_mod_circulation_storage.cancellation_reason SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", cancellationReason);
        public int Update(Category category) => Execute($"UPDATE diku_mod_organizations_storage.categories SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", category);
        public int Update(CirculationRule circulationRule) => Execute($"UPDATE diku_mod_circulation_storage.circulation_rules SET jsonb = @Content::jsonb, lock = @Lock WHERE id = @Id", circulationRule);
        public int Update(ClassificationType classificationType) => Execute($"UPDATE diku_mod_inventory_storage.classification_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", classificationType);
        public int Update(Comment comment) => Execute($"UPDATE diku_mod_feesfines.comments SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", comment);
        public int Update(Configuration configuration) => Execute($"UPDATE diku_mod_configuration.config_data SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", configuration);
        public int Update(Contact contact) => Execute($"UPDATE diku_mod_organizations_storage.contacts SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", contact);
        public int Update(ContributorNameType contributorNameType) => Execute($"UPDATE diku_mod_inventory_storage.contributor_name_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", contributorNameType);
        public int Update(ContributorType contributorType) => Execute($"UPDATE diku_mod_inventory_storage.contributor_type SET jsonb = @Content::jsonb WHERE id = @Id", contributorType);
        public int Update(Country country) => Execute($"UPDATE uc.countries SET alpha3_code = @Alpha3Code, name = @Name WHERE alpha2_code = @Alpha2Code", country);
        public int Update(Document document) => Execute($"UPDATE diku_mod_invoice_storage.documents SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, invoiceid = @Invoiceid, document_data = @DocumentData WHERE id = @Id", document);
        public int Update(ElectronicAccessRelationship electronicAccessRelationship) => Execute($"UPDATE diku_mod_inventory_storage.electronic_access_relationship SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", electronicAccessRelationship);
        public int Update(ErrorRecord errorRecord) => Execute($"UPDATE diku_mod_source_record_storage.error_records SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE _id = @Id", errorRecord);
        public int Update(EventLog eventLog) => Execute($"UPDATE diku_mod_login.event_logs SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", eventLog);
        public int Update(Fee fee) => Execute($"UPDATE diku_mod_feesfines.feefines SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, ownerid = @Ownerid WHERE id = @Id", fee);
        public int Update(FeeAction feeAction) => Execute($"UPDATE diku_mod_feesfines.feefineactions SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", feeAction);
        public int Update(FinanceGroup financeGroup) => Execute($"UPDATE diku_mod_finance_storage.groups SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", financeGroup);
        public int Update(FiscalYear fiscalYear) => Execute($"UPDATE diku_mod_finance_storage.fiscal_year SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", fiscalYear);
        public int Update(FixedDueDateSchedule fixedDueDateSchedule) => Execute($"UPDATE diku_mod_circulation_storage.fixed_due_date_schedule SET jsonb = @Content::jsonb WHERE id = @Id", fixedDueDateSchedule);
        public int Update(Fund fund) => Execute($"UPDATE diku_mod_finance_storage.fund SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, ledgerid = @LedgerId, fundtypeid = @Fundtypeid WHERE id = @Id", fund);
        public int Update(FundDistribution fundDistribution) => Execute($"UPDATE diku_mod_finance_storage.fund_distribution SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, budgetid = @Budgetid WHERE id = @Id", fundDistribution);
        public int Update(FundType fundType) => Execute($"UPDATE diku_mod_finance_storage.fund_type SET jsonb = @Content::jsonb WHERE id = @Id", fundType);
        public int Update(Group group) => Execute($"UPDATE diku_mod_users.groups SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", group);
        public int Update(GroupFundFiscalYear groupFundFiscalYear) => Execute($"UPDATE diku_mod_finance_storage.group_fund_fiscal_year SET jsonb = @Content::jsonb, budgetid = @Budgetid, groupid = @Groupid, fundid = @Fundid, fiscalyearid = @Fiscalyearid WHERE id = @Id", groupFundFiscalYear);
        public int Update(Holding holding) => Execute($"UPDATE diku_mod_inventory_storage.holdings_record SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, instanceid = @Instanceid, permanentlocationid = @Permanentlocationid, temporarylocationid = @Temporarylocationid, holdingstypeid = @Holdingstypeid, callnumbertypeid = @Callnumbertypeid, illpolicyid = @Illpolicyid WHERE id = @Id", holding);
        public int Update(HoldingNoteType holdingNoteType) => Execute($"UPDATE diku_mod_inventory_storage.holdings_note_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", holdingNoteType);
        public int Update(HoldingType holdingType) => Execute($"UPDATE diku_mod_inventory_storage.holdings_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", holdingType);
        public int Update(HridSetting hridSetting) => Execute($"UPDATE diku_mod_inventory_storage.hrid_settings SET jsonb = @Content::jsonb, lock = @Lock WHERE id = @Id", hridSetting);
        public int Update(IdType idType) => Execute($"UPDATE diku_mod_inventory_storage.identifier_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", idType);
        public int Update(IllPolicy illPolicy) => Execute($"UPDATE diku_mod_inventory_storage.ill_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", illPolicy);
        public int Update(Instance instance) => Execute($"UPDATE diku_mod_inventory_storage.instance SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, instancestatusid = @Instancestatusid, modeofissuanceid = @Modeofissuanceid, instancetypeid = @Instancetypeid WHERE id = @Id", instance);
        public int Update(InstanceFormat instanceFormat) => Execute($"UPDATE diku_mod_inventory_storage.instance_format SET jsonb = @Content::jsonb WHERE id = @Id", instanceFormat);
        public int Update(InstanceNoteType instanceNoteType) => Execute($"UPDATE diku_mod_inventory_storage.instance_note_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceNoteType);
        public int Update(InstanceRelationship instanceRelationship) => Execute($"UPDATE diku_mod_inventory_storage.instance_relationship SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, superinstanceid = @Superinstanceid, subinstanceid = @Subinstanceid, instancerelationshiptypeid = @Instancerelationshiptypeid WHERE id = @Id", instanceRelationship);
        public int Update(InstanceRelationshipType instanceRelationshipType) => Execute($"UPDATE diku_mod_inventory_storage.instance_relationship_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceRelationshipType);
        public int Update(InstanceSourceMarc instanceSourceMarc) => Execute($"UPDATE diku_mod_inventory_storage.instance_source_marc SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceSourceMarc);
        public int Update(InstanceStatus instanceStatus) => Execute($"UPDATE diku_mod_inventory_storage.instance_status SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", instanceStatus);
        public int Update(InstanceType instanceType) => Execute($"UPDATE diku_mod_inventory_storage.instance_type SET jsonb = @Content::jsonb WHERE id = @Id", instanceType);
        public int Update(Institution institution) => Execute($"UPDATE diku_mod_inventory_storage.locinstitution SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", institution);
        public int Update(Interface @interface) => Execute($"UPDATE diku_mod_organizations_storage.interfaces SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", @interface);
        public int Update(InterfaceCredential interfaceCredential) => Execute($"UPDATE diku_mod_organizations_storage.interface_credentials SET jsonb = @Content::jsonb, interfaceid = @Interfaceid WHERE id = @Id", interfaceCredential);
        public int Update(Invoice invoice) => Execute($"UPDATE diku_mod_invoice_storage.invoices SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", invoice);
        public int Update(InvoiceItem invoiceItem) => Execute($"UPDATE diku_mod_invoice_storage.invoice_lines SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, invoiceid = @Invoiceid WHERE id = @Id", invoiceItem);
        public int Update(Item item) => Execute($"UPDATE diku_mod_inventory_storage.item SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, holdingsrecordid = @Holdingsrecordid, permanentloantypeid = @Permanentloantypeid, temporaryloantypeid = @Temporaryloantypeid, materialtypeid = @Materialtypeid, permanentlocationid = @Permanentlocationid, temporarylocationid = @Temporarylocationid, effectivelocationid = @Effectivelocationid WHERE id = @Id", item);
        public int Update(ItemDamagedStatus itemDamagedStatus) => Execute($"UPDATE diku_mod_inventory_storage.item_damaged_status SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", itemDamagedStatus);
        public int Update(ItemNoteType itemNoteType) => Execute($"UPDATE diku_mod_inventory_storage.item_note_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", itemNoteType);
        public int Update(JobExecution jobExecution) => Execute($"UPDATE diku_mod_source_record_manager.job_executions SET jsonb = @Content::jsonb WHERE _id = @Id", jobExecution);
        public int Update(JobExecutionSourceChunk jobExecutionSourceChunk) => Execute($"UPDATE diku_mod_source_record_manager.job_execution_source_chunks SET jsonb = @Content::jsonb, jobexecutionid = @Jobexecutionid WHERE _id = @Id", jobExecutionSourceChunk);
        public int Update(JournalRecord journalRecord) => Execute($"UPDATE diku_mod_source_record_manager.journal_records SET job_execution_id = @JobExecutionId, source_id = @SourceId, entity_type = @EntityType, entity_id = @EntityId, entity_hrid = @EntityHrid, action_type = @ActionType, action_status = @ActionStatus, action_date = @ActionDate WHERE _id = @Id", journalRecord);
        public int Update(Ledger ledger) => Execute($"UPDATE diku_mod_finance_storage.ledger SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, fiscalyearoneid = @Fiscalyearoneid WHERE id = @Id", ledger);
        public int Update(LedgerFiscalYear ledgerFiscalYear) => Execute($"UPDATE diku_mod_finance_storage.ledgerfy SET jsonb = @Content::jsonb, ledgerid = @Ledgerid, fiscalyearid = @Fiscalyearid WHERE id = @Id", ledgerFiscalYear);
        public int Update(Library library) => Execute($"UPDATE diku_mod_inventory_storage.loclibrary SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, campusid = @Campusid WHERE id = @Id", library);
        public int Update(Loan loan) => Execute($"UPDATE diku_mod_circulation_storage.loan SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", loan);
        public int Update(LoanPolicy loanPolicy) => Execute($"UPDATE diku_mod_circulation_storage.loan_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, loanspolicy_fixedduedatescheduleid = @LoanspolicyFixedduedatescheduleid, renewalspolicy_alternatefixedduedatescheduleid = @RenewalspolicyAlternatefixedduedatescheduleid WHERE id = @Id", loanPolicy);
        public int Update(LoanType loanType) => Execute($"UPDATE diku_mod_inventory_storage.loan_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", loanType);
        public int Update(Location location) => Execute($"UPDATE diku_mod_inventory_storage.location SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, institutionid = @Institutionid, campusid = @Campusid, libraryid = @Libraryid WHERE id = @Id", location);
        public int Update(Login login) => Execute($"UPDATE diku_mod_login.auth_credentials SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", login);
        public int Update(LostItemFeePolicy lostItemFeePolicy) => Execute($"UPDATE diku_mod_feesfines.lost_item_fee_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", lostItemFeePolicy);
        public int Update(MappingRule mappingRule) => Execute($"UPDATE diku_mod_source_record_manager.mapping_rules SET jsonb = @Content::jsonb WHERE _id = @Id", mappingRule);
        public int Update(MarcRecord marcRecord) => Execute($"UPDATE diku_mod_source_record_storage.marc_records SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE _id = @Id", marcRecord);
        public int Update(MaterialType materialType) => Execute($"UPDATE diku_mod_inventory_storage.material_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", materialType);
        public int Update(ModeOfIssuance modeOfIssuance) => Execute($"UPDATE diku_mod_inventory_storage.mode_of_issuance SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", modeOfIssuance);
        public int Update(NatureOfContentTerm natureOfContentTerm) => Execute($"UPDATE diku_mod_inventory_storage.nature_of_content_term SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", natureOfContentTerm);
        public int Update(Note note) => Execute($"UPDATE diku_mod_notes.note_data SET jsonb = @Content::jsonb, temporary_type_id = @TemporaryTypeId WHERE id = @Id", note);
        public int Update(NoteType noteType) => Execute($"UPDATE diku_mod_notes.note_type SET jsonb = @Content::jsonb WHERE id = @Id", noteType);
        public int Update(Order order) => Execute($"UPDATE diku_mod_orders_storage.purchase_order SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", order);
        public int Update(OrderInvoice orderInvoice) => Execute($"UPDATE diku_mod_orders_storage.order_invoice_relationship SET jsonb = @Content::jsonb, purchaseorderid = @Purchaseorderid WHERE id = @Id", orderInvoice);
        public int Update(OrderItem orderItem) => Execute($"UPDATE diku_mod_orders_storage.po_line SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, purchaseorderid = @Purchaseorderid WHERE id = @Id", orderItem);
        public int Update(OrderTemplate orderTemplate) => Execute($"UPDATE diku_mod_orders_storage.order_templates SET jsonb = @Content::jsonb WHERE id = @Id", orderTemplate);
        public int Update(OrderTransactionSummary orderTransactionSummary) => Execute($"UPDATE diku_mod_finance_storage.order_transaction_summaries SET jsonb = @Content::jsonb WHERE id = @Id", orderTransactionSummary);
        public int Update(Organization organization) => Execute($"UPDATE diku_mod_organizations_storage.organizations SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", organization);
        public int Update(OverdueFinePolicy overdueFinePolicy) => Execute($"UPDATE diku_mod_feesfines.overdue_fine_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", overdueFinePolicy);
        public int Update(Owner owner) => Execute($"UPDATE diku_mod_feesfines.owners SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", owner);
        public int Update(PatronActionSession patronActionSession) => Execute($"UPDATE diku_mod_circulation_storage.patron_action_session SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", patronActionSession);
        public int Update(PatronNoticePolicy patronNoticePolicy) => Execute($"UPDATE diku_mod_circulation_storage.patron_notice_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", patronNoticePolicy);
        public int Update(Payment payment) => Execute($"UPDATE diku_mod_feesfines.payments SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", payment);
        public int Update(Permission permission) => Execute($"UPDATE diku_mod_permissions.permissions SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", permission);
        public int Update(PermissionsUser permissionsUser) => Execute($"UPDATE diku_mod_permissions.permissions_users SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", permissionsUser);
        public int Update(Piece piece) => Execute($"UPDATE diku_mod_orders_storage.pieces SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, polineid = @Polineid WHERE id = @Id", piece);
        public int Update(Proxy proxy) => Execute($"UPDATE diku_mod_users.proxyfor SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", proxy);
        public int Update(RawRecord rawRecord) => Execute($"UPDATE diku_mod_source_record_storage.raw_records SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE _id = @Id", rawRecord);
        public int Update(Record record) => Execute($"UPDATE diku_mod_source_record_storage.records SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, jobexecutionid = @Jobexecutionid WHERE _id = @Id", record);
        public int Update(Refund refund) => Execute($"UPDATE diku_mod_feesfines.refunds SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", refund);
        public int Update(ReportingCode reportingCode) => Execute($"UPDATE diku_mod_orders_storage.reporting_code SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", reportingCode);
        public int Update(Request request) => Execute($"UPDATE diku_mod_circulation_storage.request SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, cancellationreasonid = @Cancellationreasonid WHERE id = @Id", request);
        public int Update(RequestPolicy requestPolicy) => Execute($"UPDATE diku_mod_circulation_storage.request_policy SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", requestPolicy);
        public int Update(ScheduledNotice scheduledNotice) => Execute($"UPDATE diku_mod_circulation_storage.scheduled_notice SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", scheduledNotice);
        public int Update(ServicePoint servicePoint) => Execute($"UPDATE diku_mod_inventory_storage.service_point SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", servicePoint);
        public int Update(ServicePointUser servicePointUser) => Execute($"UPDATE diku_mod_inventory_storage.service_point_user SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, defaultservicepointid = @Defaultservicepointid WHERE id = @Id", servicePointUser);
        public int Update(Snapshot snapshot) => Execute($"UPDATE diku_mod_source_record_storage.snapshots SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE _id = @Id", snapshot);
        public int Update(StaffSlip staffSlip) => Execute($"UPDATE diku_mod_circulation_storage.staff_slips SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", staffSlip);
        public int Update(StatisticalCode statisticalCode) => Execute($"UPDATE diku_mod_inventory_storage.statistical_code SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, statisticalcodetypeid = @Statisticalcodetypeid WHERE id = @Id", statisticalCode);
        public int Update(StatisticalCodeType statisticalCodeType) => Execute($"UPDATE diku_mod_inventory_storage.statistical_code_type SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", statisticalCodeType);
        public int Update(Tag tag) => Execute($"UPDATE diku_mod_tags.tags SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", tag);
        public int Update(Template template) => Execute($"UPDATE diku_mod_template_engine.template SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", template);
        public int Update(Transaction transaction) => Execute($"UPDATE diku_mod_finance_storage.transaction SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, fiscalyearid = @Fiscalyearid, fromfundid = @Fromfundid, sourcefiscalyearid = @Sourcefiscalyearid, tofundid = @Tofundid WHERE id = @Id", transaction);
        public int Update(Transfer transfer) => Execute($"UPDATE diku_mod_feesfines.transfers SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", transfer);
        public int Update(TransferCriteria transferCriteria) => Execute($"UPDATE diku_mod_feesfines.transfer_criteria SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", transferCriteria);
        public int Update(User user) => Execute($"UPDATE diku_mod_users.users SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, patrongroup = @Patrongroup WHERE id = @Id", user);
        public int Update(UserAcquisitionsUnit userAcquisitionsUnit) => Execute($"UPDATE diku_mod_orders_storage.acquisitions_unit_membership SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, acquisitionsunitid = @Acquisitionsunitid WHERE id = @Id", userAcquisitionsUnit);
        public int Update(UserRequestPreference userRequestPreference) => Execute($"UPDATE diku_mod_circulation_storage.user_request_preference SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", userRequestPreference);
        public int Update(Voucher voucher) => Execute($"UPDATE diku_mod_invoice_storage.vouchers SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, invoiceid = @Invoiceid WHERE id = @Id", voucher);
        public int Update(VoucherItem voucherItem) => Execute($"UPDATE diku_mod_invoice_storage.voucher_lines SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId, voucherid = @Voucherid WHERE id = @Id", voucherItem);
        public int Update(Waive waive) => Execute($"UPDATE diku_mod_feesfines.waives SET jsonb = @Content::jsonb, creation_date = @CreationTime, created_by = @CreationUserId WHERE id = @Id", waive);

        public int Execute(string sql, object param = null, int? commandTimeout = null)
        {
            traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param}");
            return Connection.Execute(sql, param, Transaction, commandTimeout ?? CommandTimeout);
        }

        public T ExecuteScalar<T>(string sql, object param = null, int? commandTimeout = null)
        {
            sql = Regex.Replace(sql, @"[\[\]]", "\"", RegexOptions.Compiled);
            var s = Stopwatch.StartNew();
            try
            {
                return Connection.ExecuteScalar<T>(sql, param, Transaction, commandTimeout ?? CommandTimeout);
            }
            catch (NpgsqlException e)
            {
                if (e.Message == "Exception while reading from stream") traceSource.TraceEvent(TraceEventType.Verbose, 0, string.Join("\r\n", Query<string>($"EXPLAIN {sql}")));
                throw e;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param} {s.Elapsed}");
            }
        }

        public IEnumerable<dynamic> Query(string sql, object param = null, int? skip = null, int? take = null, int? commandTimeout = null)
        {
            sql = Regex.Replace(sql, @"[\[\]]", "\"", RegexOptions.Compiled);
            if (skip != null || take != null) sql = $"{sql}{(IsMySql ? $" LIMIT {(skip == null ? $"{take}" : $"{skip}, {take ?? int.MaxValue}")}" : IsPostgreSql ? $"{(take != null ? $" LIMIT {take}" : "")}{(skip != null ? $" OFFSET {skip}" : "")}" : $" OFFSET {skip ?? 0} ROWS{(take != null ? $" FETCH NEXT {take} ROWS ONLY" : "")}")}";
            var s = Stopwatch.StartNew();
            try
            {
                return Connection.Query(sql, param, Transaction, false, commandTimeout ?? CommandTimeout);
            }
            catch (NpgsqlException e)
            {
                if (e.Message == "Exception while reading from stream") traceSource.TraceEvent(TraceEventType.Verbose, 0, string.Join("\r\n", Query<string>($"EXPLAIN {sql}")));
                throw e;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param} {s.Elapsed}");
            }
        }

        public IEnumerable<T> Query<T>(string sql, object param = null, int? skip = null, int? take = null, int? commandTimeout = null)
        {
            sql = Regex.Replace(sql, @"[\[\]]", "\"", RegexOptions.Compiled);
            if (skip != null || take != null) sql = $"{sql}{(IsMySql ? $" LIMIT {(skip == null ? $"{take}" : $"{skip}, {take ?? int.MaxValue}")}" : IsPostgreSql ? $"{(take != null ? $" LIMIT {take}" : "")}{(skip != null ? $" OFFSET {skip}" : "")}" : $" OFFSET {skip ?? 0} ROWS{(take != null ? $" FETCH NEXT {take} ROWS ONLY" : "")}")}";
            var s = Stopwatch.StartNew();
            try
            {
                return Connection.Query<T>(sql, param, Transaction, false, commandTimeout ?? CommandTimeout);
            }
            catch (NpgsqlException e)
            {
                if (e.Message == "Exception while reading from stream") traceSource.TraceEvent(TraceEventType.Verbose, 0, string.Join("\r\n", Query<string>($"EXPLAIN {sql}")));
                throw e;
            }
            finally
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, $"{sql} {param} {s.Elapsed}");
            }
        }

        public void Commit()
        {
            if (dbTransaction != null)
            {
                traceSource.TraceEvent(TraceEventType.Verbose, 0, "Committing transaction");
                dbTransaction.Commit();
                dbTransaction.Dispose();
                dbTransaction = dbConnection.BeginTransaction();
            }
        }

        private string SqlEncode(string value) => value.Replace("'", "''").Replace(@"\", IsMySql ? @"\\" : @"\");

        public void Dispose()
        {
            if (dbTransaction != null)
            {
                dbTransaction.Dispose();
            }
            if (dbConnection != null)
            {
                dbConnection.Dispose();
            }
        }
    }

    public class DbProviderFactories
    {
        internal static DbProviderFactory GetFactory(string providerName)
        {
            if (providerName == "MySql.Data.MySqlClient" || providerName == "MySql.Data.MySqlClient2")
                throw new NotSupportedException();
            else if (providerName == "Npgsql")
                return NpgsqlFactory.Instance;
            else if (providerName == "System.Data.SqlClient")
                throw new NotSupportedException();
            throw new NotImplementedException();
        }
    }
}
